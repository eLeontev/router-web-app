{"version":3,"sources":["constants/login.constants.ts","components/common/input.tsx","components/common/button.tsx","components/common/message.tsx","concurency/suspence-fetch.ts","constants/cards.constants.ts","context/loader.context.tsx","components/common/loader.tsx","constants/modal.constants.ts","mock/cards.mock.ts","services/login-and-load-dashboard.ts","components/concurency/concurency-login-handler.tsx","constants/router.constants.ts","reducers/login.reducer.ts","pages/login/login.tsx","components/common/search-bar.tsx","components/dashboard/header/header.tsx","components/dashboard/nvagation-bar/navigation-bar.tsx","components/dashboard/cards/unknown-card.tsx","components/dashboard/cards/system-card.tsx","components/common/checkbox.tsx","context/modal.context.tsx","components/dashboard/connection/connection.tsx","components/dashboard/online-device/online-device.tsx","components/dashboard/cards/cards.tsx","components/dashboard/cards/applications-card.tsx","components/dashboard/cards/wifi-card.tsx","services/card-loader.service.ts","services/qr-code-generator.service.ts","components/modal-content/connection.content.tsx","components/common/modal.tsx","pages/dashboard/dashboard.tsx","pages/router.tsx","serviceWorker.ts","index.tsx"],"names":["loginActionTypes","Input","React","memo","value","onChange","name","type","placeholder","e","target","Button","className","buttonName","buttonHandler","onClick","Message","message","onClose","shouldHideCloseButton","initialCredentials","login","password","defaultCredentials","initialState","shouldLogin","errorMessage","cardTypes","connectionTypes","wrapPromise","promise","result","status","suspender","then","r","read","LoaderContext","createContext","WithLoaderContext","children","useState","isLoading","setLoader","Provider","ContextLoader","useContext","SuspenseLoader","defaultCards","leftCards","rightCards","modalContentTypes","connectionActionTypes","connectionTypeMessages","wifi","wired","cardsMocks","cardId","applicationType","title","cardContent","applications","systemType","systemParams","label","wifiType","connections","connectionId","isActive","range","channel","connectionInfo","connectionContentType","url","credentials","networkId","actions","WPS","actionType","wpsType","main","copyType","printType","addLogoType","onlineDevices","key","countOfConnections","isHome","fetchDashboard","userToken","Promise","resolve","reject","setTimeout","loadDashboard","loginValues","errorHandler","catch","DashboardLoader","dashboardRequest","history","useHistory","cards","push","pathname","state","ConcurencyLoginHandler","getDashboardRequest","fallback","ReactDOM","createPortal","document","getElementById","cleanup","cleanuperror","cleanuplogin","setdefault","validate","actionHandlers","v","trim","length","loginReducer","actionHandler","LoginPage","useReducer","dispatch","id","SearchBar","console","log","Header","NavigationBar","isCollapsed","UnknownCard","card","SystemParamComponent","systemParam","setCheckboxClassName","setCheckboxBarClassName","setCheckboxClassNameDisabled","isDisable","Checkbox","triggerCheckbox","ModalContext","WithModalContext","modalInfo","setModal","ConnectionComponent","connection","connectionStatus","setConnectionStatus","isWaiting","setStatus","useCallback","a","res","getConnectionModificator","OnlineDeviceComponent","onlineDevice","cardsComponents","props","map","Card","CardComponent","Cards","cardLoaderInstance","preloadedCards","setCards","useEffect","fetchCards","finally","generateQR","QRCode","toDataURL","ConnectionModalContent","qrCodeBase64","setQRCode","getTitle","src","alt","modalContentComponents","ModalComponent","Modal","ModalContent","DashboardPage","cardLoader","useLoadCards","location","AppRouter","path","Boolean","window","hostname","match","unstable_createRoot","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.b84e2a66.chunk.js","sourcesContent":["import { LoginValues, LoginState } from '../models/login.model';\n\nexport const noErrorMessage = '';\nexport const invalidCredentionalsMessage = 'The credentials are invalid';\n\nexport const initialCredentials: LoginValues = {\n    login: '',\n    password: '',\n};\n\nexport const defaultCredentials: LoginValues = {\n    login: 'admin',\n    password: 'root',\n};\n\nexport const initialState: LoginState = {\n    ...initialCredentials,\n    shouldLogin: false,\n    errorMessage: '',\n};\n\nexport const minCountOfLoginSymbols = 3;\nexport const minCountOfPasswordSymbols = 3;\n\nexport enum loginActionTypes {\n    login = 'login',\n    password = 'password',\n    cleanup = 'cleanup',\n    setdefault = 'setdefault',\n    cleanuperror = 'cleanuperror',\n    cleanuplogin = 'cleanuplogin',\n    validate = 'validate',\n}\n\nexport type ActionHandlers = {\n    [actionType in loginActionTypes]: (...args: any) => any;\n};\n","import React from 'react';\n\nexport type InputProps = {\n    value: string | number;\n    name: string;\n    onChange: (value: string) => void;\n    type?: string;\n    placeholder?: string;\n};\n\nexport const searchPlaceholder = 'Search for settings';\n\nexport const Input = React.memo(\n    ({\n        value,\n        onChange,\n        name,\n        type = 'text',\n        placeholder = '',\n    }: InputProps) => (\n        <input\n            name={name}\n            type={type}\n            value={value}\n            placeholder={placeholder}\n            onChange={(e) => onChange(e.target.value)}\n        ></input>\n    )\n);\n","import React from 'react';\nimport './button.scss';\n\nexport type ButtonProps = {\n    className?: string;\n    buttonName: string;\n    buttonHandler: () => void;\n};\nexport const Button = React.memo(\n    ({ className, buttonName, buttonHandler }: ButtonProps) => (\n        <button className={className} onClick={buttonHandler}>\n            {buttonName}\n        </button>\n    )\n);\n","import React from 'react';\nimport './message.scss';\n\nimport { Button } from './button';\n\nexport type MessageProps = {\n    message: string;\n    type: string;\n    onClose: () => void;\n    shouldHideCloseButton?: boolean;\n};\n\nexport const Message = React.memo(\n    ({ message, type, onClose, shouldHideCloseButton = false }: MessageProps) =>\n        message ? (\n            <section className=\"message\">\n                <p className={type}>\n                    {message}\n                    {shouldHideCloseButton ? null : (\n                        <Button\n                            className=\"close-message-button\"\n                            buttonName=\"x\"\n                            buttonHandler={onClose}\n                        />\n                    )}\n                </p>\n            </section>\n        ) : null\n);\n","export type SuspenseResourse<R> = {\n    read(): R;\n};\n\nexport const suspenceFetch = <R>(\n    promise: Promise<R>\n): SuspenseResourse<R | undefined> => {\n    return wrapPromise<R>(promise);\n};\n\nconst wrapPromise = <R>(promise: Promise<R>) => {\n    let status = 'pending';\n    let result: R;\n\n    const suspender = promise.then(\n        (r) => {\n            status = 'success';\n            result = r;\n        },\n        (e) => {\n            status = 'error';\n            result = e;\n        }\n    );\n    return {\n        read(): R | undefined {\n            if (status === 'pending') {\n                throw suspender;\n            } else if (status === 'error') {\n                throw result;\n            } else if (status === 'success') {\n                return result;\n            }\n        },\n    };\n};\n","import { Cards } from '../models/dashboard.model';\n\nexport const invalidCardsMessage = 'The cards loading was failed';\n\nexport const defaultCards: Cards = {\n    leftCards: [],\n    rightCards: [],\n};\n\nexport const applicationsCardTitle = 'Applications';\nexport const systemCardTitle = 'About the system';\nexport const homeWiFiCardTitle = 'Home segment';\nexport const guestWiFiCardTitle = 'Guest segment';\n\nexport enum cardTypes {\n    applicationType = 'applicationType',\n    systemType = 'systemType',\n    wifiType = 'wifiType',\n}\nexport enum connectionTypes {\n    wired = 'wired',\n    wifi = 'wifi',\n}\n\nexport const wifiConnectionTypeMessage = 'Wi-Fi';\nexport const wiredConnectionTypeMessage = 'Wired';\n\nexport const connectionTypeMessages = {\n    [connectionTypes.wifi]: wifiConnectionTypeMessage,\n    [connectionTypes.wired]: wiredConnectionTypeMessage,\n};\n\nexport const channgelLabel = 'Channel';\nexport const showConnectionInfoButtonLabel = 'Show connection info';\nexport const onlineDeviceTitle = 'Online devices';\n","import React, { useState } from 'react';\n\nexport const LoaderContext = React.createContext(null as any);\n\nexport const WithLoaderContext = ({ children }: { children: any }) => {\n    const [isLoading, setLoader] = useState(false);\n\n    return (\n        <LoaderContext.Provider value={{ isLoading, setLoader }}>\n            {children}\n        </LoaderContext.Provider>\n    );\n};\n","import React, { useContext } from 'react';\nimport './loader.scss';\n\nimport { LoaderContext } from '../../context/loader.context';\n\nexport const ContextLoader = React.memo(() => {\n    const { isLoading } = useContext(LoaderContext);\n\n    return isLoading ? <section className=\"loader\"></section> : null;\n});\n\nexport const SuspenseLoader = () => <section className=\"loader\"></section>;\n","export enum modalContentTypes {\n    connectionContentType = 'connectionContentType',\n}\n\nexport enum connectionActionTypes {\n    copyType = 'copyType',\n    printType = 'printType',\n    addLogoType = 'addLogoType',\n    wpsType = 'wpsType',\n}\n","import {\n    cardTypes,\n    applicationsCardTitle,\n    systemCardTitle,\n    homeWiFiCardTitle,\n    connectionTypes,\n    guestWiFiCardTitle,\n} from '../constants/cards.constants';\nimport {\n    ApplicationsCard,\n    SystemCard,\n    WiFiCard,\n    Cards,\n} from '../models/dashboard.model';\nimport {\n    connectionActionTypes,\n    modalContentTypes,\n} from '../constants/modal.constants';\n\nexport const applicationsCatrd: ApplicationsCard = {\n    cardId: 'applicationsCatrd_1',\n    type: cardTypes.applicationType,\n    title: applicationsCardTitle,\n    cardContent: {\n        applications: [],\n    },\n};\n\nexport const systemCatrd: SystemCard = {\n    cardId: 'systemCatrd_1',\n    type: cardTypes.systemType,\n    title: systemCardTitle,\n    cardContent: {\n        systemParams: [\n            {\n                label: 'Model',\n                value: 'Speedster (KN-3010)',\n            },\n            {\n                label: 'Service tag',\n                value: '067-483-550-015-477',\n            },\n            {\n                label: 'OS version',\n                value: '3.4.6',\n            },\n            {\n                label: 'Auto-update',\n                value: 'Enabled',\n            },\n            {\n                label: 'Uptime',\n                value: '3 days 01:33:01',\n            },\n            {\n                label: 'Current time',\n                value: '6/21/2020 17:50:20',\n            },\n            {\n                label: 'CPU usage',\n                value: '4%',\n            },\n            {\n                label: 'RAM usage',\n                value: '40% (51/128 Mbytes)',\n            },\n        ],\n    },\n};\n\nexport const homeWiFiCard: WiFiCard = {\n    cardId: 'homeWiFiCard_ 1',\n    type: cardTypes.wifiType,\n    title: homeWiFiCardTitle,\n    cardContent: {\n        connections: [\n            {\n                connectionId: 'connection_1',\n                name: 'Keenetic-9672',\n                isActive: true,\n                range: '2.4 GHz',\n                channel: 9,\n                connectionInfo: {\n                    type: modalContentTypes.connectionContentType,\n                    url: 'https://url.com/123',\n                    credentials: {\n                        networkId: 'N ET WO R K iD',\n                        password: 'network password',\n                    },\n                    actions: {\n                        WPS: {\n                            actionType: connectionActionTypes.wpsType,\n                            isActive: true,\n                        },\n                        main: [\n                            {\n                                actionType: connectionActionTypes.copyType,\n                                isActive: true,\n                            },\n                            {\n                                actionType: connectionActionTypes.printType,\n                                isActive: true,\n                            },\n                            {\n                                actionType: connectionActionTypes.addLogoType,\n                                isActive: true,\n                            },\n                        ],\n                    },\n                },\n            },\n            {\n                connectionId: 'connection_2',\n                name: 'Keenetic-9672',\n                isActive: true,\n                range: '5 GHz',\n                channel: 149,\n                connectionInfo: {\n                    type: modalContentTypes.connectionContentType,\n                    url: 'https://url.com/1321',\n                    credentials: {\n                        networkId: 'N ET WO R K iD 321',\n                        password: 'network password 321',\n                    },\n                    actions: {\n                        WPS: {\n                            actionType: connectionActionTypes.wpsType,\n                            isActive: true,\n                        },\n                        main: [\n                            {\n                                actionType: connectionActionTypes.copyType,\n                                isActive: true,\n                            },\n                            {\n                                actionType: connectionActionTypes.printType,\n                                isActive: true,\n                            },\n                            {\n                                actionType: connectionActionTypes.addLogoType,\n                                isActive: true,\n                            },\n                        ],\n                    },\n                },\n            },\n        ],\n        onlineDevices: [\n            {\n                key: 'device_1',\n                type: connectionTypes.wired,\n                countOfConnections: 0,\n                isHome: true,\n            },\n            {\n                key: 'device_2',\n                type: connectionTypes.wifi,\n                countOfConnections: 6,\n                isHome: true,\n            },\n        ],\n    },\n};\n\nexport const guestWiFiCard: WiFiCard = {\n    cardId: 'guestWiFiCard_ 1',\n    type: cardTypes.wifiType,\n    title: guestWiFiCardTitle,\n    cardContent: {\n        connections: [\n            {\n                connectionId: 'connection_1',\n                name: 'Guest',\n                isActive: false,\n                range: '2.4 GHz',\n                channel: 9,\n                connectionInfo: {\n                    type: modalContentTypes.connectionContentType,\n                    url: 'https://url.com/1321123123',\n                    credentials: {\n                        networkId: 'N ET WO R K iD 1231231',\n                        password: 'network password 123123123',\n                    },\n                    actions: {\n                        WPS: {\n                            actionType: connectionActionTypes.wpsType,\n                            isActive: false,\n                        },\n                        main: [\n                            {\n                                actionType: connectionActionTypes.copyType,\n                                isActive: false,\n                            },\n                            {\n                                actionType: connectionActionTypes.printType,\n                                isActive: true,\n                            },\n                            {\n                                actionType: connectionActionTypes.addLogoType,\n                                isActive: true,\n                            },\n                        ],\n                    },\n                },\n            },\n            {\n                connectionId: 'connection_2',\n                name: 'Guest',\n                isActive: false,\n                range: '5 GHz',\n                channel: 149,\n                connectionInfo: {\n                    type: modalContentTypes.connectionContentType,\n                    url: 'https://url.com/1321123123',\n                    credentials: {\n                        networkId: 'N ET 6423',\n                        password: 'network password 00123',\n                    },\n                    actions: {\n                        WPS: {\n                            actionType: connectionActionTypes.wpsType,\n                            isActive: false,\n                        },\n                        main: [\n                            {\n                                actionType: connectionActionTypes.copyType,\n                                isActive: false,\n                            },\n                            {\n                                actionType: connectionActionTypes.printType,\n                                isActive: true,\n                            },\n                            {\n                                actionType: connectionActionTypes.addLogoType,\n                                isActive: true,\n                            },\n                        ],\n                    },\n                },\n            },\n        ],\n        onlineDevices: [\n            {\n                key: 'device_1',\n                type: connectionTypes.wired,\n                countOfConnections: 0,\n                isHome: false,\n            },\n            {\n                key: 'device_2',\n                type: connectionTypes.wifi,\n                countOfConnections: 0,\n                isHome: false,\n            },\n        ],\n    },\n};\n\nexport const cardsMocks: Cards = {\n    leftCards: [applicationsCatrd, systemCatrd],\n    rightCards: [homeWiFiCard, guestWiFiCard],\n};\n","import {\n    defaultCredentials,\n    invalidCredentionalsMessage,\n} from '../constants/login.constants';\nimport { invalidCardsMessage } from '../constants/cards.constants';\n\nimport { cardsMocks } from '../mock/cards.mock';\n\nimport { LoginValues } from '../models/login.model';\nimport { Cards } from '../models/dashboard.model';\nimport { ErrorHandler } from '../models/concurency.model';\n\nexport const login = ({ login, password }: LoginValues): Promise<string> => {\n    return new Promise((resolve, reject) =>\n        setTimeout(() => {\n            if (\n                login === defaultCredentials.login &&\n                password === defaultCredentials.password\n            ) {\n                resolve('userToken');\n            } else {\n                reject(invalidCredentionalsMessage);\n            }\n        }, 1000)\n    );\n};\n\nexport const fetchDashboard = (userToken: string): Promise<Cards> =>\n    new Promise((resolve, reject) =>\n        setTimeout(() => {\n            if (userToken) {\n                return resolve(cardsMocks);\n            }\n\n            reject(invalidCardsMessage);\n        }, 2000)\n    );\n\nexport const loadDashboard = (\n    loginValues: LoginValues,\n    errorHandler: ErrorHandler\n): Promise<Cards | undefined> =>\n    login(loginValues).then(fetchDashboard).catch(errorHandler);\n","import React, { Suspense, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { useHistory } from 'react-router-dom';\n\nimport { suspenceFetch } from '../../concurency/suspence-fetch';\nimport { SuspenseLoader } from '../common/loader';\nimport { loadDashboard } from '../../services/login-and-load-dashboard';\nimport { dashboardPath } from '../../constants/router.constants';\n\nimport { Cards } from '../../models/dashboard.model';\nimport {\n    DashboardLoaderProps,\n    ConcurencyLoginHandlerProps,\n} from '../../models/concurency.model';\n\nexport const DashboardLoader = ({ dashboardRequest }: DashboardLoaderProps) => {\n    const history = useHistory();\n\n    const cards = dashboardRequest.read();\n    history.push({ pathname: dashboardPath, state: cards });\n\n    return null;\n};\n\nexport const ConcurencyLoginHandler = ({\n    loginValues,\n    errorHandler,\n    getDashboardRequest = loadDashboard,\n}: ConcurencyLoginHandlerProps) => {\n    const [dashboardRequest] = useState(\n        suspenceFetch<Cards | undefined>(\n            getDashboardRequest(loginValues, errorHandler)\n        )\n    );\n\n    return (\n        <Suspense\n            fallback={ReactDOM.createPortal(\n                <SuspenseLoader />,\n                document.getElementById('root-portal-modal') as HTMLElement\n            )}\n        >\n            <DashboardLoader dashboardRequest={dashboardRequest} />\n        </Suspense>\n    );\n};\n","export const dashboardPath = '/dashboard';\n","import {\n    initialCredentials,\n    defaultCredentials,\n    minCountOfLoginSymbols,\n    minCountOfPasswordSymbols,\n    invalidCredentionalsMessage,\n    ActionHandlers,\n    loginActionTypes,\n} from '../constants/login.constants';\nimport { LoginReducer, LoginState, Action } from '../models/login.model';\n\nconst {\n    cleanup,\n    cleanuperror,\n    cleanuplogin,\n    login,\n    password,\n    setdefault,\n    validate,\n} = loginActionTypes;\n\nexport const actionHandlers: ActionHandlers = {\n    [login]: (login: string) => ({ login }),\n    [password]: (password: string) => ({ password }),\n    [cleanup]: () => ({\n        ...initialCredentials,\n        errorMessage: '',\n    }),\n    [setdefault]: () => ({\n        ...defaultCredentials,\n        errorMessage: '',\n    }),\n    [cleanuperror]: () => ({ errorMessage: '' }),\n    [cleanuplogin]: (errorMessage: string) => ({\n        shouldLogin: '',\n        errorMessage,\n    }),\n    [validate]: (v: null, { login, password }: LoginState) => {\n        if (\n            login.trim().length > minCountOfLoginSymbols &&\n            password.trim().length > minCountOfPasswordSymbols\n        ) {\n            return {\n                shouldLogin: true,\n                errorMessage: '',\n            };\n        }\n\n        return {\n            shouldLogin: false,\n            errorMessage: invalidCredentionalsMessage,\n        };\n    },\n};\n\nexport const loginReducer: LoginReducer = (\n    state: LoginState,\n    { type, value }: Action\n): LoginState => {\n    const actionHandler = actionHandlers[type];\n    if (actionHandler) {\n        return {\n            ...state,\n            ...actionHandler(value, state),\n        };\n    }\n\n    return state;\n};\n","import React, { useReducer } from 'react';\nimport './login.scss';\n\nimport { Input } from '../../components/common/input';\nimport { Button } from '../../components/common/button';\n\nimport { Message } from '../../components/common/message';\nimport {\n    initialState,\n    loginActionTypes,\n} from '../../constants/login.constants';\nimport { ConcurencyLoginHandler } from '../../components/concurency/concurency-login-handler';\nimport { LoginState, LoginReducer } from '../../models/login.model';\nimport { loginReducer } from '../../reducers/login.reducer';\n\nconst {\n    cleanup,\n    cleanuperror,\n    cleanuplogin,\n    setdefault,\n    validate,\n} = loginActionTypes;\n\nconst loginInputName = 'login';\nconst passwordInputName = 'password';\n\nexport const LoginPage = () => {\n    const [\n        { login, password, shouldLogin, errorMessage },\n        dispatch,\n    ] = useReducer<LoginReducer, LoginState>(\n        loginReducer,\n        initialState,\n        () => initialState\n    );\n\n    return (\n        <>\n            <section id=\"root-portal-modal\"></section>\n            {shouldLogin ? (\n                <ConcurencyLoginHandler\n                    loginValues={{ login, password }}\n                    errorHandler={(errorMessage: string): undefined => {\n                        dispatch({ type: cleanuplogin, value: errorMessage });\n                        return;\n                    }}\n                />\n            ) : null}\n            <section className=\"login\">\n                <h2 className=\"_aligned\">Login page</h2>\n                <Button\n                    className=\"hint-button hint-button__left\"\n                    buttonName=\"cleanup\"\n                    buttonHandler={() => dispatch({ type: cleanup })}\n                />\n                <Button\n                    className=\"hint-button  hint-button__right\"\n                    buttonName=\"set default\"\n                    buttonHandler={() => dispatch({ type: setdefault })}\n                />\n                <section className=\"login-form\">\n                    <Input\n                        name={loginInputName}\n                        value={login}\n                        onChange={(value: string) =>\n                            dispatch({ type: loginActionTypes.login, value })\n                        }\n                    />\n                    <Input\n                        name={passwordInputName}\n                        value={password}\n                        onChange={(value: string) =>\n                            dispatch({ type: loginActionTypes.password, value })\n                        }\n                        type=\"password\"\n                    />\n                    <Button\n                        buttonName=\"Login\"\n                        buttonHandler={() => dispatch({ type: validate })}\n                    />\n                    <Message\n                        type=\"error\"\n                        message={errorMessage}\n                        onClose={() => dispatch({ type: cleanuperror })}\n                    />\n                </section>\n            </section>\n        </>\n    );\n};\n","import React from 'react';\nimport { Input, searchPlaceholder } from './input';\n\nexport const SearchBar = () => (\n    <Input\n        value=\"\"\n        name=\"search\"\n        type=\"search\"\n        placeholder={searchPlaceholder}\n        onChange={(value: string) => console.log(value)}\n    />\n);\n","import React from 'react';\nimport './header.scss';\n\nimport { SearchBar } from '../../common/search-bar';\n\nexport const Header = () => (\n    <header>\n        <h1>Keenetic Router</h1>\n        <SearchBar />\n    </header>\n);\n","import React from 'react';\nimport './navigation-bar.scss';\n\nexport type NavigationBarProps = {\n    isCollapsed: boolean;\n};\n\nexport const NavigationBar = ({ isCollapsed }: NavigationBarProps) => {\n    return (\n        <section className=\"navbar-container\">\n            <section\n                className={`navbar navbar__${\n                    isCollapsed ? 'collapsed' : 'expanded'\n                }`}\n            ></section>\n        </section>\n    );\n};\n","import React from 'react';\nimport { CardProps } from '../../../models/dashboard.model';\nimport { Message } from '../../common/message';\n\nexport const UnknownCard = ({ card: { type } }: CardProps) => (\n    <section className=\"unknown-card\">\n        <Message\n            message={`card with type: ${type} is not found`}\n            type=\"error\"\n            onClose={() => {}}\n            shouldHideCloseButton\n        />\n    </section>\n);\n","import React from 'react';\nimport {\n    CardProps,\n    SystemCard,\n    SystemParamProps,\n} from '../../../models/dashboard.model';\n\nexport const SystemParamComponent = ({\n    systemParam: { label, value },\n}: SystemParamProps) => (\n    <section className=\"param-pair\">\n        <p className=\"param-pair__label\">{label}</p>\n        <p className=\"param-pair__value\">{value}</p>\n    </section>\n);\n\nexport const SystemCardComponent = (props: CardProps) => {\n    const {\n        title,\n        cardContent: { systemParams },\n    } = props.card as SystemCard;\n    return (\n        <section className=\"application-card\">\n            <h3 className=\"card__title\">{title}</h3>\n            <section className=\"card-content\">\n                {systemParams.map((systemParam) => (\n                    <SystemParamComponent\n                        key={systemParam.label}\n                        systemParam={systemParam}\n                    />\n                ))}\n            </section>\n        </section>\n    );\n};\n","import React from 'react';\nimport './checkbox.scss';\n\nexport type CheckboxProps = {\n    isDisable: boolean;\n    isActive: boolean;\n    triggerCheckbox: (isActive: boolean) => void;\n};\n\nconst setCheckboxClassName = (isActive: boolean) =>\n    isActive ? 'checkbox__active' : 'checkbox__inactive';\nconst setCheckboxBarClassName = (isActive: boolean) =>\n    isActive ? 'checkbox--bar__active' : 'checkbox--bar__inactive';\n\nconst setCheckboxClassNameDisabled = (isDisable: boolean) =>\n    isDisable ? 'checkbox__disabled' : 'checkbox__enabled';\nexport const Checkbox = React.memo(\n    ({ isActive, triggerCheckbox, isDisable }: CheckboxProps) => (\n        <section\n            className={`checkbox ${setCheckboxClassName(\n                isActive\n            )} ${setCheckboxClassNameDisabled(isDisable)}`}\n        >\n            <span\n                onClick={() => !isDisable && triggerCheckbox(!isActive)}\n                className={`checkbox--bar ${setCheckboxBarClassName(isActive)}`}\n            ></span>\n        </section>\n    )\n);\n","import React, { useState } from 'react';\nimport { ModalInfoContext, ModalInfo } from '../models/modals.model';\n\nexport const ModalContext = React.createContext<ModalInfoContext>(\n    (null as unknown) as ModalInfoContext\n);\n\nexport const WithModalContext = ({ children }: { children: any }) => {\n    const [modalInfo, setModal] = useState(null as ModalInfo);\n\n    return (\n        <ModalContext.Provider value={{ modalInfo, setModal }}>\n            {children}\n        </ModalContext.Provider>\n    );\n};\n","import React, { useState, useCallback, useContext } from 'react';\nimport { Button } from '../../common/button';\nimport { Checkbox } from '../../common/checkbox';\nimport { ConnectionProps } from '../../../models/dashboard.model';\nimport {\n    channgelLabel,\n    showConnectionInfoButtonLabel,\n} from '../../../constants/cards.constants';\nimport { LoaderContext } from '../../../context/loader.context';\nimport { ModalContext } from '../../../context/modal.context';\n\nexport const ConnectionComponent = ({\n    connection: {\n        channel,\n        connectionInfo,\n        isActive,\n        name,\n        range,\n        connectionId,\n    },\n}: ConnectionProps) => {\n    const [connectionStatus, setConnectionStatus] = useState(isActive);\n    const [isWaiting, setStatus] = useState(false);\n    const { setLoader } = useContext(LoaderContext);\n\n    const { setModal } = useContext(ModalContext);\n\n    const triggerCheckbox = useCallback(\n        async (isActive: boolean) => {\n            setConnectionStatus(isActive);\n\n            setStatus(true);\n            setLoader(true);\n            try {\n                await new Promise((res) =>\n                    setTimeout(() => res(connectionId), 2000)\n                );\n                setConnectionStatus(isActive);\n            } catch {\n                setConnectionStatus(!isActive);\n            } finally {\n                setStatus(false);\n                setLoader(false);\n            }\n        },\n        [connectionId, setLoader, setStatus]\n    );\n\n    return (\n        <section className=\"connection\">\n            <section className=\"connection-main\">\n                <section className=\"connection-main__status\">\n                    <Checkbox\n                        isDisable={isWaiting}\n                        isActive={connectionStatus}\n                        triggerCheckbox={triggerCheckbox}\n                    />\n                </section>\n                <section className=\"details\">\n                    <p className=\"details__name\">{name}</p>\n                    <section className=\"details--minor\">\n                        <p className=\"details--minor__range\">{range}, </p>\n                        <p className=\"details--minor__channel\">\n                            {channgelLabel} {channel}\n                        </p>\n                    </section>\n                </section>\n            </section>\n            <section className=\"connection-info\">\n                <Button\n                    className=\"show-more-button\"\n                    buttonName={showConnectionInfoButtonLabel}\n                    buttonHandler={() =>\n                        setModal({ ...connectionInfo, name, range })\n                    }\n                />\n            </section>\n        </section>\n    );\n};\n","import React from 'react';\nimport { OnlineDeviceProps } from '../../../models/dashboard.model';\nimport { connectionTypeMessages } from '../../../constants/cards.constants';\n\nconst getConnectionModificator = (isHome: boolean) =>\n    isHome ? 'connections-count__home' : 'connections-count__guest';\n\nexport const OnlineDeviceComponent = ({\n    onlineDevice: { countOfConnections, type, isHome },\n}: OnlineDeviceProps) => (\n    <section className=\"online-device\">\n        <p className={`connections-count ${getConnectionModificator(isHome)}`}>\n            {countOfConnections}\n            {countOfConnections ? (\n                <span className=\"connections-count__hint\">\n                    {countOfConnections}\n                </span>\n            ) : null}\n        </p>\n        <p className=\"device-type\">{connectionTypeMessages[type]}</p>\n    </section>\n);\n","import React from 'react';\nimport './cards.scss';\n\nimport * as models from '../../../models/dashboard.model';\nimport { cardTypes } from '../../../constants/cards.constants';\nimport { UnknownCard } from './unknown-card';\nimport { ApplicationsCardComponent } from './applications-card';\nimport { SystemCardComponent } from './system-card';\nimport { WifiCardComponent } from './wifi-card';\n\nconst cardsComponents: models.CardsComponents = {\n    [cardTypes.applicationType]: ApplicationsCardComponent,\n    [cardTypes.systemType]: SystemCardComponent,\n    [cardTypes.wifiType]: WifiCardComponent,\n};\n\nexport const Card = React.memo(({ card }: models.CardProps) => {\n    const CardComponent = cardsComponents[card.type];\n    return (\n        <section className=\"card\">\n            {CardComponent ? (\n                <CardComponent card={card} />\n            ) : (\n                <UnknownCard card={card} />\n            )}\n        </section>\n    );\n});\n\nexport const Cards = ({ leftCards, rightCards }: models.CardsProps) => (\n    <section className=\"cards\">\n        <section className=\"cards-left\">\n            {leftCards.map((card: models.Card) => (\n                <Card key={card.cardId} card={card} />\n            ))}\n        </section>\n\n        <section className=\"cards-right\">\n            {rightCards.map((card: models.Card) => (\n                <Card key={card.cardId} card={card} />\n            ))}\n        </section>\n    </section>\n);\n","import React from 'react';\nimport { CardProps, ApplicationsCard } from '../../../models/dashboard.model';\n\nexport const hasNoApplicationsMessage = 'Applications not installed';\n\nexport const ApplicationsCardComponent = (props: CardProps) => {\n    const {\n        title,\n        cardContent: { applications },\n    } = props.card as ApplicationsCard;\n\n    return (\n        <section className=\"application-card\">\n            <h3 className=\"card__title\">{title}</h3>\n            <section className=\"card-content\">\n                {applications.length\n                    ? 'Applications'\n                    : hasNoApplicationsMessage}\n            </section>\n        </section>\n    );\n};\n","import React from 'react';\nimport {\n    CardProps,\n    WiFiCard,\n    Connection,\n    OnlineDevice,\n} from '../../../models/dashboard.model';\nimport { onlineDeviceTitle } from '../../../constants/cards.constants';\nimport { ConnectionComponent } from '../connection/connection';\nimport { OnlineDeviceComponent } from '../online-device/online-device';\n\nexport const WifiCardComponent = (props: CardProps) => {\n    const {\n        title,\n        cardContent: { connections, onlineDevices },\n    } = props.card as WiFiCard;\n    return (\n        <section className=\"application-card\">\n            <h3 className=\"card__title\">{title}</h3>\n            <section className=\"card-content\">\n                <section className=\"connections\">\n                    {connections.map((connection: Connection) => (\n                        <ConnectionComponent\n                            key={connection.connectionId}\n                            connection={connection}\n                        />\n                    ))}\n                </section>\n                {onlineDevices.length ? (\n                    <section className=\"devices\">\n                        <h3 className=\"devices--title\">{onlineDeviceTitle}</h3>\n                        <section className=\"devices-content\">\n                            {onlineDevices.map((onlineDevice: OnlineDevice) => (\n                                <OnlineDeviceComponent\n                                    key={onlineDevice.key}\n                                    onlineDevice={onlineDevice}\n                                />\n                            ))}\n                        </section>\n                    </section>\n                ) : null}\n            </section>\n        </section>\n    );\n};\n","import { useEffect, useState } from 'react';\nimport { defaultCards } from '../constants/cards.constants';\nimport { Cards, CardsResponse } from '../models/dashboard.model';\nimport { cardsMocks } from '../mock/cards.mock';\n\nexport type SetCards = (cards: Cards) => void;\n\nexport class CardLoaderService {\n    public useLoadCards(preloadedCards: Cards): CardsResponse {\n        const [isLoading, setLoader] = useState(false);\n        const [{ leftCards, rightCards }, setCards] = useState(defaultCards);\n\n        useEffect(() => {\n            if (preloadedCards) {\n                return setCards(preloadedCards);\n            }\n\n            setLoader(true);\n            this.fetchCards(setCards).finally(() => setLoader(false));\n        }, [preloadedCards]);\n\n        return { isLoading, leftCards, rightCards };\n    }\n\n    private async fetchCards(setCards: SetCards): Promise<void> {\n        return new Promise((res) => {\n            setTimeout(() => {\n                setCards(cardsMocks);\n                res();\n            }, 1000);\n        });\n    }\n}\n\nexport const cardLoaderInstance = new CardLoaderService();\n","import QRCode from 'qrcode';\n\nexport const generateQR = async (url: string): Promise<string> =>\n    await QRCode.toDataURL(url);\n","import React, { useEffect, useState } from 'react';\n\nimport { ConnectionInfoProps } from '../../models/modals.model';\nimport { generateQR } from '../../services/qr-code-generator.service';\n\nconst networkNameLablel = 'Network name (SSID)';\nconst passwordLablel = 'Password';\nconst description = `Scan this QR code with your phone's camera to connect to the Wi-Fi network.`;\n\nconst getTitle = (name: string, range: string) =>\n    `Connection information for the '${name}' ${range} Wi-Fi network`;\n\nexport const ConnectionModalContent = React.memo(\n    ({\n        actions,\n        credentials: { networkId, password },\n        url,\n        name,\n        range,\n    }: ConnectionInfoProps) => {\n        const [qrCodeBase64, setQRCode] = useState('');\n        useEffect(() => {\n            generateQR(url).then(setQRCode).catch(setQRCode);\n        }, [url, setQRCode]);\n\n        return (\n            <section className=\"modal-connection\">\n                <h3 className=\"modal-connection_title\">\n                    {getTitle(name, range)}\n                </h3>\n                <p className=\"modal-connection_description\">{description}</p>\n                <img\n                    className=\"modal-connection_qr-code\"\n                    src={qrCodeBase64}\n                    alt=\"loading qr code\"\n                />\n                <section className=\"modal-connection-credentials\">\n                    <section className=\"modal-connection-credentials-pair\">\n                        <span className=\"modal-connection-credentials-pair_label\">\n                            {networkNameLablel}:\n                        </span>\n                        <b className=\"modal-connection-credentials-pair_value\">\n                            {` ${networkId}`}\n                        </b>\n                    </section>\n                    <section className=\"modal-connection-credentials_pair\">\n                        <span className=\"modal-connection-credentials-pair_label\">\n                            {passwordLablel}:\n                        </span>\n                        <b className=\"modal-connection-credentials-pair_value\">\n                            {` ${password}`}\n                        </b>\n                    </section>\n                </section>\n            </section>\n        );\n    }\n);\n","import React, { useContext } from 'react';\nimport './modal.scss';\n\nimport { ModalContext } from '../../context/modal.context';\nimport { Button } from './button';\nimport { ModalContentComponents } from '../../models/modals.model';\nimport { modalContentTypes } from '../../constants/modal.constants';\nimport { ConnectionModalContent } from '../modal-content/connection.content';\n\nexport type ModalComponent = {\n    setModal: (value: null) => void;\n    children: any;\n};\nconst modalContentComponents: ModalContentComponents = {\n    [modalContentTypes.connectionContentType]: ConnectionModalContent,\n};\n\nexport const ModalComponent = React.memo(\n    ({ children, setModal }: ModalComponent) => (\n        <section\n            className=\"modal-background\"\n            onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) =>\n                (e.target as HTMLElement).className === 'modal-background' &&\n                setModal(null)\n            }\n        >\n            <section className=\"modal-content\">\n                <Button\n                    className=\"close-modal-button\"\n                    buttonName=\"x\"\n                    buttonHandler={() => setModal(null)}\n                />\n                {children}\n            </section>\n        </section>\n    )\n);\n\nexport const Modal = React.memo(() => {\n    const { modalInfo, setModal } = useContext(ModalContext);\n    const ModalContent: any = modalInfo\n        ? modalContentComponents[modalInfo.type]\n        : null;\n\n    return ModalContent ? (\n        <ModalComponent setModal={setModal}>\n            <ModalContent {...modalInfo} />\n        </ModalComponent>\n    ) : null;\n});\n","import React from 'react';\nimport './dashboard.scss';\n\nimport { Header } from '../../components/dashboard/header/header';\nimport { ContextLoader } from '../../components/common/loader';\nimport { NavigationBar } from '../../components/dashboard/nvagation-bar/navigation-bar';\nimport { Cards as CardsComponent } from '../../components/dashboard/cards/cards';\nimport { cardLoaderInstance } from '../../services/card-loader.service';\nimport { Modal } from '../../components/common/modal';\nimport { useHistory } from 'react-router-dom';\nimport { DashboardProps, Cards } from '../../models/dashboard.model';\n\nexport const DashboardPage = ({\n    cardLoader = cardLoaderInstance,\n}: DashboardProps) => {\n    const history = useHistory<Cards>();\n    const { leftCards, rightCards } = cardLoader.useLoadCards(\n        history.location.state\n    );\n\n    return (\n        <>\n            <Modal />\n            <ContextLoader />\n            <Header />\n            <section className=\"content\">\n                <NavigationBar isCollapsed={true} />\n                <CardsComponent leftCards={leftCards} rightCards={rightCards} />\n            </section>\n        </>\n    );\n};\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport { LoginPage } from './login/login';\nimport { DashboardPage } from './dashboard/dashboard';\nimport { dashboardPath } from '../constants/router.constants';\nimport { WithLoaderContext } from '../context/loader.context';\nimport { WithModalContext } from '../context/modal.context';\n\nexport const AppRouter = () => (\n    <Router>\n        <Switch>\n            <Route path={dashboardPath}>\n                <WithLoaderContext>\n                    <WithModalContext>\n                        <DashboardPage />\n                    </WithModalContext>\n                </WithLoaderContext>\n            </Route>\n            <Route path=\"/\">\n                <WithLoaderContext>\n                    <LoginPage />\n                </WithLoaderContext>\n            </Route>\n        </Switch>\n    </Router>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { AppRouter } from './pages/router';\n\nimport './index.scss';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.unstable_createRoot(document.getElementById('root') as Element).render(\n    <React.StrictMode>\n        <AppRouter />\n    </React.StrictMode>\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}