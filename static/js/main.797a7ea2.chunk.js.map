{"version":3,"sources":["models/nav.model.ts","models/cards.model.ts","constants/modal.constants.ts","models/i18n.model.ts","constants/cards.constants.ts","services/i18n.service.ts","components/common/button.tsx","constants/router.constants.ts","mock/nav.mock.ts","recoil-state/navigation.state.ts","models/dashboard.model.ts","constants/nav.constants.ts","constants/i18n/i18n.cards.constants.ts","constants/i18n/i18n.modal.constants.ts","constants/i18n/i18n.actions.constants.ts","constants/i18n/i18n.dynamic.constants.ts","constants/i18n/i18n.login.constants.ts","constants/i18n/i18n.navigation.constants.ts","constants/i18n/i18n.common.constants.ts","constants/i18n/i18n.devicesList.constants.ts","constants/i18n/i18n.constants.ts","recoil-state/i18n.state.ts","context/loader.context.tsx","utils/simple-recoil.util.ts","components/common/input.tsx","context/modal.context.tsx","components/common/message.tsx","mock/cards.mock.ts","models/common.model.ts","constants/login.constants.ts","components/dashboard/nvagation-bar/common-actions/translate.tsx","models/login.model.ts","components/login/login-form.tsx","constants/hooks.constants.ts","reducers/login.reducer.ts","concurrency/suspence-fetch.ts","components/common/loader.tsx","services/login-and-load-dashboard.ts","components/concurrency/concurrency-login-handler.tsx","pages/login/login.tsx","services/i18n.login.service.ts","components/common/search-bar.tsx","components/dashboard/header/header.tsx","hooks/toggle-nav-bar.recoil.hook.ts","services/navigation.service.ts","components/dashboard/nvagation-bar/navigation-section.renderer.tsx","components/dashboard/nvagation-bar/navigation-section.tsx","components/dashboard/nvagation-bar/navigation-sections.tsx","hooks/vertical-scroll.hook.ts","hooks/expand-nav-bar.hook.ts","components/dashboard/nvagation-bar/common-actions/logout.tsx","components/dashboard/nvagation-bar/common-actions/navigation-common-actions.tsx","components/dashboard/nvagation-bar/navigation-footer.tsx","hooks/expand-collpase.hook.ts","models/actions.model.ts","components/dashboard/nvagation-bar/navigation-bar.tsx","components/common/logo.tsx","components/common/timer.tsx","actions/copy-paste.action.ts","actions/add-logo.action.ts","actions/print.action.ts","actions/wps.action.ts","actions/actions.ts","constants/actions.constants.ts","models/modals.model.ts","components/modal-content/wps.action.tsx","components/modal-content/actions.tsx","components/modal-content/credentials.tsx","services/qr-code-generator.service.ts","components/modal-content/connection.content.tsx","components/common/modal.tsx","pages/content-wrapper/content-wrapper.tsx","pages/render-components.tsx","pages/router.tsx","serviceWorker.ts","index.tsx"],"names":["navActionTypes","navSectionTypes","cardsLabels","modalContentTypes","connectionActionTypes","languages","cardTypes","connectionTypes","invalidCardsMessage","defaultCards","leftCards","rightCards","trafficType","updateActiveParamsInterval","internetRequestDelay","internetDetailsType","trafficTimeFormat","mModifier","bModifier","countOfDisplayedNodes","getTranslatedLabel","label","language","i18nLabels","useGetTranslatedLabel","useRecoilValue","i18nState","useMemo","useGetTranslatedLabels","labels","labelsRef","useRef","current","map","useGetDynamicTranslatedLabel","values","index","replace","String","useGetTranslatedLabelsObject","reduce","res","Button","React","memo","className","buttonName","buttonHandler","disabled","onClick","getSuccessStatus","isSuccess","ButtonWithPostHandler","props","isActive","useState","setPostHandlerResult","useEffect","timerId","setTimeout","clearTimeout","Promise","resolve","then","rootPath","dashboardPath","rootControlPanelPath","componentsToRender","default","lazy","navActionLinks","deviceList","navigationMockData","footer","triggerNavAction","type","triggerNav","logoutAction","logout","linkActions","help","translate","sections","status","dashboard","traffic","isExpanded","internet","wired","wirelessISP","otherConnections","connectionPriorities","network","homeSegment","guestSegment","wifiSegment","rules","internetSafety","firewall","forwarding","routing","domainName","wirelessACL","management","systemSettings","applications","usersAndAccess","diagnostics","expandSectionState","sAtom","none","navSectionsState","toggleNavBarState","paramTypes","sectionsUrls","urls","english","russian","i18nCardsLabels","download","upload","hiddenDetailsLabel","moreDetailsLabel","channelLabel","showConnectionInfoButtonLabel","providerHeaderLabel","applicationsCardTitleLabel","systemCardTitleLabel","homeWiFiCardTitleLabel","guestWiFiCardTitleLabel","networkPortsCardTitleLabel","internetCardTitleLabel","hasNoApplicationsMessageLabel","onlineDeviceTitleLabel","wifiConnectionTypeMessageLabel","wiredConnectionTypeMessageLabel","connectedLabel","daysLabel","modelLabel","serviceTagLabel","osVersionLabel","autoUpdateLabel","upTimeLabel","currentTimeLabel","cpuUsageLabel","ramUsageLabel","enabledLabel","kbitsLabel","mbitsLabel","mbitLabel","usingEthernetLabel","statusLabel","internetSafetyLabel","authenticationTypeLabel","ipAddressLabel","subnetMaskLabel","macAddressLabel","downloadLabel","uploadLabel","receivedLabel","sentLabel","dnsServersLabel","connectionEstablishedLabel","rebootLabel","configureLabel","adGuardIsEnabledLabel","i18nModalLabels","networkNameLabel","passwordLabel","connectionDescriptionLabel","i18nActionsLabels","addLogoType","copyType","printType","wpsType","activatedWpsType","i18nDynamicModalLabels","connectionTitleLabel","i18nDynamicDevicesListLabels","speedValueRangeErrorLabel","i18nLoginLabels","loginTitleLabel","resetLabel","setDefaultLabel","loginButtonLabel","invalidCredentialsMessageLabel","i18nNavLabels","all","i18nCommonLabels","searchPlaceholderLabel","saveButtonLabel","cancelButtonLabel","i18nDevicesListLabels","titleLabel","descriptionLabel","unregisteredDevicesTitleLabel","unregisteredDevicesDescriptionLabel","registeredDevicesTitleLabel","blockedDevicesTitleLabel","blockedDevicesDescriptionLabel","addDeviceButtonLabel","displayDeviceSettingsLabel","hideDeviceSettingsLabel","settingsDescriptionLabel","withoutFilteringLabel","withoutADCLabel","familyLabel","speedLimitLabel","asymmetricLabel","localStorageI18nKey","lang","localStorage","getItem","LoaderContext","createContext","WithLoaderContext","children","isLoading","setLoader","Provider","value","hashFn","state","atom","key","sSelector","get","selector","Input","onChange","name","placeholder","i18nPlaceHolderLabel","e","target","ModalContext","WithModalContext","modalInfo","setModal","Message","message","onClose","shouldHideCloseButton","applicationsCatrd","cardId","applicationType","title","cardContent","systemCatrd","systemType","startedTime","systemParams","paramType","inactive","uptime","currentTime","cpuUsage","ramUsage","homeWiFiCard","wifiType","connections","connectionId","range","channel","connectionInfo","connectionContentType","url","credentials","networkId","password","actions","WPS","actionType","main","onlineDevices","countOfConnections","isHome","wifi","guestWiFiCard","networkPortsCard","portType","networkPortId","ports","portId","portSpeed","portUnit","cardsMocks","internetType","provider","providerLabel","providerType","trafficInfo","unit","max","details","reboot","configuration","received","sent","commonLabels","loginActionTypes","Translate","classModifier","useRecoilState","setLanguage","changeLanguage","useCallback","setItem","initialCredentials","login","defaultCredentials","initialState","shouldLogin","errorMessage","loginLabels","cleanup","cleanuperror","setdefault","validate","LoginForm","dispatch","toggleStatuses","cleanuplogin","actionHandlers","v","trim","length","loginReducer","actionHandler","wrapPromise","promise","result","suspender","r","read","ContextLoader","useContext","SuspenseLoader","fetchDashboard","userToken","reject","loadDashboard","loginValues","errorHandler","catch","DashboardLoader","dashboardRequest","history","useHistory","cards","push","pathname","ConcurrencyLoginHandler","getDashboardRequest","fallback","ReactDOM","createPortal","document","getElementById","LoginPage","useReducer","useGetLoginPageLabels","id","SearchBar","console","log","Header","useToggleNavBar","isNavBarExpanded","toggleNavBarHandler","toggleNavBar","getActiveSection","activeSectionEntries","find","includes","getSectionClassNames","getSectionTitleClassNames","shouldExpandSection","getActionsClassNames","LinkActionRenderer","i18nActionLabel","to","SectionRenderer","onExpandNavBar","onExpandSection","i18nSectionLabel","linkAction","renderLinkActions","Section","expandedType","expandSection","location","useLocation","NavigationSections","refElement","sectionsRef","element","height","getBoundingClientRect","style","ps","PerfectScrollbar","wheelSpeed","destroy","onExpandNavBarHandler","useSetRecoilState","useDefaultExpandNavBarHandler","ref","navSection","Logout","redirectHandler","CommonNavActions","shouldDisplayCommonActions","NavigationFooter","expandAllActions","actionsLabels","useExpandCollapseHook","empty","expandCollapseClassName","setClassName","navClassName","expanded","collapsed","NavigationBar","expandCollapseNavBarClassName","Logo","src","alt","getDurationModifier","duration","Timer","restTime","setRestTime","setInterval","clearInterval","formattedRestTime","resTime","min","Math","floor","sec","getFormattedRestTime","copyPasteActionHandler","a","navigator","clipboard","writeText","getCreatedFileInput","fileInput","createElement","display","accept","setImageFile","imageFile","setLogo","fr","FileReader","onload","readAsDataURL","fileInputUploadHandler","parent","files","item","removeChild","addLogoActionHandler","append","addEventListener","click","printActionHandler","window","print","wpsActionHanlder","modalActionHandlers","modalLabels","dynamicModalLabels","actionNames","WPSAction","isWPSActivated","activateWPS","actionLabel","getActionStatus","Actions","action","connectionInfoPropsWithSetters","GetActionButton","Credentials","generateQR","QRCode","toDataURL","ConnectionModalContent","connectionInfoProps","description","qrCodeBase64","setQRCode","logoSrc","modalContentComponents","ModalComponent","Modal","ModalContent","ContentWrapper","render","ContentComponent","process","NODE_ENV","PUBLIC_URL","basename","AppRouter","exact","path","Boolean","hostname","match","unstable_createRoot","StrictMode","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.797a7ea2.chunk.js","sourcesContent":["export enum navActionTypes {\n    logout = 'logout',\n    help = 'help',\n    translate = 'translate',\n    triggerNav = 'triggerNav',\n\n    dashboard = 'dashboard',\n    traffic = 'traffic',\n\n    wired = 'wired',\n    wirelessISP = 'wirelessISP',\n    otherConnections = 'otherConnections',\n    connectionPriorities = 'connectionPriorities',\n\n    deviceList = 'deviceList',\n    homeSegment = 'homeSegment',\n    guestSegment = 'guestSegment',\n    wifiSegment = 'wifiSegment',\n\n    internetSafety = 'internetSafety',\n    firewall = 'firewall',\n    forwarding = 'forwarding',\n    routing = 'routing',\n    domainName = 'domainName',\n    wirelessACL = 'wirelessACL',\n\n    systemSettings = 'systemSettings',\n    applications = 'applications',\n    usersAndAccess = 'usersAndAccess',\n    diagnostics = 'diagnostics',\n}\n\nexport enum navSectionTypes {\n    status = 'status',\n    internet = 'internet',\n    network = 'network',\n    rules = 'rules',\n    management = 'management',\n    none = 'none',\n    all = 'all',\n}\n\nexport type navLabels = navSectionTypes | navActionTypes;\n\nexport type NavSection = {\n    type: navSectionTypes;\n    linkActions: LinkActions;\n    isExpanded: boolean;\n};\nexport type NavSections = Array<NavSection>;\n\nexport type LinkAction = {\n    type: navActionTypes;\n};\nexport type LinkActions = Array<LinkAction>;\n\nexport type NavigationData = {\n    sections: NavSections;\n    footer: {\n        logoutAction: LinkAction;\n        linkActions: LinkActions;\n        triggerNavAction: LinkAction;\n    };\n};\n\nexport type NavSectionTitles = {\n    [title in navSectionTypes]: string;\n};\n\nexport type NavActionLabels = {\n    [label in navActionTypes]: string;\n};\n\nexport type NavActionLinks = {\n    [link in navActionTypes]: string;\n};\n\nexport type SectionUrls = {\n    type: navSectionTypes;\n    urls: Array<string>;\n};\n\nexport type SectionsUrls = Array<SectionUrls>;\n\nexport type NavigationBarProps = {\n    isNavBarExpanded: boolean;\n    toggleNavBar: () => void;\n};\n","export enum cardsLabels {\n    channelLabel = 'channelLabel',\n    showConnectionInfoButtonLabel = 'showConnectionInfoButtonLabel',\n    download = 'download',\n    upload = 'upload',\n    providerHeaderLabel = 'providerHeaderLabel',\n    moreDetailsLabel = 'moreDetailsLabel',\n    hiddenDetailsLabel = 'hiddenDetailsLabel',\n    applicationsCardTitleLabel = 'applicationsCardTitleLabel',\n    systemCardTitleLabel = 'systemCardTitleLabel',\n    homeWiFiCardTitleLabel = 'homeWiFiCardTitleLabel',\n    guestWiFiCardTitleLabel = 'guestWiFiCardTitleLabel',\n    networkPortsCardTitleLabel = 'networkPortsCardTitleLabel',\n    internetCardTitleLabel = 'internetCardTitleLabel',\n    hasNoApplicationsMessageLabel = 'hasNoApplicationsMessageLabel',\n    onlineDeviceTitleLabel = 'onlineDeviceTitleLabel',\n    wifiConnectionTypeMessageLabel = 'wifiConnectionTypeMessageLabel',\n    wiredConnectionTypeMessageLabel = 'wiredConnectionTypeMessageLabel',\n    connectedLabel = 'connectedLabel',\n    daysLabel = 'daysLabel',\n\n    modelLabel = 'modelLabel',\n    serviceTagLabel = 'serviceTagLabel',\n    osVersionLabel = 'osVersionLabel',\n    autoUpdateLabel = 'autoUpdateLabel',\n    upTimeLabel = 'upTimeLabel',\n    currentTimeLabel = 'currentTimeLabel',\n    cpuUsageLabel = 'cpuUsageLabel',\n    ramUsageLabel = 'ramUsageLabel',\n\n    enabledLabel = 'enabledLabel',\n    kbitsLabel = 'kbitsLabel',\n    mbitsLabel = 'mbitsLabel',\n    mbitLabel = 'mbitLabel',\n\n    usingEthernetLabel = 'usingEthernetLabel',\n\n    statusLabel = 'statusLabel',\n    internetSafetyLabel = 'internetSafetyLabel',\n    authenticationTypeLabel = 'authenticationTypeLabel',\n    ipAddressLabel = 'ipAddressLabel',\n    subnetMaskLabel = 'subnetMaskLabel',\n    macAddressLabel = 'macAddressLabel',\n    downloadLabel = 'downloadLabel',\n    uploadLabel = 'uploadLabel',\n    receivedLabel = 'receivedLabel',\n    sentLabel = 'sentLabel',\n    dnsServersLabel = 'dnsServersLabel',\n\n    connectionEstablishedLabel = 'connectionEstablishedLabel',\n    rebootLabel = 'rebootLabel',\n    configureLabel = 'configureLabel',\n    adGuardIsEnabledLabel = 'adGuardIsEnabledLabel',\n}\n","export enum modalContentTypes {\n    connectionContentType = 'connectionContentType',\n}\n\nexport enum connectionActionTypes {\n    copyType = 'copyType',\n    printType = 'printType',\n    addLogoType = 'addLogoType',\n    wpsType = 'wpsType',\n}\n","import { dynamicModalLabels, modalLabels } from './modals.model';\nimport { actionsLabels } from './actions.model';\nimport { cardsLabels } from './cards.model';\nimport { loginLabels } from './login.model';\nimport { navLabels } from './nav.model';\nimport { commonLabels } from './common.model';\nimport { devicesDynamicListLabels, devicesListLabels } from './devices-list.model';\n\nexport enum languages {\n    english = 'english',\n    russian = 'russian',\n}\n\nexport type I18nCardsLabels = {\n    [label in cardsLabels]: {\n        [key in languages]: string;\n    };\n};\n\nexport type I18nModalLabels = {\n    [label in modalLabels]: {\n        [key in languages]: string;\n    };\n};\n\nexport type I18nDynamicModalLabels = {\n    [label in dynamicModalLabels]: {\n        [key in languages]: string;\n    };\n};\n\nexport type I18nActionsLabels = {\n    [label in actionsLabels]: {\n        [key in languages]: string;\n    };\n};\n\nexport type I18nLoginLabels = {\n    [label in loginLabels]: {\n        [key in languages]: string;\n    };\n};\n\nexport type I18nNavLabels = {\n    [label in navLabels]: {\n        [key in languages]: string;\n    };\n};\n\nexport type I18nCommonLabels = {\n    [label in commonLabels]: {\n        [key in languages]: string;\n    };\n};\n\nexport type I18nDevicesListLabels = {\n    [label in devicesListLabels]: {\n        [key in languages]: string;\n    };\n};\n\nexport type I18nDynamicDevicesListLabels = {\n    [label in devicesDynamicListLabels]: {\n        [key in languages]: string;\n    };\n};\n\nexport type Labels =\n    | cardsLabels\n    | modalLabels\n    | dynamicModalLabels\n    | actionsLabels\n    | loginLabels\n    | navLabels\n    | commonLabels\n    | devicesListLabels\n    | devicesDynamicListLabels;\n\nexport type I18nLabels = {\n    [label in Labels]: {\n        [key in languages]: string;\n    };\n};\n","import { Cards } from '../models/dashboard.model';\n\nexport const invalidCardsMessage = 'The cards loading was failed';\n\nexport const defaultCards: Cards = {\n    leftCards: [],\n    rightCards: [],\n};\n\nexport enum cardTypes {\n    applicationType = 'applicationType',\n    systemType = 'systemType',\n    wifiType = 'wifiType',\n    portType = 'portType',\n    internetType = 'internetType',\n}\nexport enum connectionTypes {\n    wired = 'wired',\n    wifi = 'wifi',\n}\n\nexport const updateActiveParamsInterval = 1000;\nexport const internetRequestDelay = 3000;\n\nexport enum trafficType {\n    upload = 'upload',\n    download = 'download',\n}\n\nexport const trafficTimeFormat = 'HH:mm';\n\nexport enum internetDetailsType {\n    default = 'default',\n    reboot = 'reboot',\n    configuration = 'configuration',\n    download = 'download',\n    upload = 'upload',\n    sent = 'sent',\n    received = 'received',\n}\n\nexport const mModifier = 1000;\nexport const bModifier = 1;\n\nexport const countOfDisplayedNodes = 100;\n","import { useMemo, useRef } from 'react';\nimport { useRecoilValue } from 'recoil';\n\nimport { i18nState } from '../recoil-state/i18n.state';\nimport { i18nLabels } from '../constants/i18n/i18n.constants';\n\nimport { Labels, languages } from '../models/i18n.model';\n\nconst getTranslatedLabel = (label: Labels, language: languages): string =>\n    i18nLabels[label] ? i18nLabels[label][language] : '';\n\nexport const useGetTranslatedLabel = (label: Labels): string => {\n    const language = useRecoilValue<languages>(i18nState);\n    return useMemo(() => getTranslatedLabel(label, language), [language, label]);\n};\n\nexport const useGetTranslatedLabels = (labels: Array<Labels>): Array<string> => {\n    const labelsRef = useRef(labels);\n    const language = useRecoilValue<languages>(i18nState);\n\n    return useMemo(() => labelsRef.current.map((label) => getTranslatedLabel(label, language)), [\n        language,\n    ]);\n};\n\nexport const useGetDynamicTranslatedLabel = (\n    label: Labels,\n    values: Array<string | number>\n): string => {\n    const language = useRecoilValue<languages>(i18nState);\n\n    return useMemo(() => {\n        let index = 0;\n        return getTranslatedLabel(label, language).replace(/{\\$}/g, () => String(values[index++]));\n    }, [language, values, label]);\n};\n\nexport const useGetTranslatedLabelsObject = <T extends Labels>(\n    labels: Array<Labels>\n): { [key in T]: string } => {\n    const labelsRef = useRef(labels);\n    const language = useRecoilValue<languages>(i18nState);\n\n    return useMemo(\n        () =>\n            labelsRef.current.reduce(\n                (res: any, label) => ({\n                    ...res,\n                    [label]: getTranslatedLabel(label, language),\n                }),\n                {}\n            ),\n        [language]\n    ) as { [key in T]: string };\n};\n","import React, { useEffect, useState } from 'react';\nimport './button.scss';\n\nexport type ButtonProps = {\n    disabled?: boolean;\n    className?: string;\n    buttonName: string;\n    buttonHandler: () => void;\n};\nexport const Button = React.memo(\n    ({ className, buttonName, buttonHandler, disabled = false }: ButtonProps) => (\n        <button disabled={disabled} className={className} onClick={buttonHandler}>\n            {buttonName}\n        </button>\n    )\n);\n\nconst getSuccessStatus = (isSuccess: boolean) => (isSuccess ? `success` : '');\n\nexport const ButtonWithPostHandler = (props: ButtonProps & { isActive: boolean }) => {\n    const { className = '', isActive } = props;\n    const [isSuccess, setPostHandlerResult] = useState(false);\n\n    useEffect(() => {\n        let timerId: NodeJS.Timeout;\n\n        if (isSuccess) {\n            timerId = setTimeout(() => {\n                setPostHandlerResult(false);\n            }, 2000);\n        }\n        return () => timerId && clearTimeout(timerId);\n    }, [isSuccess]);\n\n    return (\n        <Button\n            {...props}\n            className={`${className} ${getSuccessStatus(isSuccess)}`}\n            buttonHandler={() =>\n                isSuccess || !isActive\n                    ? null\n                    : Promise.resolve(props.buttonHandler()).then(() => setPostHandlerResult(true))\n            }\n        />\n    );\n};\n","import { lazy } from 'react';\n\nimport { ComponentsToRender } from '../models/router.model';\n\nimport { navActionLinks } from './nav.constants';\n\nexport const rootPath = '/';\nexport const dashboardPath = '/dashboard';\nexport const rootControlPanelPath = '/controlpanel';\n\nexport const componentsToRender: ComponentsToRender = {\n    default: lazy(() => import('../pages/is-not-implemented')),\n    [dashboardPath]: lazy(() => import('../pages/dashboard/dashboard')),\n    [navActionLinks.deviceList]: lazy(() => import('../pages/devices-list/devices-list')),\n};\n","import { navActionTypes, NavigationData, navSectionTypes } from '../models/nav.model';\n\nexport const navigationMockData: NavigationData = {\n    footer: {\n        triggerNavAction: {\n            type: navActionTypes.triggerNav,\n        },\n        logoutAction: {\n            type: navActionTypes.logout,\n        },\n        linkActions: [\n            {\n                type: navActionTypes.help,\n            },\n            {\n                type: navActionTypes.translate,\n            },\n        ],\n    },\n    sections: [\n        {\n            type: navSectionTypes.status,\n            linkActions: [\n                {\n                    type: navActionTypes.dashboard,\n                },\n                {\n                    type: navActionTypes.traffic,\n                },\n            ],\n            isExpanded: false,\n        },\n        {\n            type: navSectionTypes.internet,\n            linkActions: [\n                {\n                    type: navActionTypes.wired,\n                },\n                {\n                    type: navActionTypes.wirelessISP,\n                },\n                {\n                    type: navActionTypes.otherConnections,\n                },\n                {\n                    type: navActionTypes.connectionPriorities,\n                },\n            ],\n            isExpanded: false,\n        },\n        {\n            type: navSectionTypes.network,\n            linkActions: [\n                {\n                    type: navActionTypes.deviceList,\n                },\n                {\n                    type: navActionTypes.homeSegment,\n                },\n                {\n                    type: navActionTypes.guestSegment,\n                },\n                {\n                    type: navActionTypes.wifiSegment,\n                },\n            ],\n            isExpanded: false,\n        },\n        {\n            type: navSectionTypes.rules,\n            linkActions: [\n                {\n                    type: navActionTypes.internetSafety,\n                },\n                {\n                    type: navActionTypes.firewall,\n                },\n                {\n                    type: navActionTypes.forwarding,\n                },\n                {\n                    type: navActionTypes.routing,\n                },\n                {\n                    type: navActionTypes.domainName,\n                },\n                {\n                    type: navActionTypes.wirelessACL,\n                },\n            ],\n            isExpanded: false,\n        },\n        {\n            type: navSectionTypes.management,\n            linkActions: [\n                {\n                    type: navActionTypes.systemSettings,\n                },\n                {\n                    type: navActionTypes.applications,\n                },\n                {\n                    type: navActionTypes.usersAndAccess,\n                },\n                {\n                    type: navActionTypes.diagnostics,\n                },\n            ],\n            isExpanded: false,\n        },\n    ],\n};\n","import { sAtom } from '../utils/simple-recoil.util';\n\nimport { navigationMockData } from '../mock/nav.mock';\n\nimport { navSectionTypes } from '../models/nav.model';\nimport { NavSections } from '../models/nav.model';\n\nexport const expandSectionState = sAtom<navSectionTypes>(navSectionTypes.none);\n\nexport const navSectionsState = sAtom<NavSections>(navigationMockData.sections);\n\nexport const toggleNavBarState = sAtom(false);\n","import {\n    cardTypes,\n    connectionTypes,\n    internetDetailsType,\n    trafficType,\n} from '../constants/cards.constants';\nimport { connectionActionTypes, modalContentTypes } from '../constants/modal.constants';\n\nimport { cardsLabels } from './cards.model';\n\nexport type BaseCard = {\n    cardId: string;\n    type: cardTypes;\n    title: cardsLabels;\n};\n\nexport enum paramTypes {\n    inactive = 'inactive',\n    uptime = 'uptime',\n    currentTime = 'currentTime',\n    cpuUsage = 'cpuUsage',\n    ramUsage = 'ramUsage',\n}\n\nexport type SystemParamValue = string | number | Date;\nexport type SystemParam = {\n    label: cardsLabels;\n    value: SystemParamValue;\n    isActive: boolean;\n    paramType: paramTypes;\n};\n\nexport type SystemParams = Array<SystemParam>;\nexport type UpdateParams = (systemParams: SystemParams) => void;\n\nexport type SystemCardContent = {\n    startedTime: string;\n    systemParams: SystemParams;\n};\n\nexport type SystemCard = BaseCard & {\n    cardContent: SystemCardContent;\n};\n\nexport type DynamicParamProps = {\n    systemParams: SystemParams;\n    startedTime: string;\n};\n\nexport type SplitParams = {\n    staticSystemParams: SystemParams;\n    dynamicSystemParams: SystemParams;\n};\n\nexport type ApplicationsCardContent = {\n    applications: Array<any>;\n};\n\nexport type ApplicationsCard = BaseCard & {\n    cardContent: ApplicationsCardContent;\n};\n\nexport type ConnectionAction = {\n    isActive: boolean;\n    actionType: connectionActionTypes;\n};\n\nexport type ConnectionInfo = {\n    type: modalContentTypes;\n    url: string;\n    credentials: {\n        networkId: string;\n        password: string | null;\n    };\n    actions: {\n        main: Array<ConnectionAction>;\n        WPS: ConnectionAction;\n    };\n};\n\nexport type Connection = {\n    connectionId: string;\n    name: string;\n    isActive: boolean;\n    range: string;\n    channel: number;\n    connectionInfo: ConnectionInfo;\n};\nexport type ConnectionProps = {\n    connection: Connection;\n};\n\nexport type OnlineDevice = {\n    key: string;\n    type: connectionTypes;\n    countOfConnections: number;\n    isHome: boolean;\n};\nexport type OnlineDeviceProps = {\n    onlineDevice: OnlineDevice;\n};\n\nexport type WiFiCardContent = {\n    connections: Array<Connection>;\n    onlineDevices: Array<OnlineDevice>;\n};\n\nexport type WiFiCard = BaseCard & {\n    cardContent: WiFiCardContent;\n};\n\nexport type Port = {\n    portId: string;\n    portType: string;\n    portSpeed: number;\n    portUnit: string;\n    isActive: boolean;\n};\n\nexport type Ports = Array<Port>;\n\nexport type NetworkPortsCardContent = {\n    networkPortId: string;\n    ports: Ports;\n};\n\nexport type NetworkPortsCard = BaseCard & {\n    cardContent: NetworkPortsCardContent;\n};\n\nexport type InternetProvider = {\n    providerLabel: cardsLabels;\n    providerType: string;\n};\n\nexport type TrafficValue = {\n    value: number;\n    unit: cardsLabels;\n};\nexport type TrafficValues = Array<TrafficValue>;\n\nexport type Traffic = {\n    type: trafficType;\n    max: TrafficValue;\n    current: TrafficValue;\n};\n\nexport type TrafficInfo = {\n    download: Traffic;\n    upload: Traffic;\n};\n\nexport type InternetDetail = {\n    label: cardsLabels;\n    value: string | number;\n    type: internetDetailsType;\n};\nexport type InternetDetails = Array<InternetDetail>;\n\nexport type InternetCardContent = {\n    main: {\n        provider: InternetProvider;\n        trafficInfo: TrafficInfo;\n        startedTime: string;\n    };\n    details: InternetDetails;\n};\n\nexport type InternetCard = BaseCard & {\n    cardContent: InternetCardContent;\n};\n\nexport type Card = SystemCard | ApplicationsCard | WiFiCard | NetworkPortsCard | InternetCard;\nexport type CardContent =\n    | SystemCardContent\n    | ApplicationsCardContent\n    | WiFiCardContent\n    | NetworkPortsCardContent\n    | InternetCardContent;\n\nexport type CardsResponse = {\n    isLoading: boolean;\n    leftCards: Array<Card>;\n    rightCards: Array<Card>;\n};\n\nexport type Cards = {\n    leftCards: Array<Card>;\n    rightCards: Array<Card>;\n};\n\nexport type CardsProps = Cards;\nexport type CardProps = {\n    card: Card;\n};\n\nexport type CardsComponents = {\n    [cardType in cardTypes]: (card: CardContent) => JSX.Element;\n};\n","import { NavActionLinks, navActionTypes, navSectionTypes, SectionsUrls } from '../models/nav.model';\n\nexport const navActionLinks: NavActionLinks = {\n    [navActionTypes.logout]: '',\n    [navActionTypes.help]: 'https://help.keenetic.com/hc/en',\n    [navActionTypes.translate]: '',\n    [navActionTypes.triggerNav]: '',\n\n    [navActionTypes.dashboard]: '/dashboard',\n    [navActionTypes.traffic]: '/controlPanel/traffic-monitor/',\n\n    [navActionTypes.wired]: '/controlPanel/wired/',\n    [navActionTypes.wirelessISP]: '/controlPanel/wifiClient/',\n    [navActionTypes.otherConnections]: '/controlPanel/otherConnections',\n    [navActionTypes.connectionPriorities]: '/controlPanel/policies',\n\n    [navActionTypes.deviceList]: '/controlPanel/devicesList',\n    [navActionTypes.homeSegment]: '/controlPanel/segments/HomeSegment',\n    [navActionTypes.guestSegment]: '/controlPanel/segments/GuestSegment',\n    [navActionTypes.wifiSegment]: '/controlPanel/wifiSystem',\n\n    [navActionTypes.internetSafety]: '/controlPanel/secureInternet',\n    [navActionTypes.firewall]: '/controlPanel/firewall',\n    [navActionTypes.forwarding]: '/controlPanel/portForwarding',\n    [navActionTypes.routing]: '/controlPanel/staticRoutes',\n    [navActionTypes.domainName]: '/controlPanel/remoteAccess/',\n    [navActionTypes.wirelessACL]: '/controlPanel/wirelessAcl/',\n\n    [navActionTypes.systemSettings]: '/controlPanel/system',\n    [navActionTypes.applications]: '/controlPanel/apps',\n    [navActionTypes.usersAndAccess]: '/controlPanel/administrator',\n    [navActionTypes.diagnostics]: '/controlPanel/diagnostics',\n};\n\nexport const sectionsUrls: SectionsUrls = [\n    {\n        type: navSectionTypes.status,\n        urls: [navActionLinks.dashboard, navActionLinks.traffic],\n    },\n    {\n        type: navSectionTypes.internet,\n        urls: [\n            navActionLinks.wired,\n            navActionLinks.wirelessISP,\n            navActionLinks.otherConnections,\n            navActionLinks.connectionPriorities,\n        ],\n    },\n    {\n        type: navSectionTypes.network,\n        urls: [\n            navActionLinks.deviceList,\n            navActionLinks.homeSegment,\n            navActionLinks.guestSegment,\n            navActionLinks.wifiSegment,\n        ],\n    },\n    {\n        type: navSectionTypes.rules,\n        urls: [\n            navActionLinks.internetSafety,\n            navActionLinks.firewall,\n            navActionLinks.forwarding,\n            navActionLinks.routing,\n            navActionLinks.domainName,\n            navActionLinks.wirelessACL,\n        ],\n    },\n    {\n        type: navSectionTypes.management,\n        urls: [\n            navActionLinks.systemSettings,\n            navActionLinks.applications,\n            navActionLinks.usersAndAccess,\n            navActionLinks.diagnostics,\n        ],\n    },\n];\n","import { I18nCardsLabels, languages } from '../../models/i18n.model';\n\nconst { english, russian } = languages;\n\nexport const i18nCardsLabels: I18nCardsLabels = {\n    download: {\n        [russian]: 'Прием',\n        [english]: 'Download',\n    },\n    upload: {\n        [russian]: 'Передача',\n        [english]: 'Upload',\n    },\n    hiddenDetailsLabel: {\n        [russian]: 'Скрыть подробности',\n        [english]: 'Hide details',\n    },\n    moreDetailsLabel: {\n        [russian]: 'Подробнее о соединении',\n        [english]: 'More details',\n    },\n    channelLabel: {\n        [russian]: 'Канал',\n        [english]: 'Channel',\n    },\n    showConnectionInfoButtonLabel: {\n        [russian]: 'Информация о сети',\n        [english]: 'Show connection info',\n    },\n    providerHeaderLabel: {\n        [russian]: 'Провайдер',\n        [english]: 'Provider',\n    },\n    applicationsCardTitleLabel: {\n        [russian]: 'Приложения',\n        [english]: 'Applications',\n    },\n    systemCardTitleLabel: {\n        [russian]: 'О системе',\n        [english]: 'About the system',\n    },\n    homeWiFiCardTitleLabel: {\n        [russian]: 'Домашняя сеть',\n        [english]: 'Home segment',\n    },\n    guestWiFiCardTitleLabel: {\n        [russian]: 'Гостевая сеть',\n        [english]: 'Guest segment',\n    },\n    networkPortsCardTitleLabel: {\n        [russian]: 'Сетевые порты',\n        [english]: 'Network ports',\n    },\n    internetCardTitleLabel: {\n        [russian]: 'Интернет',\n        [english]: 'Internet',\n    },\n    hasNoApplicationsMessageLabel: {\n        [russian]: 'Приложения не установлены',\n        [english]: 'Applications not installed',\n    },\n    onlineDeviceTitleLabel: {\n        [russian]: 'Устройства в сети',\n        [english]: 'Online devices',\n    },\n    wifiConnectionTypeMessageLabel: {\n        [russian]: 'Wi-Fi',\n        [english]: 'Wi-Fi',\n    },\n    wiredConnectionTypeMessageLabel: {\n        [russian]: 'Проводные',\n        [english]: 'Wired',\n    },\n    connectedLabel: {\n        [russian]: 'Подключено',\n        [english]: 'Connected',\n    },\n    daysLabel: {\n        [russian]: 'дн',\n        [english]: 'days',\n    },\n\n    modelLabel: {\n        [russian]: 'Модель',\n        [english]: 'Model',\n    },\n    serviceTagLabel: {\n        [russian]: 'Сервисный код',\n        [english]: 'Service tag',\n    },\n    osVersionLabel: {\n        [russian]: 'Версия ОС',\n        [english]: 'OS version',\n    },\n    autoUpdateLabel: {\n        [russian]: 'Автообновление',\n        [english]: 'Auto update',\n    },\n    upTimeLabel: {\n        [russian]: 'Время работы',\n        [english]: 'Uptime',\n    },\n    currentTimeLabel: {\n        [russian]: 'Current time',\n        [english]: 'Текущее время',\n    },\n    cpuUsageLabel: {\n        [russian]: 'Загрузка ЦП',\n        [english]: 'CPU usage',\n    },\n    ramUsageLabel: {\n        [russian]: 'Память',\n        [english]: 'RUM usage',\n    },\n\n    enabledLabel: {\n        [russian]: 'Включено',\n        [english]: 'Enabled',\n    },\n    kbitsLabel: {\n        [russian]: 'кбит/с',\n        [english]: 'kbit/s',\n    },\n    mbitsLabel: {\n        [russian]: 'Mбит/с',\n        [english]: 'Mbit/s',\n    },\n    mbitLabel: {\n        [russian]: 'Мбайт',\n        [english]: 'Mbytes',\n    },\n\n    usingEthernetLabel: {\n        [russian]: 'Сеть Ethernet',\n        [english]: 'Using Ethernet',\n    },\n\n    statusLabel: {\n        [russian]: 'Статус',\n        [english]: 'Status',\n    },\n    internetSafetyLabel: {\n        [russian]: 'Интернет-фильтр',\n        [english]: 'Internet safety',\n    },\n    authenticationTypeLabel: {\n        [russian]: 'Тип аутентификации',\n        [english]: 'Authentication type',\n    },\n    ipAddressLabel: {\n        [russian]: 'IP-адрес',\n        [english]: 'IP address',\n    },\n    subnetMaskLabel: {\n        [russian]: 'Маска подсети',\n        [english]: 'Subnet mask',\n    },\n    macAddressLabel: {\n        [russian]: 'MAC-адрес',\n        [english]: 'MAC Address',\n    },\n    downloadLabel: {\n        [russian]: 'Прием',\n        [english]: 'Download',\n    },\n    uploadLabel: {\n        [russian]: 'Передача',\n        [english]: 'Upload',\n    },\n    receivedLabel: {\n        [russian]: 'Принято',\n        [english]: 'Received',\n    },\n    sentLabel: {\n        [russian]: 'Отправлено',\n        [english]: 'Sent',\n    },\n    dnsServersLabel: {\n        [russian]: 'Сеть',\n        [english]: 'DNS-серверы',\n    },\n\n    connectionEstablishedLabel: {\n        [russian]: 'Соединение установлено',\n        [english]: 'Connection established',\n    },\n    rebootLabel: {\n        [russian]: 'Перезагрузить',\n        [english]: 'Reboot',\n    },\n    configureLabel: {\n        [russian]: 'Настроить',\n        [english]: 'Configure',\n    },\n    adGuardIsEnabledLabel: {\n        [russian]: 'AdGuard DNS включен',\n        [english]: 'AdGuard DNS is enabled',\n    },\n};\n","import { I18nModalLabels, languages } from '../../models/i18n.model';\n\nconst { english, russian } = languages;\n\nexport const i18nModalLabels: I18nModalLabels = {\n    networkNameLabel: {\n        [russian]: 'Имя сети (SSID)',\n        [english]: 'Network name (SSID)',\n    },\n    passwordLabel: {\n        [russian]: 'Пароль',\n        [english]: 'Password',\n    },\n    connectionDescriptionLabel: {\n        [russian]:\n            'Отсканируйте этот QR-код с помощью камеры вашего телефона, чтобы подключиться к беспроводной сети.',\n        [english]: \"Scan this QR code with your phone's camera to connect to the Wi-Fi network.\",\n    },\n};\n","import { I18nActionsLabels, languages } from '../../models/i18n.model';\n\nconst { english, russian } = languages;\n\nexport const i18nActionsLabels: I18nActionsLabels = {\n    addLogoType: {\n        [russian]: 'Добавить логотип',\n        [english]: 'Add logo',\n    },\n    copyType: {\n        [russian]: 'Скопировать пароль',\n        [english]: 'Copy password',\n    },\n    printType: {\n        [russian]: 'Распечатать',\n        [english]: 'Print',\n    },\n    wpsType: {\n        [russian]: 'Запустить WPS',\n        [english]: 'WPS',\n    },\n    activatedWpsType: {\n        [russian]: 'Остановить WPS',\n        [english]: 'Stop WPS session',\n    },\n};\n","import {\n    I18nDynamicDevicesListLabels,\n    I18nDynamicModalLabels,\n    languages,\n} from '../../models/i18n.model';\n\nconst { english, russian } = languages;\n\nexport const i18nDynamicModalLabels: I18nDynamicModalLabels = {\n    connectionTitleLabel: {\n        [russian]: 'Информация о беспроводной сети {$} в диапазоне {$}',\n        [english]: 'Connection information for the {$} {$} Wi-Fi network',\n    },\n};\n\nexport const i18nDynamicDevicesListLabels: I18nDynamicDevicesListLabels = {\n    speedValueRangeErrorLabel: {\n        [russian]: 'Нужно число от {$} до {$}',\n        [english]: 'Must be a number from {$} to {$}',\n    },\n};\n","import { I18nLoginLabels, languages } from '../../models/i18n.model';\n\nconst { english, russian } = languages;\n\nexport const i18nLoginLabels: I18nLoginLabels = {\n    loginTitleLabel: {\n        [russian]: 'Авторизация',\n        [english]: 'Login page',\n    },\n    resetLabel: {\n        [russian]: 'сброс',\n        [english]: 'reset',\n    },\n    setDefaultLabel: {\n        [russian]: 'по умолчанию',\n        [english]: 'set default',\n    },\n    loginButtonLabel: {\n        [russian]: 'Авторизоваться',\n        [english]: 'Login',\n    },\n    invalidCredentialsMessageLabel: {\n        [russian]: 'Введенные данные не верны',\n        [english]: 'The credentials are invalid',\n    },\n};\n","import { I18nNavLabels, languages } from '../../models/i18n.model';\n\nconst { english, russian } = languages;\n\nexport const i18nNavLabels: I18nNavLabels = {\n    status: {\n        [russian]: 'Cтатус',\n        [english]: 'Status',\n    },\n    internet: {\n        [russian]: 'Интернет',\n        [english]: 'Internet',\n    },\n    network: {\n        [russian]: 'Мои сети и Wi-Fi',\n        [english]: 'My networks and Wi-Fi',\n    },\n    rules: {\n        [russian]: 'Сетевые правила',\n        [english]: 'Network rules',\n    },\n    management: {\n        [russian]: 'Управление',\n        [english]: 'Management',\n    },\n\n    none: {\n        [russian]: '',\n        [english]: '',\n    },\n    all: {\n        [russian]: '',\n        [english]: '',\n    },\n\n    logout: {\n        [russian]: 'Выйти',\n        [english]: 'Logout',\n    },\n    help: {\n        [russian]: 'Центр поддержки',\n        [english]: 'Help Center',\n    },\n    translate: {\n        [russian]: 'Русский',\n        [english]: 'English',\n    },\n    triggerNav: {\n        [russian]: 'Скрыть меню навигации',\n        [english]: 'Hide navigation menu',\n    },\n\n    dashboard: {\n        [russian]: 'Системный монитор',\n        [english]: 'System dashboard',\n    },\n    traffic: {\n        [russian]: 'Монитор траффика хостов',\n        [english]: 'Host traffic monitor',\n    },\n\n    wired: {\n        [russian]: 'Проводной',\n        [english]: 'Wired',\n    },\n    wirelessISP: {\n        [russian]: 'Безпроводной ISP',\n        [english]: 'Wireless ISP',\n    },\n    otherConnections: {\n        [russian]: 'Другие подключиения',\n        [english]: 'Other connections',\n    },\n    connectionPriorities: {\n        [russian]: 'Приоритеты подключений',\n        [english]: 'Connection priorities',\n    },\n\n    deviceList: {\n        [russian]: 'Список устройств',\n        [english]: 'Device lists',\n    },\n    homeSegment: {\n        [russian]: 'Домашняя сеть',\n        [english]: 'Home segment',\n    },\n    guestSegment: {\n        [russian]: 'Гостевая сеть',\n        [english]: 'Guest segment',\n    },\n    wifiSegment: {\n        [russian]: 'Wi-Fi система',\n        [english]: 'Wi-Fi system',\n    },\n\n    internetSafety: {\n        [russian]: 'Интеренет-фильтр',\n        [english]: 'Internet safety',\n    },\n    firewall: {\n        [russian]: 'Межсетевой экран',\n        [english]: 'Firewall',\n    },\n    forwarding: {\n        [russian]: 'Переадресация',\n        [english]: 'Forwarding',\n    },\n    routing: {\n        [russian]: 'Маршрутизация',\n        [english]: 'Routing',\n    },\n    domainName: {\n        [russian]: 'Доменное имя',\n        [english]: 'Domain name',\n    },\n    wirelessACL: {\n        [russian]: 'Контроль доступа Wi-Fi',\n        [english]: 'Wireless ACL',\n    },\n\n    systemSettings: {\n        [russian]: 'Общие настройки',\n        [english]: 'System settings',\n    },\n    applications: {\n        [russian]: 'Приложения',\n        [english]: 'Applications',\n    },\n    usersAndAccess: {\n        [russian]: 'Пользователи и доступ',\n        [english]: 'Users and access',\n    },\n    diagnostics: {\n        [russian]: 'Диагностика',\n        [english]: 'Diagnostics',\n    },\n};\n","import { I18nCommonLabels, languages } from '../../models/i18n.model';\n\nconst { english, russian } = languages;\n\nexport const i18nCommonLabels: I18nCommonLabels = {\n    searchPlaceholderLabel: {\n        [russian]: 'Поиск настроек',\n        [english]: 'Search for settings',\n    },\n    saveButtonLabel: {\n        [russian]: 'Сохранить',\n        [english]: 'Save',\n    },\n    cancelButtonLabel: {\n        [russian]: 'Отмена',\n        [english]: 'Cancel',\n    },\n};\n","import { I18nDevicesListLabels, languages } from '../../models/i18n.model';\n\nconst { english, russian } = languages;\n\nexport const i18nDevicesListLabels: I18nDevicesListLabels = {\n    titleLabel: {\n        [russian]: 'Список устройств',\n        [english]: 'Devices list',\n    },\n    descriptionLabel: {\n        [russian]:\n            'Здесь вы можете посмотреть, какие сетевые устройства подключены к интернет-центру, узнать состояние этих подключений и установить сетевые правила для зарегистрированных устройств.',\n        [english]:\n            'All network devices connected to your Keenetic, registered, unregistered and blocked; and the connection statuses of these devices.',\n    },\n    unregisteredDevicesTitleLabel: {\n        [russian]: 'Незарегистрированные устройства',\n        [english]: 'Unregistered devices',\n    },\n    unregisteredDevicesDescriptionLabel: {\n        [russian]:\n            'Зарегистрируйте ваши устройства, чтобы иметь более гибкие возможности по управлению домашней сетью и ее защитой.',\n        [english]:\n            'Within the unregistered device list you can register new devices allowing higher flexibility and greater protection of your home network. Also from the unregistered list you can block access to the Internet and/or Wi-Fi for undesirable devices.',\n    },\n    registeredDevicesTitleLabel: {\n        [russian]: 'Зарегистрированные устройства',\n        [english]: 'Registered devices',\n    },\n    blockedDevicesTitleLabel: {\n        [russian]: 'Заблокированные устройства',\n        [english]: 'Blocked devices',\n    },\n    blockedDevicesDescriptionLabel: {\n        [russian]: 'Устройства, которым запрещен доступ в Интернет.',\n        [english]: 'Devices to which Internet access is prohibited.',\n    },\n    addDeviceButtonLabel: {\n        [russian]: 'Добавить устройство',\n        [english]: 'Add device',\n    },\n    displayDeviceSettingsLabel: {\n        [russian]: 'Настройки для незарегистрированных устройств',\n        [english]: 'Settings for unregistered devices',\n    },\n\n    hideDeviceSettingsLabel: {\n        [russian]: 'Скрыть настройки',\n        [english]: 'Hide settings',\n    },\n    settingsDescriptionLabel: {\n        [russian]: 'Эти настройки будут применяться ко всем незарегистрированным устройствам.',\n        [english]: 'These settings will apply to all unregistered devices.',\n    },\n\n    withoutFilteringLabel: {\n        [russian]: 'AdGuard DNS / Без фильтрации',\n        [english]: 'AdGuard DNS / Without filtering',\n    },\n    withoutADCLabel: {\n        [russian]: 'AdGuard DNS / Без рекламы',\n        [english]: 'AdGuard DNS / Without ADC',\n    },\n    familyLabel: {\n        [russian]: 'AdGuard DNS / Семейный',\n        [english]: 'AdGuard DNS / Family',\n    },\n    speedLimitLabel: {\n        [russian]: 'Ограничение скорости',\n        [english]: 'Speed limit',\n    },\n    asymmetricLabel: {\n        [russian]: 'Асимметрично',\n        [english]: 'Asymmetric',\n    },\n};\n","import { i18nCardsLabels } from './i18n.cards.constants';\nimport { i18nModalLabels } from './i18n.modal.constants';\nimport { i18nActionsLabels } from './i18n.actions.constants';\nimport { i18nDynamicDevicesListLabels, i18nDynamicModalLabels } from './i18n.dynamic.constants';\nimport { i18nLoginLabels } from './i18n.login.constants';\nimport { i18nNavLabels } from './i18n.navigation.constants';\nimport { i18nCommonLabels } from './i18n.common.constants';\nimport { i18nDevicesListLabels } from './i18n.devicesList.constants';\n\nimport { I18nLabels } from '../../models/i18n.model';\n\nexport const i18nLabels: I18nLabels = {\n    ...i18nCardsLabels,\n    ...i18nModalLabels,\n    ...i18nActionsLabels,\n    ...i18nDynamicModalLabels,\n    ...i18nLoginLabels,\n    ...i18nNavLabels,\n    ...i18nCommonLabels,\n    ...i18nDevicesListLabels,\n    ...i18nDynamicDevicesListLabels,\n};\n\nexport const localStorageI18nKey = 'localStorageI18nKey';\n","import { sAtom } from '../utils/simple-recoil.util';\n\nimport { localStorageI18nKey } from '../constants/i18n/i18n.constants';\n\nimport { languages } from '../models/i18n.model';\n\nconst lang = (localStorage.getItem(localStorageI18nKey) as languages) || languages.english;\nexport const i18nState = sAtom<languages>(lang);\n","import React, { useState, PropsWithChildren } from 'react';\n\nimport { LoaderInfoContext } from '../models/login.model';\n\nexport const LoaderContext = React.createContext<LoaderInfoContext>(\n    (null as unknown) as LoaderInfoContext\n);\n\nexport const WithLoaderContext = ({ children }: PropsWithChildren<{}>) => {\n    const [isLoading, setLoader] = useState(false);\n\n    return (\n        <LoaderContext.Provider value={{ isLoading, setLoader }}>{children}</LoaderContext.Provider>\n    );\n};\n","import { atom, selector, RecoilState, RecoilValueReadOnly, RecoilValue } from 'recoil';\n\nexport type GetRecoilValue = <T>(recoilVal: RecoilValue<T>) => T;\n\nexport type SAtom = <T>(state: RecoilValue<T> | Promise<T> | T) => RecoilState<T>;\nexport type SSelector = <T>(\n    get: (opts: { get: GetRecoilValue }) => Promise<T> | RecoilValue<T> | T\n) => RecoilValueReadOnly<T>;\n\nconst hashFn = (() => {\n    let index = 0;\n\n    return (): string => `${++index}`;\n})();\n\nexport const sAtom: SAtom = <T>(state: RecoilValue<T> | Promise<T> | T) =>\n    atom<T>({ key: hashFn(), default: state });\n\nexport const sSelector: SSelector = <T>(\n    get: (opts: { get: GetRecoilValue }) => Promise<T> | RecoilValue<T> | T\n) => selector<T>({ key: hashFn(), get });\n","import React from 'react';\nimport './input.scss';\n\nimport { useGetTranslatedLabel } from '../../services/i18n.service';\nimport { commonLabels } from '../../models/common.model';\n\nexport type InputProps = {\n    value: string | number;\n    name: string;\n    onChange: (value: string) => void;\n    type?: string;\n    placeholder?: string;\n    className?: string;\n};\n\nexport const Input = React.memo(\n    ({ value, onChange, name, type = 'text', placeholder = '', className = '' }: InputProps) => {\n        const i18nPlaceHolderLabel = useGetTranslatedLabel(placeholder as commonLabels);\n\n        return (\n            <input\n                name={name}\n                type={type}\n                value={value}\n                className={className}\n                placeholder={i18nPlaceHolderLabel}\n                onChange={(e) => onChange(e.target.value)}\n            ></input>\n        );\n    }\n);\n","import React, { useState, PropsWithChildren } from 'react';\nimport { ModalInfoContext, ModalInfo } from '../models/modals.model';\n\nexport const ModalContext = React.createContext<ModalInfoContext>(\n    (null as unknown) as ModalInfoContext\n);\n\nexport const WithModalContext = ({ children }: PropsWithChildren<{}>) => {\n    const [modalInfo, setModal] = useState(null as ModalInfo);\n\n    return (\n        <ModalContext.Provider value={{ modalInfo, setModal }}>{children}</ModalContext.Provider>\n    );\n};\n","import React from 'react';\nimport './message.scss';\n\nimport { Button } from './button';\n\nexport type MessageProps = {\n    message: string;\n    type: string;\n    onClose: () => void;\n    shouldHideCloseButton?: boolean;\n};\n\nexport const Message = React.memo(\n    ({ message, type, onClose, shouldHideCloseButton = false }: MessageProps) =>\n        message ? (\n            <section className=\"message\">\n                <p className={type}>\n                    {message}\n                    {shouldHideCloseButton ? null : (\n                        <Button\n                            className=\"close-message-button\"\n                            buttonName=\"x\"\n                            buttonHandler={onClose}\n                        />\n                    )}\n                </p>\n            </section>\n        ) : null\n);\n","import {\n    cardTypes,\n    connectionTypes,\n    internetDetailsType,\n    trafficType,\n} from '../constants/cards.constants';\nimport { connectionActionTypes, modalContentTypes } from '../constants/modal.constants';\n\nimport { cardsLabels } from '../models/cards.model';\nimport {\n    ApplicationsCard,\n    Cards,\n    InternetCard,\n    NetworkPortsCard,\n    paramTypes,\n    SystemCard,\n    WiFiCard,\n} from '../models/dashboard.model';\n\nexport const applicationsCatrd: ApplicationsCard = {\n    cardId: 'applicationsCatrd_1',\n    type: cardTypes.applicationType,\n    title: cardsLabels.applicationsCardTitleLabel,\n    cardContent: {\n        applications: [],\n    },\n};\n\nconst startedTime = '7/2/2020';\nexport const systemCatrd: SystemCard = {\n    cardId: 'systemCatrd_1',\n    type: cardTypes.systemType,\n    title: cardsLabels.systemCardTitleLabel,\n    cardContent: {\n        startedTime,\n        systemParams: [\n            {\n                label: cardsLabels.modelLabel,\n                value: 'Speedster (KN-3010)',\n                isActive: false,\n                paramType: paramTypes.inactive,\n            },\n            {\n                label: cardsLabels.serviceTagLabel,\n                value: '067-483-550-015-477',\n                isActive: false,\n                paramType: paramTypes.inactive,\n            },\n            {\n                label: cardsLabels.osVersionLabel,\n                value: '3.4.6',\n                isActive: false,\n                paramType: paramTypes.inactive,\n            },\n            {\n                label: cardsLabels.autoUpdateLabel,\n                value: 'enabledLabel',\n                isActive: false,\n                paramType: paramTypes.inactive,\n            },\n            {\n                label: cardsLabels.upTimeLabel,\n                value: '',\n                isActive: true,\n                paramType: paramTypes.uptime,\n            },\n            {\n                label: cardsLabels.currentTimeLabel,\n                value: '',\n                isActive: true,\n                paramType: paramTypes.currentTime,\n            },\n            {\n                label: cardsLabels.cpuUsageLabel,\n                value: '4%',\n                isActive: true,\n                paramType: paramTypes.cpuUsage,\n            },\n            {\n                label: cardsLabels.ramUsageLabel,\n                value: '40% (51/128 Mbytes)',\n                isActive: true,\n                paramType: paramTypes.ramUsage,\n            },\n        ],\n    },\n};\n\nexport const homeWiFiCard: WiFiCard = {\n    cardId: 'homeWiFiCard_ 1',\n    type: cardTypes.wifiType,\n    title: cardsLabels.homeWiFiCardTitleLabel,\n    cardContent: {\n        connections: [\n            {\n                connectionId: 'connection_1',\n                name: 'Keenetic-9672',\n                isActive: true,\n                range: '2.4 GHz',\n                channel: 9,\n                connectionInfo: {\n                    type: modalContentTypes.connectionContentType,\n                    url: 'https://url.com/123',\n                    credentials: {\n                        networkId: 'N ET WO R K iD',\n                        password: 'network password',\n                    },\n                    actions: {\n                        WPS: {\n                            actionType: connectionActionTypes.wpsType,\n                            isActive: true,\n                        },\n                        main: [\n                            {\n                                actionType: connectionActionTypes.copyType,\n                                isActive: true,\n                            },\n                            {\n                                actionType: connectionActionTypes.printType,\n                                isActive: true,\n                            },\n                            {\n                                actionType: connectionActionTypes.addLogoType,\n                                isActive: true,\n                            },\n                        ],\n                    },\n                },\n            },\n            {\n                connectionId: 'connection_2',\n                name: 'Keenetic-9672',\n                isActive: true,\n                range: '5 GHz',\n                channel: 149,\n                connectionInfo: {\n                    type: modalContentTypes.connectionContentType,\n                    url: 'https://url.com/1321',\n                    credentials: {\n                        networkId: 'N ET WO R K iD 321',\n                        password: 'network password 321',\n                    },\n                    actions: {\n                        WPS: {\n                            actionType: connectionActionTypes.wpsType,\n                            isActive: true,\n                        },\n                        main: [\n                            {\n                                actionType: connectionActionTypes.copyType,\n                                isActive: true,\n                            },\n                            {\n                                actionType: connectionActionTypes.printType,\n                                isActive: true,\n                            },\n                            {\n                                actionType: connectionActionTypes.addLogoType,\n                                isActive: true,\n                            },\n                        ],\n                    },\n                },\n            },\n        ],\n        onlineDevices: [\n            {\n                key: 'device_1',\n                type: connectionTypes.wired,\n                countOfConnections: 0,\n                isHome: true,\n            },\n            {\n                key: 'device_2',\n                type: connectionTypes.wifi,\n                countOfConnections: 6,\n                isHome: true,\n            },\n        ],\n    },\n};\n\nexport const guestWiFiCard: WiFiCard = {\n    cardId: 'guestWiFiCard_ 1',\n    type: cardTypes.wifiType,\n    title: cardsLabels.guestWiFiCardTitleLabel,\n    cardContent: {\n        connections: [\n            {\n                connectionId: 'connection_1',\n                name: 'Guest',\n                isActive: false,\n                range: '2.4 GHz',\n                channel: 9,\n                connectionInfo: {\n                    type: modalContentTypes.connectionContentType,\n                    url: 'https://url.com/1321123123',\n                    credentials: {\n                        networkId: 'N ET WO R K iD 1231231',\n                        password: 'network password 123123123',\n                    },\n                    actions: {\n                        WPS: {\n                            actionType: connectionActionTypes.wpsType,\n                            isActive: false,\n                        },\n                        main: [\n                            {\n                                actionType: connectionActionTypes.copyType,\n                                isActive: false,\n                            },\n                            {\n                                actionType: connectionActionTypes.printType,\n                                isActive: true,\n                            },\n                            {\n                                actionType: connectionActionTypes.addLogoType,\n                                isActive: true,\n                            },\n                        ],\n                    },\n                },\n            },\n            {\n                connectionId: 'connection_2',\n                name: 'Guest',\n                isActive: false,\n                range: '5 GHz',\n                channel: 149,\n                connectionInfo: {\n                    type: modalContentTypes.connectionContentType,\n                    url: 'https://url.com/1321123123',\n                    credentials: {\n                        networkId: 'N ET 6423',\n                        password: 'network password 00123',\n                    },\n                    actions: {\n                        WPS: {\n                            actionType: connectionActionTypes.wpsType,\n                            isActive: false,\n                        },\n                        main: [\n                            {\n                                actionType: connectionActionTypes.copyType,\n                                isActive: false,\n                            },\n                            {\n                                actionType: connectionActionTypes.printType,\n                                isActive: true,\n                            },\n                            {\n                                actionType: connectionActionTypes.addLogoType,\n                                isActive: true,\n                            },\n                        ],\n                    },\n                },\n            },\n        ],\n        onlineDevices: [\n            {\n                key: 'device_1',\n                type: connectionTypes.wired,\n                countOfConnections: 0,\n                isHome: false,\n            },\n            {\n                key: 'device_2',\n                type: connectionTypes.wifi,\n                countOfConnections: 0,\n                isHome: false,\n            },\n        ],\n    },\n};\n\nexport const networkPortsCard: NetworkPortsCard = {\n    cardId: 'networkPorts-1',\n    type: cardTypes.portType,\n    title: cardsLabels.networkPortsCardTitleLabel,\n    cardContent: {\n        networkPortId: 'port-id_0',\n        ports: [\n            {\n                isActive: true,\n                portId: 'port-id_0',\n                portSpeed: 100,\n                portType: 'FDX',\n                portUnit: 'M',\n            },\n            {\n                isActive: true,\n                portId: 'port-id_1',\n                portSpeed: 100,\n                portType: 'FDX',\n                portUnit: 'M',\n            },\n            {\n                isActive: false,\n                portId: 'port-id_2',\n                portSpeed: 0,\n                portType: '',\n                portUnit: '',\n            },\n            {\n                isActive: false,\n                portId: 'port-id_3',\n                portSpeed: 0,\n                portType: '',\n                portUnit: '',\n            },\n            {\n                isActive: false,\n                portId: 'port-id_4',\n                portSpeed: 0,\n                portType: '',\n                portUnit: '',\n            },\n        ],\n    },\n};\n\nexport const internetCard: InternetCard = {\n    cardId: 'internetCard_ 1',\n    type: cardTypes.internetType,\n    title: cardsLabels.internetCardTitleLabel,\n    cardContent: {\n        main: {\n            startedTime,\n            provider: {\n                providerLabel: cardsLabels.usingEthernetLabel,\n                providerType: 'PPPoE',\n            },\n            trafficInfo: {\n                download: {\n                    current: {\n                        unit: cardsLabels.kbitsLabel,\n                        value: 0,\n                    },\n                    max: {\n                        unit: cardsLabels.mbitsLabel,\n                        value: 100,\n                    },\n                    type: trafficType.download,\n                },\n                upload: {\n                    current: {\n                        unit: cardsLabels.kbitsLabel,\n                        value: 0,\n                    },\n                    max: {\n                        unit: cardsLabels.mbitsLabel,\n                        value: 50,\n                    },\n                    type: trafficType.upload,\n                },\n            },\n        },\n        details: [\n            {\n                label: cardsLabels.statusLabel,\n                type: internetDetailsType.reboot,\n                value: cardsLabels.connectionEstablishedLabel,\n            },\n            {\n                label: cardsLabels.internetSafetyLabel,\n                type: internetDetailsType.configuration,\n                value: cardsLabels.adGuardIsEnabledLabel,\n            },\n            {\n                label: cardsLabels.authenticationTypeLabel,\n                type: internetDetailsType.default,\n                value: 'PPPoE',\n            },\n            {\n                label: cardsLabels.ipAddressLabel,\n                type: internetDetailsType.default,\n                value: '192.168.1.1',\n            },\n            {\n                label: cardsLabels.subnetMaskLabel,\n                type: internetDetailsType.default,\n                value: '125.125.125.125',\n            },\n            {\n                label: cardsLabels.macAddressLabel,\n                type: internetDetailsType.default,\n                value: '13:ld:78:c1:5d:09',\n            },\n            {\n                label: cardsLabels.downloadLabel,\n                type: internetDetailsType.download,\n                value: '',\n            },\n            {\n                label: cardsLabels.uploadLabel,\n                type: internetDetailsType.upload,\n                value: '',\n            },\n            {\n                label: cardsLabels.receivedLabel,\n                type: internetDetailsType.received,\n                value: 0,\n            },\n            {\n                label: cardsLabels.sentLabel,\n                type: internetDetailsType.sent,\n                value: 0,\n            },\n            {\n                label: cardsLabels.dnsServersLabel,\n                type: internetDetailsType.default,\n                value: '543.217.093.5',\n            },\n        ],\n    },\n};\nexport const cardsMocks: Cards = {\n    leftCards: [internetCard, applicationsCatrd, systemCatrd],\n    rightCards: [homeWiFiCard, guestWiFiCard, networkPortsCard],\n};\n","export enum commonLabels {\n    searchPlaceholderLabel = 'searchPlaceholderLabel',\n    saveButtonLabel = 'saveButtonLabel',\n    cancelButtonLabel = 'cancelButtonLabel',\n}\n\nexport type Option<T> = {\n    id: string;\n    label: T;\n};\n\nexport type DropdownOption<T> = Option<T> & {\n    isSelected: boolean;\n};\n\nexport type Options<T> = Array<Option<T>>;\nexport type DropdownOptions<T> = Array<DropdownOption<T>>;\n","import { LoginValues, LoginState } from '../models/login.model';\n\nexport const initialCredentials: LoginValues = {\n    login: '',\n    password: '',\n};\n\nexport const defaultCredentials: LoginValues = {\n    login: 'admin',\n    password: 'root',\n};\n\nexport const initialState: LoginState = {\n    ...initialCredentials,\n    shouldLogin: false,\n    errorMessage: '',\n};\n\nexport const minCountOfLoginSymbols = 3;\nexport const minCountOfPasswordSymbols = 3;\n\nexport enum loginActionTypes {\n    login = 'login',\n    password = 'password',\n    cleanup = 'cleanup',\n    setdefault = 'setdefault',\n    cleanuperror = 'cleanuperror',\n    cleanuplogin = 'cleanuplogin',\n    validate = 'validate',\n}\n","import React, { useCallback } from 'react';\nimport { useRecoilState } from 'recoil';\n\nimport { i18nState } from '../../../../recoil-state/i18n.state';\n\nimport { useGetTranslatedLabel } from '../../../../services/i18n.service';\n\nimport { localStorageI18nKey } from '../../../../constants/i18n/i18n.constants';\n\nimport { navActionTypes } from '../../../../models/nav.model';\nimport { languages } from '../../../../models/i18n.model';\n\nexport type TranslateProps = {\n    classModifier?: string;\n};\nconst { russian, english } = languages;\nexport const Translate = React.memo(({ classModifier = '' }: TranslateProps) => {\n    const [lang, setLanguage] = useRecoilState(i18nState);\n\n    const changeLanguage = useCallback(() => {\n        const language = lang === russian ? english : russian;\n        localStorage.setItem(localStorageI18nKey, language);\n        setLanguage(language);\n    }, [setLanguage, lang]);\n\n    const i18nActionsLabels = useGetTranslatedLabel(navActionTypes.translate);\n\n    return (\n        <section onClick={changeLanguage} className={`dropdown-as-link ${classModifier}`}>\n            {i18nActionsLabels}\n        </section>\n    );\n});\n","import { loginActionTypes } from '../constants/login.constants';\n\nexport type LoginValues = {\n    login: string;\n    password: string;\n};\n\nexport type SetLoader = (isLoading: boolean) => void;\nexport type SetErrorMessage = (errorMessage: string) => void;\nexport type Login = (loginValues: LoginValues) => void;\n\nexport type UseLoginReturnedValues = {\n    errorMessage: string;\n    hideErrorMessage: SetErrorMessage;\n    login: Login;\n};\n\nexport type LoginState = LoginValues & {\n    shouldLogin: boolean;\n    errorMessage: string;\n};\n\nexport type Action = {\n    type: loginActionTypes;\n    value?: string;\n};\n\nexport type LoginReducer = (state: LoginState, action: Action) => LoginState;\n\nexport type LoaderInfoContext = {\n    isLoading: boolean;\n    setLoader: SetLoader;\n};\n\nexport type ActionHandlers = {\n    [actionType in loginActionTypes]: (...args: any) => any;\n};\n\nexport enum loginLabels {\n    loginTitleLabel = 'loginTitleLabel',\n    resetLabel = 'resetLabel',\n    setDefaultLabel = 'setDefaultLabel',\n    loginButtonLabel = 'loginButtonLabel',\n    invalidCredentialsMessageLabel = 'invalidCredentialsMessageLabel',\n}\n","import React from 'react';\n\nimport { Button } from '../common/button';\nimport { Input } from '../common/input';\nimport { Message } from '../common/message';\nimport { Translate } from '../dashboard/nvagation-bar/common-actions/translate';\n\nimport { LoginLabels } from '../../services/i18n.login.service';\n\nimport { loginActionTypes } from '../../constants/login.constants';\n\nimport { LoginState } from '../../models/login.model';\n\nexport type LoginFormProps = {\n    state: LoginState;\n    i18nLabels: LoginLabels;\n    dispatch: React.Dispatch<any>;\n};\n\nconst { cleanup, cleanuperror, setdefault, validate } = loginActionTypes;\n\nconst loginInputName = 'login';\nconst passwordInputName = 'password';\n\nexport const LoginForm = React.memo(\n    ({ i18nLabels, dispatch, state: { login, password } }: LoginFormProps) => (\n        <section className=\"login\">\n            <h2 className=\"_aligned\">{i18nLabels.loginTitleLabel}</h2>\n            <Button\n                className=\"hint-button hint-button__left\"\n                buttonName={i18nLabels.resetLabel}\n                buttonHandler={() => dispatch({ type: cleanup })}\n            />\n            <Button\n                className=\"hint-button  hint-button__right\"\n                buttonName={i18nLabels.setDefaultLabel}\n                buttonHandler={() => dispatch({ type: setdefault })}\n            />\n            <section className=\"login-form\">\n                <Input\n                    name={loginInputName}\n                    value={login}\n                    onChange={(value: string) => dispatch({ type: loginActionTypes.login, value })}\n                />\n                <Input\n                    name={passwordInputName}\n                    value={password}\n                    onChange={(value: string) =>\n                        dispatch({ type: loginActionTypes.password, value })\n                    }\n                    type=\"password\"\n                />\n                <Button\n                    buttonName={i18nLabels.loginButtonLabel}\n                    buttonHandler={() => dispatch({ type: validate })}\n                />\n                <Message\n                    type=\"error\"\n                    message={i18nLabels.invalidCredentialsMessageLabel}\n                    onClose={() => dispatch({ type: cleanuperror })}\n                />\n                <Translate classModifier=\"dropdown-as-link__inline\" />\n            </section>\n        </section>\n    )\n);\n","export enum toggleStatuses {\n    none = 'none',\n    expanded = 'expanded',\n    collapsed = 'collapsed',\n    empty = '',\n}\n","import {\n    initialCredentials,\n    defaultCredentials,\n    minCountOfLoginSymbols,\n    minCountOfPasswordSymbols,\n    loginActionTypes,\n} from '../constants/login.constants';\nimport {\n    LoginReducer,\n    LoginState,\n    Action,\n    ActionHandlers,\n    loginLabels,\n} from '../models/login.model';\n\nconst {\n    cleanup,\n    cleanuperror,\n    cleanuplogin,\n    login,\n    password,\n    setdefault,\n    validate,\n} = loginActionTypes;\n\nexport const actionHandlers: ActionHandlers = {\n    [login]: (login: string) => ({ login }),\n    [password]: (password: string) => ({ password }),\n    [cleanup]: () => ({\n        ...initialCredentials,\n        errorMessage: '',\n    }),\n    [setdefault]: () => ({\n        ...defaultCredentials,\n        errorMessage: '',\n    }),\n    [cleanuperror]: () => ({ errorMessage: '' }),\n    [cleanuplogin]: (errorMessage: string) => ({\n        shouldLogin: false,\n        errorMessage,\n    }),\n    [validate]: (v: null, { login, password }: LoginState) => {\n        if (\n            login.trim().length > minCountOfLoginSymbols &&\n            password.trim().length > minCountOfPasswordSymbols\n        ) {\n            return {\n                shouldLogin: true,\n                errorMessage: '',\n            };\n        }\n\n        return {\n            shouldLogin: false,\n            errorMessage: loginLabels.invalidCredentialsMessageLabel,\n        };\n    },\n};\n\nexport const loginReducer: LoginReducer = (\n    state: LoginState,\n    { type, value }: Action\n): LoginState => {\n    const actionHandler = actionHandlers[type];\n    if (actionHandler) {\n        return {\n            ...state,\n            ...actionHandler(value, state),\n        };\n    }\n\n    return state;\n};\n","export type SuspenseResource<R> = {\n    read(): R;\n};\n\nexport const suspenseFetch = <R>(promise: Promise<R>): SuspenseResource<R | undefined> => {\n    return wrapPromise<R>(promise);\n};\n\nconst wrapPromise = <R>(promise: Promise<R>) => {\n    let status = 'pending';\n    let result: R;\n\n    const suspender = promise.then(\n        (r) => {\n            status = 'success';\n            result = r;\n        },\n        (e) => {\n            status = 'error';\n            result = e;\n        }\n    );\n    return {\n        read(): R | undefined {\n            if (status === 'pending') {\n                throw suspender;\n            } else if (status === 'error') {\n                throw result;\n            } else if (status === 'success') {\n                return result;\n            }\n        },\n    };\n};\n","import React, { useContext } from 'react';\nimport './loader.scss';\n\nimport { LoaderContext } from '../../context/loader.context';\n\nexport const ContextLoader = React.memo(() => {\n    const { isLoading } = useContext(LoaderContext);\n\n    return isLoading ? <section className=\"loader\"></section> : null;\n});\n\nexport const SuspenseLoader = () => <section className=\"loader\"></section>;\n","import { defaultCredentials } from '../constants/login.constants';\nimport { invalidCardsMessage } from '../constants/cards.constants';\n\nimport { cardsMocks } from '../mock/cards.mock';\n\nimport { loginLabels, LoginValues } from '../models/login.model';\nimport { Cards } from '../models/dashboard.model';\nimport { ErrorHandler } from '../models/concurrency.model';\n\nexport const login = ({ login, password }: LoginValues): Promise<string> => {\n    return new Promise((resolve, reject) =>\n        setTimeout(() => {\n            if (login === defaultCredentials.login && password === defaultCredentials.password) {\n                resolve('userToken');\n            } else {\n                reject(loginLabels.invalidCredentialsMessageLabel);\n            }\n        }, 1000)\n    );\n};\n\nexport const fetchDashboard = (userToken: string): Promise<Cards> =>\n    new Promise((resolve, reject) =>\n        setTimeout(() => {\n            if (userToken) {\n                return resolve(cardsMocks);\n            }\n\n            reject(invalidCardsMessage);\n        }, 2000)\n    );\n\nexport const loadDashboard = (\n    loginValues: LoginValues,\n    errorHandler: ErrorHandler\n): Promise<Cards | undefined> => login(loginValues).then(fetchDashboard).catch(errorHandler);\n","import React, { Suspense, useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { useHistory } from 'react-router-dom';\n\nimport { suspenseFetch } from '../../concurrency/suspence-fetch';\nimport { SuspenseLoader } from '../common/loader';\nimport { loadDashboard } from '../../services/login-and-load-dashboard';\nimport { dashboardPath } from '../../constants/router.constants';\n\nimport { Cards } from '../../models/dashboard.model';\nimport { DashboardLoaderProps, ConcurrencyLoginHandlerProps } from '../../models/concurrency.model';\n\nexport const DashboardLoader = ({ dashboardRequest }: DashboardLoaderProps) => {\n    const history = useHistory();\n\n    const cards = dashboardRequest.read();\n\n    useEffect(() => {\n        history.push({ pathname: dashboardPath, state: cards });\n    }, [history, cards]);\n\n    return null;\n};\n\nexport const ConcurrencyLoginHandler = ({\n    loginValues,\n    errorHandler,\n    getDashboardRequest = loadDashboard,\n}: ConcurrencyLoginHandlerProps) => {\n    const [dashboardRequest] = useState(\n        suspenseFetch<Cards | undefined>(getDashboardRequest(loginValues, errorHandler))\n    );\n\n    return (\n        <Suspense\n            fallback={ReactDOM.createPortal(\n                <SuspenseLoader />,\n                document.getElementById('root-portal-modal') as HTMLElement\n            )}\n        >\n            <DashboardLoader dashboardRequest={dashboardRequest} />\n        </Suspense>\n    );\n};\n","import React, { useReducer } from 'react';\nimport './login.scss';\n\nimport { WithLoaderContext } from '../../context/loader.context';\nimport { LoginForm } from '../../components/login/login-form';\n\nimport { loginReducer } from '../../reducers/login.reducer';\nimport { ConcurrencyLoginHandler } from '../../components/concurrency/concurrency-login-handler';\nimport { useGetLoginPageLabels } from '../../services/i18n.login.service';\n\nimport { initialState, loginActionTypes } from '../../constants/login.constants';\n\nimport { LoginState, LoginReducer } from '../../models/login.model';\n\nconst { cleanuplogin } = loginActionTypes;\n\nexport const LoginPage = () => {\n    const [state, dispatch] = useReducer<LoginReducer, LoginState>(\n        loginReducer,\n        initialState,\n        () => initialState\n    );\n    const { errorMessage, shouldLogin, password, login } = state;\n\n    const i18nLabels = useGetLoginPageLabels(errorMessage);\n\n    return (\n        <WithLoaderContext>\n            <section id=\"root-portal-modal\"></section>\n            {shouldLogin ? (\n                <ConcurrencyLoginHandler\n                    loginValues={{ login, password }}\n                    errorHandler={(errorMessage: string) =>\n                        dispatch({ type: cleanuplogin, value: errorMessage })\n                    }\n                />\n            ) : null}\n            <LoginForm dispatch={dispatch} i18nLabels={i18nLabels} state={state} />\n        </WithLoaderContext>\n    );\n};\n","import { useGetTranslatedLabels } from './i18n.service';\nimport { loginLabels } from '../models/login.model';\n\nexport type LoginLabels = {\n    [key in loginLabels]: string;\n};\nexport const useGetLoginPageLabels = (errorMessage: string): LoginLabels => {\n    const [\n        loginTitleLabel,\n        loginButtonLabel,\n        resetLabel,\n        setDefaultLabel,\n        invalidCredentialsMessageLabel,\n    ] = useGetTranslatedLabels([\n        loginLabels.loginTitleLabel,\n        loginLabels.loginButtonLabel,\n        loginLabels.resetLabel,\n        loginLabels.setDefaultLabel,\n        loginLabels.invalidCredentialsMessageLabel,\n    ]);\n\n    return {\n        loginTitleLabel,\n        loginButtonLabel,\n        resetLabel,\n        setDefaultLabel,\n        invalidCredentialsMessageLabel:\n            errorMessage === loginLabels.invalidCredentialsMessageLabel\n                ? invalidCredentialsMessageLabel\n                : errorMessage,\n    };\n};\n","import React from 'react';\n\nimport { Input } from './input';\nimport { commonLabels } from '../../models/common.model';\n\nexport const SearchBar = () => (\n    <label className=\"search-content\">\n        <Input\n            value=\"\"\n            name=\"search\"\n            type=\"search\"\n            className=\"search-input\"\n            placeholder={commonLabels.searchPlaceholderLabel}\n            onChange={(value: string) => console.log(value)}\n        />\n    </label>\n);\n","import React from 'react';\nimport './header.scss';\n\nimport { SearchBar } from '../../common/search-bar';\n\nexport const Header = () => (\n    <header>\n        <h1>\n            Keenetic <span>Router</span>\n        </h1>\n        <SearchBar />\n    </header>\n);\n","import { useCallback } from 'react';\nimport { useRecoilState } from 'recoil';\n\nimport { toggleNavBarState } from '../recoil-state/navigation.state';\nimport { NavigationBarProps } from '../models/nav.model';\n\nexport const useToggleNavBar = (): NavigationBarProps => {\n    const [isNavBarExpanded, toggleNavBarHandler] = useRecoilState(toggleNavBarState);\n    const toggleNavBar = useCallback(\n        () => toggleNavBarHandler((isNavBarExpanded: boolean) => !isNavBarExpanded),\n        [toggleNavBarHandler]\n    );\n\n    return { isNavBarExpanded, toggleNavBar };\n};\n","import { navSectionTypes, SectionUrls } from '../models/nav.model';\nimport { sectionsUrls } from '../constants/nav.constants';\n\nexport const getActiveSection = (pathname: string): navSectionTypes => {\n    const activeSectionEntries = sectionsUrls.find(({ urls }: SectionUrls) =>\n        urls.includes(pathname)\n    );\n    if (activeSectionEntries) {\n        return activeSectionEntries.type;\n    }\n\n    return navSectionTypes.all;\n};\n\nexport const getSectionClassNames = (type: navSectionTypes) => `nav-section nav-section__${type}`;\n\nexport const getSectionTitleClassNames = (isActive: boolean, shouldExpandSection: boolean) =>\n    `nav-section-title nav-section-title__${shouldExpandSection ? 'expanded' : 'collapsed'} ${\n        isActive ? 'nav-section-title__active' : ''\n    }`;\n\nexport const getActionsClassNames = (shouldExpandSection: boolean) =>\n    `nav-section-actions nav-section-actions__${shouldExpandSection ? 'expanded' : 'collapsed'}`;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useToggleNavBar } from '../../../hooks/toggle-nav-bar.recoil.hook';\nimport { useGetTranslatedLabel } from '../../../services/i18n.service';\nimport {\n    getActionsClassNames,\n    getSectionClassNames,\n    getSectionTitleClassNames,\n} from '../../../services/navigation.service';\n\nimport { navActionLinks } from '../../../constants/nav.constants';\n\nimport { LinkAction, LinkActions, navSectionTypes } from '../../../models/nav.model';\n\nexport type SectionRendererProps = {\n    isActive: boolean;\n    shouldExpandSection: boolean;\n    type: navSectionTypes;\n    onExpandNavBar: () => void;\n    onExpandSection: () => void;\n    linkActions: LinkActions;\n};\n\nexport const LinkActionRenderer = React.memo(({ type }: LinkAction) => {\n    const i18nActionLabel = useGetTranslatedLabel(type);\n    const { toggleNavBar } = useToggleNavBar();\n\n    return (\n        <Link className=\"nav-section-action\" to={navActionLinks[type]} onClick={toggleNavBar}>\n            {i18nActionLabel}\n        </Link>\n    );\n});\n\nexport const renderLinkActions = (linkActions: LinkActions) =>\n    linkActions.map((linkAction: LinkAction) => (\n        <LinkActionRenderer key={linkAction.type} {...linkAction} />\n    ));\n\nexport const SectionRenderer = React.memo(\n    ({\n        onExpandNavBar,\n        type,\n        shouldExpandSection,\n        onExpandSection,\n        isActive,\n        linkActions,\n    }: SectionRendererProps) => {\n        const i18nSectionLabel = useGetTranslatedLabel(type);\n\n        return (\n            <section onClick={onExpandNavBar} className={getSectionClassNames(type)}>\n                <h3\n                    onClick={onExpandSection}\n                    className={getSectionTitleClassNames(isActive, shouldExpandSection)}\n                >\n                    {i18nSectionLabel}\n                </h3>\n                <section className={getActionsClassNames(shouldExpandSection)}>\n                    {renderLinkActions(linkActions)}\n                </section>\n            </section>\n        );\n    }\n);\n","import React, { useCallback } from 'react';\nimport { useRecoilState } from 'recoil';\nimport { useLocation } from 'react-router-dom';\n\nimport { SectionRenderer } from './navigation-section.renderer';\n\nimport { expandSectionState } from '../../../recoil-state/navigation.state';\nimport { getActiveSection } from '../../../services/navigation.service';\nimport { useToggleNavBar } from '../../../hooks/toggle-nav-bar.recoil.hook';\n\nimport { NavSection, navSectionTypes } from '../../../models/nav.model';\n\nexport const Section = React.memo(({ type, linkActions }: NavSection) => {\n    const { isNavBarExpanded, toggleNavBar } = useToggleNavBar();\n    const [expandedType, expandSection] = useRecoilState(expandSectionState);\n    const location = useLocation();\n\n    const onExpandSection = useCallback(() => {\n        expandSection(type);\n    }, [expandSection, type]);\n\n    const onExpandNavBar = useCallback(() => {\n        if (!isNavBarExpanded) {\n            toggleNavBar();\n        }\n        onExpandSection();\n    }, [isNavBarExpanded, toggleNavBar, onExpandSection]);\n\n    const shouldExpandSection = expandedType === type || expandedType === navSectionTypes.all;\n    const isActive = getActiveSection(location.pathname) === type;\n\n    return (\n        <SectionRenderer\n            isActive={isActive}\n            shouldExpandSection={shouldExpandSection}\n            type={type}\n            linkActions={linkActions}\n            onExpandNavBar={onExpandNavBar}\n            onExpandSection={onExpandSection}\n        />\n    );\n});\n","import React, { useRef } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport './navigation-sections.scss';\n\nimport { Section } from './navigation-section';\n\nimport { navSectionsState } from '../../../recoil-state/navigation.state';\nimport { useVerticalPerfectScroll } from '../../../hooks/vertical-scroll.hook';\nimport { useDefaultExpandNavBarHandler } from '../../../hooks/expand-nav-bar.hook';\n\nimport { NavSection } from '../../../models/nav.model';\n\nexport const NavigationSections = () => {\n    const sections = useRecoilValue(navSectionsState);\n    const sectionsRef = useRef<HTMLElement>((null as unknown) as HTMLElement);\n\n    useVerticalPerfectScroll(sectionsRef);\n    const onExpandNavBarHandler = useDefaultExpandNavBarHandler();\n\n    return (\n        <>\n            <section ref={sectionsRef} className=\"nav-sections\" onClick={onExpandNavBarHandler}>\n                {sections.map((navSection: NavSection) => (\n                    <Section key={navSection.type} {...navSection} />\n                ))}\n            </section>\n        </>\n    );\n};\n","import { MutableRefObject, useEffect } from 'react';\nimport PerfectScrollbar from 'perfect-scrollbar';\n\nexport const useVerticalPerfectScroll = (refElement: MutableRefObject<HTMLElement>) => {\n    useEffect(() => {\n        const element = refElement.current;\n        const { height } = element.getBoundingClientRect();\n        element.style.height = `${height}px`;\n\n        const ps = new PerfectScrollbar(element as any, { wheelSpeed: 0.2 });\n        return () => ps.destroy();\n    }, [refElement]);\n};\n","import React, { useCallback } from 'react';\nimport { useSetRecoilState } from 'recoil';\nimport { useHistory } from 'react-router-dom';\n\nimport { useToggleNavBar } from './toggle-nav-bar.recoil.hook';\n\nimport { expandSectionState } from '../recoil-state/navigation.state';\n\nimport { getActiveSection } from '../services/navigation.service';\n\nexport const useDefaultExpandNavBarHandler = () => {\n    const { isNavBarExpanded, toggleNavBar } = useToggleNavBar();\n    const expandSection = useSetRecoilState(expandSectionState);\n    const history = useHistory();\n\n    return useCallback(\n        ({ target }: React.MouseEvent<HTMLElement, MouseEvent>) => {\n            if ((target as any).className.includes('nav-sections')) {\n                toggleNavBar();\n                if (!isNavBarExpanded) {\n                    expandSection(getActiveSection(history.location.pathname));\n                }\n            }\n        },\n        [isNavBarExpanded, toggleNavBar, expandSection, history.location.pathname]\n    );\n};\n","import React, { useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport { useGetTranslatedLabel } from '../../../../services/i18n.service';\nimport { useToggleNavBar } from '../../../../hooks/toggle-nav-bar.recoil.hook';\n\nimport { rootPath } from '../../../../constants/router.constants';\n\nimport { navActionTypes } from '../../../../models/nav.model';\n\nexport const Logout = React.memo(() => {\n    const history = useHistory();\n    const i18nActionLabel = useGetTranslatedLabel(navActionTypes.logout);\n\n    const { toggleNavBar } = useToggleNavBar();\n    const redirectHandler = useCallback(() => {\n        toggleNavBar();\n        history.push({ pathname: rootPath, state: null });\n    }, [toggleNavBar, history]);\n\n    return (\n        <section className=\"nav-section nav-section__top-border nav-section__logout\">\n            <h3\n                onClick={redirectHandler}\n                className=\"nav-section-title nav-section-title__white-simple\"\n            >\n                {i18nActionLabel}\n            </h3>\n        </section>\n    );\n});\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './navigation-common-actions.scss';\n\nimport { Logout } from './logout';\nimport { Translate } from './translate';\n\nimport { useGetTranslatedLabel } from '../../../../services/i18n.service';\n\nimport { navActionLinks } from '../../../../constants/nav.constants';\n\nimport { navActionTypes } from '../../../../models/nav.model';\n\nexport const getCommonActionsClassNames = (shouldDisplayCommonActions: boolean) =>\n    `nav-common-actions nav-common-actions__${\n        shouldDisplayCommonActions ? 'expanded' : 'collapsed'\n    }`;\n\nexport const CommonNavActions = React.memo(\n    ({ isNavBarExpanded }: { isNavBarExpanded: boolean }) => {\n        const i18nActionLabel = useGetTranslatedLabel(navActionTypes.help);\n\n        return (\n            <section className={getCommonActionsClassNames(isNavBarExpanded)}>\n                <Logout />\n                <section className=\"nav-section nav-section__top-border nav-section__split\">\n                    <Link to={navActionLinks[navActionTypes.help]} className=\"action-as-link\">\n                        {i18nActionLabel}\n                    </Link>\n                    <Translate />\n                </section>\n            </section>\n        );\n    }\n);\n","import React, { useEffect } from 'react';\nimport { useSetRecoilState } from 'recoil';\nimport './navigation-footer.scss';\n\nimport { Button } from '../../common/button';\nimport { CommonNavActions } from './common-actions/navigation-common-actions';\n\nimport { useGetTranslatedLabel } from '../../../services/i18n.service';\n\nimport { expandSectionState } from '../../../recoil-state/navigation.state';\nimport { useToggleNavBar } from '../../../hooks/toggle-nav-bar.recoil.hook';\n\nimport { navActionTypes, navSectionTypes } from '../../../models/nav.model';\n\nexport const NavigationFooter = React.memo(() => {\n    const { isNavBarExpanded, toggleNavBar } = useToggleNavBar();\n    const expandAllActions = useSetRecoilState(expandSectionState);\n    const triggerNavBar = () => {\n        toggleNavBar();\n        expandAllActions(navSectionTypes.all);\n    };\n    useEffect(() => {\n        if (!isNavBarExpanded) {\n            expandAllActions(navSectionTypes.none);\n        }\n    }, [isNavBarExpanded, expandAllActions]);\n\n    const i18nActionsLabels = useGetTranslatedLabel(navActionTypes.triggerNav);\n\n    return (\n        <section className=\"navbar-footer\">\n            <CommonNavActions isNavBarExpanded={isNavBarExpanded} />\n\n            <Button\n                buttonHandler={triggerNavBar}\n                className=\"navbar-footer_trigger-action\"\n                buttonName={i18nActionsLabels}\n            ></Button>\n        </section>\n    );\n});\n","import { useEffect, useState } from 'react';\n\nimport { toggleStatuses } from '../constants/hooks.constants';\n\nexport const useExpandCollapseHook = (isExpanded: boolean): toggleStatuses => {\n    const [expandCollapseClassName, setClassName] = useState<toggleStatuses>(toggleStatuses.empty);\n\n    useEffect(() => {\n        setClassName((navClassName) =>\n            navClassName\n                ? isExpanded\n                    ? toggleStatuses.expanded\n                    : toggleStatuses.collapsed\n                : toggleStatuses.none\n        );\n    }, [isExpanded, setClassName]);\n\n    return expandCollapseClassName;\n};\n","import { connectionActionTypes } from '../constants/modal.constants';\nimport { ConnectionInfoPropsWithSetters } from './modals.model';\n\nexport enum actionsLabels {\n    addLogoType = 'addLogoType',\n    copyType = 'copyType',\n    printType = 'printType',\n    wpsType = 'wpsType',\n    activatedWpsType = 'activatedWpsType',\n}\n\nexport type ActionNames = {\n    activatedWpsType: actionsLabels;\n    [connectionActionTypes.addLogoType]: actionsLabels;\n    [connectionActionTypes.copyType]: actionsLabels;\n    [connectionActionTypes.printType]: actionsLabels;\n    [connectionActionTypes.wpsType]: actionsLabels;\n};\n\nexport type ModalActionHandler = (actionPayload: ConnectionInfoPropsWithSetters) => Promise<void>;\n\nexport type ModalActionHandlers = {\n    [actionType in connectionActionTypes]: ModalActionHandler;\n};\n","import React from 'react';\n\nimport './navigation-bar.scss';\n\nimport { NavigationSections } from './navigation-sections';\nimport { NavigationFooter } from './navigation-footer';\n\nimport { useExpandCollapseHook } from '../../../hooks/expand-collpase.hook';\nimport { useToggleNavBar } from '../../../hooks/toggle-nav-bar.recoil.hook';\n\nexport const NavigationBar = () => {\n    const { isNavBarExpanded, toggleNavBar } = useToggleNavBar();\n    const expandCollapseNavBarClassName = useExpandCollapseHook(isNavBarExpanded);\n\n    return (\n        <nav className={expandCollapseNavBarClassName}>\n            <section\n                onClick={toggleNavBar}\n                className={`nav-background nav-background__${expandCollapseNavBarClassName}`}\n            ></section>\n            <section className=\"nav-container\">\n                <NavigationSections />\n                <NavigationFooter />\n            </section>\n        </nav>\n    );\n};\n","import React from 'react';\n\nexport type LogoProps = {\n    src: string;\n    className: string;\n};\n\nexport const Logo = ({ src, className }: LogoProps) => (\n    <img className={className} src={src} alt=\"loading\"></img>\n);\n","import React, { useEffect, useState, useMemo } from 'react';\nimport './timer.scss';\n\nexport type TimerProps = {\n    duration: number;\n    fallback: () => void;\n};\n\nconst tickDuration = 1000;\n\nconst getFormattedRestTime = (resTime: number): string => {\n    const min = Math.floor(resTime / 60);\n    const sec = resTime % 60;\n\n    return `0${min}: ${sec > 9 ? sec : `0${sec}`}`;\n};\n\nconst getDurationModifier = (duration: number) => `progress-bar_rest--${duration}`;\n\nexport const Timer = ({ duration, fallback }: TimerProps) => {\n    const [restTime, setRestTime] = useState(duration);\n\n    useEffect(() => {\n        const timerId = setTimeout(fallback, duration * tickDuration);\n        return () => clearTimeout(timerId);\n    }, [fallback, duration]);\n\n    useEffect(() => {\n        const timerId = setInterval(() => {\n            setRestTime((restTime) => restTime - 1);\n        }, tickDuration);\n        return () => clearInterval(timerId);\n    }, []);\n\n    const formattedRestTime = useMemo(() => getFormattedRestTime(restTime), [restTime]);\n\n    return (\n        <section className=\"timer\">\n            <h3 className=\"duration\">{formattedRestTime}</h3>\n            <section className=\"progress-bar\">\n                <p className={`progress-bar_rest ${getDurationModifier(duration)}`}></p>\n            </section>\n        </section>\n    );\n};\n","import { ConnectionInfoPropsWithSetters } from '../models/modals.model';\n\nexport const copyPasteActionHandler = async ({\n    credentials: { password },\n}: ConnectionInfoPropsWithSetters) => {\n    if (password && navigator.clipboard) {\n        return await navigator.clipboard.writeText(password);\n    }\n};\n","import { ConnectionInfoPropsWithSetters, SetLogo } from '../models/modals.model';\n\nexport const getCreatedFileInput = () => {\n    const fileInput = document.createElement('input') as HTMLInputElement;\n\n    fileInput.style.display = 'none';\n    fileInput.type = 'file';\n    fileInput.accept = '.png, .jpg, .jpeg, .svg';\n\n    return fileInput;\n};\nexport type SetImageFile = (imageFile: File, setLogo: SetLogo) => void;\n\nexport const setImageFile = (imageFile: File, setLogo: SetLogo) => {\n    const fr = new FileReader();\n\n    fr.onload = () => setLogo(fr.result as string);\n    fr.readAsDataURL(imageFile);\n};\n\nexport const fileInputUploadHandler = (\n    fileInput: HTMLInputElement,\n    parent: HTMLElement,\n    setImageFile: SetImageFile,\n    setLogo: SetLogo\n) => {\n    const imageFile = fileInput.files?.item(0);\n\n    if (imageFile && imageFile.type.includes('image/')) {\n        setImageFile(imageFile, setLogo);\n    }\n\n    parent.removeChild(fileInput);\n};\nexport const addLogoActionHandler = async ({ setLogo }: ConnectionInfoPropsWithSetters) => {\n    const fileInput = getCreatedFileInput();\n\n    const parent = document.getElementById('root') as HTMLElement;\n    parent.append(fileInput);\n\n    fileInput.addEventListener('change', () =>\n        fileInputUploadHandler(fileInput, parent, setImageFile, setLogo)\n    );\n    fileInput.click();\n};\n","export const printActionHandler = async () => window.print();\n","import { ConnectionInfoPropsWithSetters } from '../models/modals.model';\n\nexport const wpsActionHanlder = async ({\n    credentials: { networkId },\n}: ConnectionInfoPropsWithSetters) => {\n    await Promise.resolve(networkId);\n};\n","import { connectionActionTypes } from '../constants/modal.constants';\nimport { ModalActionHandlers } from '../models/actions.model';\nimport { copyPasteActionHandler } from './copy-paste.action';\nimport { addLogoActionHandler } from './add-logo.action';\nimport { printActionHandler } from './print.action';\nimport { wpsActionHanlder } from './wps.action';\n\nexport const modalActionHandlers: ModalActionHandlers = {\n    [connectionActionTypes.copyType]: copyPasteActionHandler,\n    [connectionActionTypes.addLogoType]: addLogoActionHandler,\n    [connectionActionTypes.printType]: printActionHandler,\n    [connectionActionTypes.wpsType]: wpsActionHanlder,\n};\n","import { ActionNames, actionsLabels } from '../models/actions.model';\n\nexport const actionNames: ActionNames = {\n    addLogoType: actionsLabels.addLogoType,\n    copyType: actionsLabels.copyType,\n    printType: actionsLabels.printType,\n    wpsType: actionsLabels.wpsType,\n    activatedWpsType: actionsLabels.activatedWpsType,\n};\n\nexport const wpsActivationDuration = 120; // 2min in sec\n","import { modalContentTypes } from '../constants/modal.constants';\nimport { FunctionComponent } from 'react';\nimport { ConnectionInfo } from './dashboard.model';\n\nexport type SetLogo = (src: string) => void;\n\nexport type ConnectionInfoProps = ConnectionInfo & {\n    name: string;\n    range: string;\n};\n\nexport type ConnectionInfoPropsWithSetters = ConnectionInfoProps & {\n    setLogo: SetLogo;\n};\nexport type ModalContentComponents = {\n    [modalContentTypes.connectionContentType]: FunctionComponent<ConnectionInfoProps>;\n};\n\nexport type ModalInfo = ConnectionInfoProps | null;\nexport type SetModal = (modalInfo: ModalInfo) => void;\n\nexport type ModalInfoContext = {\n    modalInfo: ModalInfo;\n    setModal: SetModal;\n};\n\nexport enum modalLabels {\n    networkNameLabel = 'networkNameLabel',\n    passwordLabel = 'passwordLabel',\n    connectionDescriptionLabel = 'connectionDescriptionLabel',\n}\n\nexport enum dynamicModalLabels {\n    connectionTitleLabel = 'connectionTitleLabel',\n}\n","import React, { useCallback, useState } from 'react';\n\nimport { Button } from '../common/button';\nimport { Timer } from '../common/timer';\n\nimport { useGetTranslatedLabel } from '../../services/i18n.service';\n\nimport { getActionStatus } from './actions';\nimport { modalActionHandlers } from '../../actions/actions';\n\nimport { actionNames, wpsActivationDuration } from '../../constants/actions.constants';\nimport { connectionActionTypes } from '../../constants/modal.constants';\n\nimport { ConnectionInfoPropsWithSetters } from '../../models/modals.model';\n\nconst actionHandler = modalActionHandlers[connectionActionTypes.wpsType];\nconst { wpsType, activatedWpsType } = actionNames;\n\nexport const WPSAction = (props: ConnectionInfoPropsWithSetters) => {\n    const { isActive } = props.actions.WPS;\n\n    const [isWPSActivated, activateWPS] = useState(false);\n    const buttonHandler = useCallback(() => {\n        activateWPS((isWPSActivated: boolean) => !isWPSActivated);\n        actionHandler(props).catch(() => activateWPS(false));\n    }, [props]);\n\n    const actionLabel = useGetTranslatedLabel(isWPSActivated ? activatedWpsType : wpsType);\n\n    return (\n        <section className=\"acitons-wps\">\n            <Button\n                className={`modal-action-button ${getActionStatus(isActive)} wps`}\n                buttonName={actionLabel}\n                buttonHandler={isActive ? buttonHandler : () => {}}\n            />\n            {isWPSActivated ? (\n                <Timer duration={wpsActivationDuration} fallback={() => activateWPS(false)} />\n            ) : null}\n        </section>\n    );\n};\n","import React from 'react';\n\nimport { ButtonWithPostHandler } from '../common/button';\nimport { WPSAction } from './wps.action';\n\nimport { useGetTranslatedLabel } from '../../services/i18n.service';\n\nimport { actionNames } from '../../constants/actions.constants';\nimport { modalActionHandlers } from '../../actions/actions';\n\nimport { ConnectionAction } from '../../models/dashboard.model';\nimport { ConnectionInfoPropsWithSetters } from '../../models/modals.model';\n\nexport const getActionStatus = (isActive: boolean) =>\n    `modal-action-button__${isActive ? 'active' : 'inactive'}`;\n\nexport const GetActionButton = (\n    { actionType, isActive }: ConnectionAction,\n    connectionInfoPropsWithSetters: ConnectionInfoPropsWithSetters\n) => {\n    const actionLabel = useGetTranslatedLabel(actionNames[actionType]);\n\n    return (\n        <ButtonWithPostHandler\n            key={actionType}\n            isActive={isActive}\n            className={`modal-action-button ${getActionStatus(isActive)}`}\n            buttonName={actionLabel}\n            buttonHandler={\n                isActive\n                    ? () => modalActionHandlers[actionType](connectionInfoPropsWithSetters)\n                    : () => {}\n            }\n        />\n    );\n};\n\nexport const Actions = (props: ConnectionInfoPropsWithSetters) => (\n    <section className=\"actions\">\n        <section className=\"actions-main\">\n            {props.actions.main.map((action: ConnectionAction) => GetActionButton(action, props))}\n        </section>\n        <WPSAction {...props} />\n    </section>\n);\n","import React from 'react';\n\nimport { useGetTranslatedLabels } from '../../services/i18n.service';\n\nimport { modalLabels } from '../../models/modals.model';\n\nexport type CredentialsProps = {\n    password: string | null;\n    networkId: string;\n};\n\nexport const Credentials = ({ password, networkId }: CredentialsProps) => {\n    const [networkNameLabel, passwordLabel] = useGetTranslatedLabels([\n        modalLabels.networkNameLabel,\n        modalLabels.passwordLabel,\n    ]);\n    return (\n        <section className=\"modal-connection-credentials\">\n            <section className=\"modal-connection-credentials-pair\">\n                <span className=\"modal-connection-credentials-pair_label\">{networkNameLabel}:</span>\n                <b className=\"modal-connection-credentials-pair_value\">{` ${networkId}`}</b>\n            </section>\n            <section className=\"modal-connection-credentials_pair\">\n                <span className=\"modal-connection-credentials-pair_label\">{passwordLabel}:</span>\n                <b className=\"modal-connection-credentials-pair_value\">{` ${password}`}</b>\n            </section>\n        </section>\n    );\n};\n","import QRCode from 'qrcode';\n\nexport const generateQR = async (url: string): Promise<string> => await QRCode.toDataURL(url);\n","import React, { useEffect, useState } from 'react';\nimport './connection.content.scss';\n\nimport { Logo } from '../common/logo';\nimport { Actions } from './actions';\nimport { Credentials } from './credentials';\n\nimport { generateQR } from '../../services/qr-code-generator.service';\nimport { useGetDynamicTranslatedLabel, useGetTranslatedLabel } from '../../services/i18n.service';\n\nimport { ConnectionInfoProps, dynamicModalLabels, modalLabels } from '../../models/modals.model';\n\nexport const ConnectionModalContent = React.memo((connectionInfoProps: ConnectionInfoProps) => {\n    const {\n        credentials: { networkId, password },\n        url,\n        name,\n        range,\n    } = connectionInfoProps;\n\n    const description = useGetTranslatedLabel(modalLabels.connectionDescriptionLabel);\n    const title = useGetDynamicTranslatedLabel(dynamicModalLabels.connectionTitleLabel, [\n        name,\n        range,\n    ]);\n\n    const [qrCodeBase64, setQRCode] = useState('');\n    const [logoSrc, setLogo] = useState('');\n\n    useEffect(() => {\n        generateQR(url).then(setQRCode).catch(setQRCode);\n    }, [url, setQRCode]);\n\n    return (\n        <section className=\"modal-connection\">\n            <h1 className=\"modal-connection_print-title\">KEENETIC</h1>\n            <h3 className=\"modal-connection_title\">{title}</h3>\n            {logoSrc ? <Logo src={logoSrc} className=\"connection-logo\" /> : null}\n            <p className=\"modal-connection_description\">{description}</p>\n            <Logo src={qrCodeBase64} className=\"modal-connection_qr-code\" />\n            <Credentials password={password} networkId={networkId} />\n            <Actions\n                {...{\n                    ...connectionInfoProps,\n                    setLogo,\n                }}\n            />\n        </section>\n    );\n});\n","import React, { useContext, PropsWithChildren } from 'react';\n\nimport './modal.scss';\n\nimport { Button } from './button';\n\nimport { ModalContext } from '../../context/modal.context';\nimport { ModalContentComponents } from '../../models/modals.model';\nimport { modalContentTypes } from '../../constants/modal.constants';\nimport { ConnectionModalContent } from '../modal-content/connection.content';\n\nexport type ModalComponent = PropsWithChildren<{\n    setModal: (value: null) => void;\n}>;\n\nconst modalContentComponents: ModalContentComponents = {\n    [modalContentTypes.connectionContentType]: ConnectionModalContent,\n};\n\nexport const ModalComponent = React.memo(({ children, setModal }: ModalComponent) => (\n    <section\n        className=\"modal-background\"\n        onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) =>\n            (e.target as HTMLElement).className === 'modal-background' && setModal(null)\n        }\n    >\n        <section className=\"modal-content\">\n            <Button\n                buttonName=\"\"\n                className=\"close-modal-button\"\n                buttonHandler={() => setModal(null)}\n            />\n            {children}\n        </section>\n    </section>\n));\n\nexport const Modal = React.memo(() => {\n    const { modalInfo, setModal } = useContext(ModalContext);\n    const ModalContent = modalInfo ? modalContentComponents[modalInfo.type] : null;\n\n    return ModalContent && modalInfo ? (\n        <ModalComponent setModal={setModal}>\n            <ModalContent {...modalInfo} />\n        </ModalComponent>\n    ) : null;\n});\n","import React, { PropsWithChildren } from 'react';\nimport './content-wrapper.scss';\n\nimport { Header } from '../../components/dashboard/header/header';\nimport { ContextLoader } from '../../components/common/loader';\nimport { NavigationBar } from '../../components/dashboard/nvagation-bar/navigation-bar';\nimport { Modal } from '../../components/common/modal';\n\nimport { useExpandCollapseHook } from '../../hooks/expand-collpase.hook';\nimport { useToggleNavBar } from '../../hooks/toggle-nav-bar.recoil.hook';\nimport { WithModalContext } from '../../context/modal.context';\nimport { WithLoaderContext } from '../../context/loader.context';\n\nexport const ContentWrapper = ({ children }: PropsWithChildren<{}>) => {\n    const { isNavBarExpanded } = useToggleNavBar();\n    const expandCollapseClassName = useExpandCollapseHook(isNavBarExpanded);\n\n    return (\n        <>\n            <WithLoaderContext>\n                <WithModalContext>\n                    <Modal />\n                    <ContextLoader />\n                    <Header />\n                    <main>\n                        <NavigationBar />\n                        <section className={`content content__${expandCollapseClassName}`}>\n                            {children}\n                        </section>\n                    </main>\n                </WithModalContext>\n            </WithLoaderContext>\n        </>\n    );\n};\n","import React, { Suspense } from 'react';\nimport { RouteComponentProps } from 'react-router';\n\nimport { ContentWrapper } from './content-wrapper/content-wrapper';\n\nimport { componentsToRender } from '../constants/router.constants';\n\nexport const render = (props: RouteComponentProps<any>) => {\n    const {\n        location: { pathname },\n    } = props;\n    const ContentComponent = componentsToRender[pathname] || componentsToRender.default;\n\n    return (\n        <ContentWrapper>\n            <Suspense fallback={<h1>Loading</h1>}>\n                <ContentComponent />\n            </Suspense>\n        </ContentWrapper>\n    );\n};\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { RecoilRoot } from 'recoil';\n\nimport { LoginPage } from './login/login';\nimport { render } from './render-components';\n\nimport { dashboardPath, rootControlPanelPath, rootPath } from '../constants/router.constants';\n\nconst { NODE_ENV, PUBLIC_URL } = process.env;\nconst basename = NODE_ENV === 'development' ? '/' : PUBLIC_URL;\n\nexport const AppRouter = () => (\n    <RecoilRoot>\n        <Router basename={basename}>\n            <Switch>\n                <Route exact path={rootPath}>\n                    <LoginPage />\n                </Route>\n\n                <Route\n                    path={[\n                        dashboardPath,\n                        `${rootControlPanelPath}/:path`,\n                        `${rootControlPanelPath}/:path/:id`,\n                    ]}\n                    render={render}\n                ></Route>\n            </Switch>\n        </Router>\n    </RecoilRoot>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { AppRouter } from './pages/router';\n\nimport './index.scss';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.unstable_createRoot(document.getElementById('root') as Element).render(\n    <React.StrictMode>\n        <AppRouter />\n    </React.StrictMode>\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}