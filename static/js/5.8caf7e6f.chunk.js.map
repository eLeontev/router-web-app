{"version":3,"sources":["components/common/page-content.tsx","hooks/scroll-page.hook.ts","mock/devices-list.mock.ts","recoil-state/devices-list.settings.state.ts","hooks/prepare-settings-pair-data.hook.ts","components/devices-list/devices-settings-pair.tsx","components/devices-list/devices-settings.tsx","hooks/toggle-dirty.hook.ts","pages/devices-list/devices-list.tsx","components/common/checkbox.tsx","hooks/toggle-button-with-i18n.ts"],"names":["getClassNames","classModifier","withScroll","PageContent","React","memo","children","useState","setWithScroll","useEffect","listener","Boolean","window","pageYOffset","addEventListener","removeEventListener","useScrollPageListener","className","deviceSettings","common","value","unitId","upload","download","isAsymmetric","filterId","defaultFilterState","sAtom","filterState","defaultSpeedStates","speedKeys","speedStates","defaultAsymmetricState","asymmetricState","settingsDirtyState","sSelector","get","filter","default","input","asymmetric","deviceDirtyState","isDirtyFilters","isDirtyAsymmetric","isDirtySpeed","some","v","getSpeedValidatorState","key","speedRange","min","max","speedValidatorState","validatorState","isCommonValid","isUploadValid","isDownloadValid","useGetSettingPairData","state","options","label","getSelectedOptionId","useRecoilState","setState","i18nLabel","useGetTranslatedLabel","dropdownOptions","useGetDropdownOptions","getSelectedFilterId","FilterPair","pairData","filterOptions","onChange","speedValueRangeErrorLabel","devicesDynamicListLabels","getSelectedSpeedId","SpeedPair","speedStateKey","speedOptions","isValid","useRecoilValue","i18nErrorMessage","useGetDynamicTranslatedLabel","classNameModifier","AsymmetricPair","name","checked","isAligned","Settings","settingsDescriptionLabel","devicesListLabels","navActionTypes","internetSafety","cardsLabels","speedLimitLabel","asymmetricLabel","DevicesSettings","useToggleButtonWithI18n","displayDeviceSettingsLabel","hideDeviceSettingsLabel","i18nLabels","isHidden","toggleDetailsVisibility","buttonName","buttonHandler","setDeviceValues","devicesSettings","forEach","set","DevicesList","isDirty","DFState","setDFState","FState","setFState","DAState","setDAState","AState","setAState","DCState","setDCState","CState","setCState","DDState","setDDState","DState","setDState","DUState","setDUState","UState","setUState","onSave","cb","onCancel","useDirty","setModal","useContext","ModalContext","useGetTranslatedLabelsObject","titleLabel","descriptionLabel","unregisteredDevicesTitleLabel","unregisteredDevicesDescriptionLabel","registeredDevicesTitleLabel","blockedDevicesDescriptionLabel","blockedDevicesTitleLabel","addDeviceButtonLabel","commonLabels","saveButtonLabel","cancelButtonLabel","type","modalContentTypes","registerDeviceType","console","log","shouldDisplayDirtyBar","setCheckboxClassName","isActive","setCheckboxBarClassName","setCheckboxClassNameDisabled","isDisable","Checkbox","triggerCheckbox","onClick","SimpleCheckBox","labels","useGetTranslatedLabels","useCallback"],"mappings":"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","file":"static/js/5.8caf7e6f.chunk.js","sourcesContent":["import React, { PropsWithChildren } from 'react';\nimport '../../styles/typography.page.scss';\n\nimport { useScrollPageListener } from '../../hooks/scroll-page.hook';\n\nexport type PageContentProps = {\n    classModifier?: string;\n};\n\nexport const getClassNames = (classModifier: string, withScroll: boolean) =>\n    `page-content ${classModifier} ${withScroll ? 'page-content__with-scroll' : ''}`;\n\nexport const PageContent = React.memo(\n    ({ children, classModifier = '' }: PropsWithChildren<PageContentProps>) => {\n        const withScroll = useScrollPageListener();\n        return <section className={getClassNames(classModifier, withScroll)}>{children}</section>;\n    }\n);\n","import { useEffect, useState } from 'react';\n\nconst scrollEventName = 'scroll';\n\nexport const useScrollPageListener = () => {\n    const [withScroll, setWithScroll] = useState(false);\n    useEffect(() => {\n        const listener = () => setWithScroll(Boolean(window.pageYOffset));\n\n        window.addEventListener(scrollEventName, listener);\n        return () => window.removeEventListener(scrollEventName, listener);\n    }, [setWithScroll]);\n\n    return withScroll;\n};\n","import { DeviceSettings } from '../models/devices-list.model';\n\nexport const deviceSettings: DeviceSettings = {\n    isAsymmetric: false,\n    filterId: '431',\n    speedLimits: {\n        common: {\n            value: 0,\n            unitId: '123',\n        },\n        upload: {\n            value: 0,\n            unitId: '123',\n        },\n        download: {\n            value: 0,\n            unitId: '123',\n        },\n    },\n};\n","import { sAtom, sSelector } from '../utils/simple-recoil.util';\n\nimport { deviceSettings } from '../mock/devices-list.mock';\nimport { speedKeys, SpeedValue } from '../models/devices-list.model';\nimport { speedRange } from '../constants/devices-list.constants';\n\nconst {\n    isAsymmetric,\n    filterId,\n    speedLimits: { common, download, upload },\n} = deviceSettings;\n\nexport const defaultFilterState = sAtom<string>(filterId);\nexport const filterState = sAtom<string>(filterId);\n\nexport const defaultSpeedStates = {\n    [speedKeys.common]: sAtom<SpeedValue>({ ...common }),\n    [speedKeys.upload]: sAtom<SpeedValue>({ ...upload }),\n    [speedKeys.download]: sAtom<SpeedValue>({ ...download }),\n};\n\nexport const speedStates = {\n    [speedKeys.common]: sAtom<SpeedValue>({ ...common }),\n    [speedKeys.upload]: sAtom<SpeedValue>({ ...upload }),\n    [speedKeys.download]: sAtom<SpeedValue>({ ...download }),\n};\n\nexport const defaultAsymmetricState = sAtom<boolean>(isAsymmetric);\nexport const asymmetricState = sAtom<boolean>(isAsymmetric);\n\nexport const settingsDirtyState = sSelector(({ get }) => ({\n    filter: {\n        default: get(defaultFilterState),\n        input: get(filterState),\n    },\n    asymmetric: {\n        default: get(defaultAsymmetricState),\n        input: get(asymmetricState),\n    },\n    common: {\n        default: get(defaultSpeedStates.common),\n        input: get(speedStates.common),\n    },\n    upload: {\n        default: get(defaultSpeedStates.upload),\n        input: get(speedStates.upload),\n    },\n    download: {\n        default: get(defaultSpeedStates.download),\n        input: get(speedStates.download),\n    },\n}));\n\nexport const deviceDirtyState = sSelector<boolean>(({ get }) => {\n    const { filter, asymmetric, common, download, upload } = get(settingsDirtyState);\n    const isDirtyFilters = filter.default !== filter.input;\n    const isDirtyAsymmetric = asymmetric.default !== asymmetric.input;\n    const isDirtySpeed = [common, download, upload].some(\n        (v) => v.default.value !== v.input.value || v.default.unitId !== v.input.unitId\n    );\n\n    return isDirtyFilters || isDirtyAsymmetric || isDirtySpeed;\n});\n\nexport const getSpeedValidatorState = (key: speedKeys) =>\n    sSelector(({ get }) => {\n        const { value }: SpeedValue = get(speedStates[key]);\n        const [min, max] = speedRange;\n\n        return value === 0 || (value >= min && value <= max);\n    });\n\nexport const speedValidatorState = {\n    common: getSpeedValidatorState(speedKeys.common),\n    upload: getSpeedValidatorState(speedKeys.upload),\n    download: getSpeedValidatorState(speedKeys.download),\n};\n\nexport const validatorState = sSelector<boolean>(({ get }) => {\n    const isAsymmetric = get(asymmetricState);\n    const isCommonValid = get(speedValidatorState.common);\n    const isUploadValid = get(speedValidatorState.upload);\n    const isDownloadValid = get(speedValidatorState.download);\n\n    return isAsymmetric ? isUploadValid && isDownloadValid : isCommonValid;\n});\n","import { RecoilState, useRecoilState } from 'recoil';\n\nimport { useGetTranslatedLabel } from '../services/i18n.service';\n\nimport { useGetDropdownOptions } from './prepare-options-to-dropdown.hook';\n\nimport { Options } from '../models/common.model';\nimport { Labels } from '../models/i18n.model';\n\nexport const useGetSettingPairData = <S>(\n    state: RecoilState<S>,\n    options: Options<Labels>,\n    label: Labels,\n    getSelectedOptionId: (value: S) => string\n) => {\n    const [value, setState] = useRecoilState<S>(state);\n    const i18nLabel = useGetTranslatedLabel(label);\n    const dropdownOptions = useGetDropdownOptions(options, getSelectedOptionId(value));\n\n    return {\n        value,\n        setState,\n        dropdownOptions,\n        i18nLabel,\n    };\n};\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\n\nimport { Dropdown, DropdownWithInput } from '../common/dropdown';\nimport { SimpleCheckBox } from '../common/checkbox';\nimport { ModalPairStatic } from '../modal-content/common/modal-pair';\n\nimport { useGetDynamicTranslatedLabel } from '../../services/i18n.service';\n\nimport { useGetSettingPairData } from '../../hooks/prepare-settings-pair-data.hook';\n\nimport {\n    asymmetricState,\n    filterState,\n    speedStates,\n    speedValidatorState,\n} from '../../recoil-state/devices-list.settings.state';\n\nimport { filterOptions, speedOptions, speedRange } from '../../constants/devices-list.constants';\n\nimport { devicesDynamicListLabels, speedKeys, SpeedValue } from '../../models/devices-list.model';\nimport { Labels } from '../../models/i18n.model';\n\nexport type DeviceSettingsPairProps = {\n    label: Labels;\n};\n\nexport type SpeedPairProps = DeviceSettingsPairProps & {\n    speedStateKey: speedKeys;\n};\n\nexport type AsymmetricPairProps = DeviceSettingsPairProps & {\n    name: string;\n};\n\nexport const getSelectedFilterId = (filterId: string): string => filterId;\nexport const FilterPair = React.memo(({ label }: DeviceSettingsPairProps) => {\n    const pairData = useGetSettingPairData(filterState, filterOptions, label, getSelectedFilterId);\n    const { i18nLabel, setState, dropdownOptions } = pairData;\n\n    return (\n        <ModalPairStatic i18nLabel={i18nLabel}>\n            <Dropdown onChange={setState} dropdownOptions={dropdownOptions} />\n        </ModalPairStatic>\n    );\n});\n\nconst { speedValueRangeErrorLabel } = devicesDynamicListLabels;\nexport const getSelectedSpeedId = ({ unitId }: SpeedValue) => unitId;\nexport const SpeedPair = React.memo(({ speedStateKey, label }: SpeedPairProps) => {\n    const state = speedStates[speedStateKey];\n    const pairData = useGetSettingPairData(state, speedOptions, label, getSelectedSpeedId);\n    const { i18nLabel, setState, dropdownOptions, value } = pairData;\n\n    const isValid = useRecoilValue(speedValidatorState[speedStateKey]);\n    const i18nErrorMessage = useGetDynamicTranslatedLabel(speedValueRangeErrorLabel, speedRange);\n\n    return (\n        <ModalPairStatic i18nLabel={i18nLabel}>\n            <DropdownWithInput\n                value={value.value || ''}\n                onChange={setState}\n                dropdownOptions={dropdownOptions}\n                classNameModifier={isValid ? '' : 'invalid'}\n            />\n            {isValid ? null : <p className=\"page-text__error-inline\">{i18nErrorMessage}</p>}\n        </ModalPairStatic>\n    );\n});\n\nexport const AsymmetricPair = React.memo(({ name, label }: AsymmetricPairProps) => {\n    const pairData = useGetSettingPairData(asymmetricState, [], label, () => '');\n    const { setState, i18nLabel, value: checked } = pairData;\n\n    const onChangeHandler = () => setState((checked: boolean) => !checked);\n\n    return (\n        <ModalPairStatic i18nLabel={i18nLabel} isAligned>\n            <SimpleCheckBox name={name} checked={checked} onChange={onChangeHandler} />\n        </ModalPairStatic>\n    );\n});\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\n\nimport { asymmetricState } from '../../recoil-state/devices-list.settings.state';\n\nimport { Button } from '../common/button';\nimport { FilterPair, SpeedPair, AsymmetricPair } from './devices-settings-pair';\n\nimport { useToggleButtonWithI18n } from '../../hooks/toggle-button-with-i18n';\nimport { useGetTranslatedLabel } from '../../services/i18n.service';\n\nimport { devicesListLabels, speedKeys } from '../../models/devices-list.model';\nimport { cardsLabels } from '../../models/cards.model';\nimport { navActionTypes } from '../../models/nav.model';\n\nexport const Settings = React.memo(() => {\n    const isAsymmetric = useRecoilValue(asymmetricState);\n\n    const settingsDescriptionLabel = useGetTranslatedLabel(\n        devicesListLabels.settingsDescriptionLabel\n    );\n    return (\n        <section className=\"settings\">\n            <p className=\"page-text\">{settingsDescriptionLabel}</p>\n            <section className=\"page-section\">\n                <FilterPair label={navActionTypes.internetSafety} />\n                <SpeedPair\n                    speedStateKey={isAsymmetric ? speedKeys.download : speedKeys.common}\n                    label={isAsymmetric ? cardsLabels.download : devicesListLabels.speedLimitLabel}\n                />\n                <AsymmetricPair name=\"asymmetric\" label={devicesListLabels.asymmetricLabel} />\n                {isAsymmetric ? (\n                    <SpeedPair speedStateKey={speedKeys.upload} label={cardsLabels.upload} />\n                ) : null}\n            </section>\n        </section>\n    );\n});\n\nexport const DevicesSettings = React.memo(() => {\n    const { i18nLabels, isHidden, toggleDetailsVisibility } = useToggleButtonWithI18n([\n        devicesListLabels.displayDeviceSettingsLabel,\n        devicesListLabels.hideDeviceSettingsLabel,\n    ]);\n    const [displayDeviceSettingsLabel, hideDeviceSettingsLabel] = i18nLabels;\n\n    return (\n        <section className=\"devices-settings\">\n            <Button\n                buttonName={isHidden ? displayDeviceSettingsLabel : hideDeviceSettingsLabel}\n                buttonHandler={toggleDetailsVisibility}\n                className=\"details-button\"\n            />\n            {isHidden ? null : <Settings />}\n        </section>\n    );\n});\n","import { RecoilValueReadOnly, SetterOrUpdater, useRecoilState, useRecoilValue } from 'recoil';\nimport {\n    asymmetricState,\n    defaultAsymmetricState,\n    defaultFilterState,\n    defaultSpeedStates,\n    filterState,\n    speedStates,\n} from '../recoil-state/devices-list.settings.state';\nimport { DeviceSettingsStates, DevicesSettings } from '../models/devices-list.model';\n\n// TODO clarify how to fix casting\nconst setDeviceValues = (devicesSettings: DevicesSettings) =>\n    devicesSettings.forEach(({ state, set }: DeviceSettingsStates) =>\n        (set as SetterOrUpdater<boolean>)(state as boolean)\n    );\n\nexport const useDirty = (validatorState: RecoilValueReadOnly<boolean>) => {\n    const isDirty = useRecoilValue(validatorState);\n\n    const [DFState, setDFState] = useRecoilState(defaultFilterState);\n    const [FState, setFState] = useRecoilState(filterState);\n\n    const [DAState, setDAState] = useRecoilState(defaultAsymmetricState);\n    const [AState, setAState] = useRecoilState(asymmetricState);\n\n    const [DCState, setDCState] = useRecoilState(defaultSpeedStates.common);\n    const [CState, setCState] = useRecoilState(speedStates.common);\n    const [DDState, setDDState] = useRecoilState(defaultSpeedStates.download);\n    const [DState, setDState] = useRecoilState(speedStates.download);\n    const [DUState, setDUState] = useRecoilState(defaultSpeedStates.upload);\n    const [UState, setUState] = useRecoilState(speedStates.upload);\n\n    return {\n        isDirty,\n        onSave: (cb: any) => () => {\n            cb();\n            setDeviceValues([\n                {\n                    set: setDFState,\n                    state: FState,\n                },\n                {\n                    set: setDAState,\n                    state: AState,\n                },\n                {\n                    set: setDCState,\n                    state: CState,\n                },\n                {\n                    set: setDDState,\n                    state: DState,\n                },\n                {\n                    set: setDUState,\n                    state: UState,\n                },\n            ]);\n        },\n        onCancel: () =>\n            setDeviceValues([\n                {\n                    set: setFState,\n                    state: DFState,\n                },\n                {\n                    set: setAState,\n                    state: DAState,\n                },\n                {\n                    set: setCState,\n                    state: DCState,\n                },\n                {\n                    set: setDState,\n                    state: DDState,\n                },\n                {\n                    set: setUState,\n                    state: DUState,\n                },\n            ]),\n    };\n};\n","import React, { useContext } from 'react';\nimport { useRecoilValue } from 'recoil';\n\nimport { Button } from '../../components/common/button';\nimport { PageContent } from '../../components/common/page-content';\nimport { Dirty } from '../../components/common/dirty';\n\nimport { DevicesSettings } from '../../components/devices-list/devices-settings';\nimport { ModalContext } from '../../context/modal.context';\n\nimport { deviceDirtyState, validatorState } from '../../recoil-state/devices-list.settings.state';\nimport { useGetTranslatedLabelsObject } from '../../services/i18n.service';\nimport { useDirty } from '../../hooks/toggle-dirty.hook';\n\nimport { devicesListLabels } from '../../models/devices-list.model';\nimport { modalContentTypes } from '../../constants/modal.constants';\nimport { commonLabels } from '../../models/common.model';\n\nexport const DevicesList = () => {\n    const isValid = useRecoilValue(validatorState);\n    const { isDirty, onCancel, onSave } = useDirty(deviceDirtyState);\n    const { setModal } = useContext(ModalContext);\n\n    const i18nLabels = useGetTranslatedLabelsObject([\n        devicesListLabels.titleLabel,\n        devicesListLabels.descriptionLabel,\n        devicesListLabels.unregisteredDevicesTitleLabel,\n        devicesListLabels.unregisteredDevicesDescriptionLabel,\n        devicesListLabels.registeredDevicesTitleLabel,\n        devicesListLabels.blockedDevicesDescriptionLabel,\n        devicesListLabels.blockedDevicesTitleLabel,\n        devicesListLabels.addDeviceButtonLabel,\n        commonLabels.saveButtonLabel,\n        commonLabels.cancelButtonLabel,\n    ]);\n\n    return (\n        <PageContent classModifier=\"devices\">\n            <h1 className=\"page-title\">{i18nLabels.titleLabel}</h1>\n            <section className=\"page-content-wrapper\">\n                <p className=\"page-text\">{i18nLabels.descriptionLabel}</p>\n                <h2 className=\"page-sub-title\">{i18nLabels.unregisteredDevicesTitleLabel}</h2>\n                <p className=\"page-text\">{i18nLabels.unregisteredDevicesDescriptionLabel}</p>\n                <hr />\n                <DevicesSettings />\n                <h2 className=\"page-sub-title\">{i18nLabels.registeredDevicesTitleLabel}</h2>\n                <hr />\n                <h2 className=\"page-sub-title\">{i18nLabels.blockedDevicesTitleLabel}</h2>\n                <p className=\"page-text\">{i18nLabels.blockedDevicesDescriptionLabel}</p>\n                <hr />\n                <Button\n                    className=\"show-more-button\"\n                    buttonHandler={() => setModal({ type: modalContentTypes.registerDeviceType })}\n                    buttonName={i18nLabels.addDeviceButtonLabel}\n                ></Button>\n            </section>\n            <Dirty\n                onCancel={onCancel}\n                onSave={onSave(() => console.log('saved'))}\n                shouldDisplayDirtyBar={isDirty}\n                isValid={isValid}\n                cancelButtonLabel={i18nLabels.cancelButtonLabel}\n                saveButtonLabel={i18nLabels.saveButtonLabel}\n            />\n        </PageContent>\n    );\n};\n\nexport default DevicesList;\n","import React from 'react';\nimport './checkbox.scss';\n\nexport type CheckboxProps = {\n    isDisable: boolean;\n    isActive: boolean;\n    triggerCheckbox: (isActive: boolean) => void;\n};\n\nexport type SimpleCheckBoxProps = {\n    name: string;\n    checked: boolean;\n    onChange: any;\n};\n\nconst setCheckboxClassName = (isActive: boolean) =>\n    isActive ? 'checkbox__active' : 'checkbox__inactive';\nconst setCheckboxBarClassName = (isActive: boolean) =>\n    isActive ? 'checkbox--bar__active' : 'checkbox--bar__inactive';\n\nconst setCheckboxClassNameDisabled = (isDisable: boolean) =>\n    isDisable ? 'checkbox__disabled' : 'checkbox__enabled';\n\nexport const Checkbox = React.memo(({ isActive, triggerCheckbox, isDisable }: CheckboxProps) => (\n    <section\n        className={`checkbox ${setCheckboxClassName(isActive)} ${setCheckboxClassNameDisabled(\n            isDisable\n        )}`}\n    >\n        <span\n            onClick={() => !isDisable && triggerCheckbox(!isActive)}\n            className={`checkbox--bar ${setCheckboxBarClassName(isActive)}`}\n        ></span>\n    </section>\n));\n\nexport const SimpleCheckBox = React.memo(({ name, checked, onChange }: SimpleCheckBoxProps) => {\n    return (\n        <input\n            type=\"checkbox\"\n            className=\"simple-checkbox\"\n            name={name}\n            checked={checked}\n            onChange={onChange}\n        ></input>\n    );\n});\n","import { useCallback, useState } from 'react';\n\nimport { useGetTranslatedLabels } from '../services/i18n.service';\n\nimport { Labels } from '../models/i18n.model';\n\nexport const useToggleButtonWithI18n = (labels: Array<Labels>) => {\n    const [isHidden, toggleDetailsVisibility] = useState(true);\n    const i18nLabels = useGetTranslatedLabels(labels);\n\n    return {\n        isHidden,\n        i18nLabels,\n        toggleDetailsVisibility: useCallback(\n            () => toggleDetailsVisibility((isHidden) => !isHidden),\n            [toggleDetailsVisibility]\n        ),\n    };\n};\n"],"sourceRoot":""}