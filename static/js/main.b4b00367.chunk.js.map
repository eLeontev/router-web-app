{"version":3,"sources":["models/i18n.model.ts","context/loader.context.tsx","components/common/button.tsx","utils/simple-recoil.util.ts","recoil-state/i18n.state.ts","constants/login.constants.ts","constants/i18n/i18n.cards.constants.ts","constants/i18n/i18n.modal.constants.ts","constants/i18n/i18n.actions.constants.ts","constants/i18n/i18n.dynamic.constants.ts","constants/i18n/i18n.login.constants.ts","constants/i18n/i18n.navigation.constants.ts","constants/i18n/i18n.common.constants.ts","constants/i18n/i18n.constants.ts","services/i18n.service.ts","components/common/input.tsx","components/common/message.tsx","models/login.model.ts","components/login/login-form.tsx","constants/cards.constants.ts","reducers/login.reducer.ts","concurrency/suspence-fetch.ts","components/common/loader.tsx","constants/modal.constants.ts","models/cards.model.ts","models/dashboard.model.ts","mock/cards.mock.ts","models/nav.model.ts","services/login-and-load-dashboard.ts","components/dashboard/cards/unknown-card.tsx","services/system-params.service.ts","components/dashboard/cards/system-card.tsx","components/dashboard/online-device/online-device.tsx","components/common/checkbox.tsx","context/modal.context.tsx","context/modal.connection.actions.transformer.ts","components/dashboard/connection/connection.hooks.ts","components/dashboard/connection/connection.tsx","components/dashboard/cards/network-ports-card.tsx","recoil-state/internet.state.ts","components/dashboard/internet/provider.tsx","services/traffic-graph.service.ts","utils/d3-graph.ts","constants/common.constants.ts","mock/nav.mock.ts","models/common.model.ts","recoil-state/navigation.state.ts","components/dashboard/internet/traffic-graph.tsx","components/dashboard/internet/traffic-timing.tsx","services/traffic.time.service.ts","components/dashboard/internet/traffic.tsx","services/dynamic-detail.service.ts","constants/nav.constants.ts","components/dashboard/internet/detail.tsx","components/dashboard/internet/details.tsx","services/internet-card.service.ts","components/dashboard/internet/recoil-internet-updater.tsx","components/dashboard/cards/internet-card.tsx","components/dashboard/cards/cards.tsx","components/dashboard/cards/applications-card.tsx","services/system-card.service.ts","components/dashboard/cards/wifi-card.tsx","services/card-loader.service.ts","constants/router.constants.ts","pages/is-not-implemented.tsx","pages/dashboard/dashboard.tsx","components/concurrency/concurrency-login-handler.tsx","pages/login/login.tsx","services/i18n.login.service.ts","components/common/search-bar.tsx","constants/hooks.constants.ts","components/dashboard/header/header.tsx","hooks/toggle-nav-bar.recoil.hook.ts","services/navigation.service.ts","components/dashboard/nvagation-bar/navigation-section.renderer.tsx","components/dashboard/nvagation-bar/navigation-section.tsx","components/dashboard/nvagation-bar/navigation-sections.tsx","hooks/vertical-scroll.hook.ts","hooks/expand-nav-bar.hook.ts","components/dashboard/nvagation-bar/common-actions/logout.tsx","components/dashboard/nvagation-bar/common-actions/translate.tsx","components/dashboard/nvagation-bar/common-actions/navigation-common-actions.tsx","components/dashboard/nvagation-bar/navigation-footer.tsx","hooks/expand-collpase.hook.ts","models/actions.model.ts","components/dashboard/nvagation-bar/navigation-bar.tsx","components/common/logo.tsx","components/common/timer.tsx","actions/copy-paste.action.ts","actions/add-logo.action.ts","actions/print.action.ts","actions/wps.action.ts","actions/actions.ts","constants/actions.constants.ts","models/modals.model.ts","components/modal-content/wps.action.tsx","components/modal-content/actions.tsx","components/modal-content/credentials.tsx","services/qr-code-generator.service.ts","components/modal-content/connection.content.tsx","components/common/modal.tsx","pages/content-wrapper/content-wrapper.tsx","pages/router.tsx","serviceWorker.ts","index.tsx"],"names":["languages","LoaderContext","React","createContext","WithLoaderContext","children","useState","isLoading","setLoader","Provider","value","Button","memo","className","buttonName","buttonHandler","onClick","getSuccessStatus","isSuccess","ButtonWithPostHandler","props","isActive","setPostHandlerResult","useEffect","timerId","setTimeout","clearTimeout","Promise","resolve","then","hashFn","index","sAtom","state","atom","key","default","loginActionTypes","i18nState","russian","english","i18nCardsLabels","download","upload","hiddenDetailsLabel","moreDetailsLabel","channelLabel","showConnectionInfoButtonLabel","providerHeaderLabel","applicationsCardTitleLabel","systemCardTitleLabel","homeWiFiCardTitleLabel","guestWiFiCardTitleLabel","networkPortsCardTitleLabel","internetCardTitleLabel","hasNoApplicationsMessageLabel","onlineDeviceTitleLabel","wifiConnectionTypeMessageLabel","wiredConnectionTypeMessageLabel","connectedLabel","daysLabel","modelLabel","serviceTagLabel","osVersionLabel","autoUpdateLabel","upTimeLabel","currentTimeLabel","cpuUsageLabel","ramUsageLabel","enabledLabel","kbitsLabel","mbitsLabel","mbitLabel","usingEthernetLabel","statusLabel","internetSafetyLabel","authenticationTypeLabel","ipAddressLabel","subnetMaskLabel","macAddressLabel","downloadLabel","uploadLabel","receivedLabel","sentLabel","dnsServersLabel","connectionEstablishedLabel","rebootLabel","configureLabel","adGuardIsEnabledLabel","i18nModalLabels","networkNameLabel","passwordLabel","connectionDescriptionLabel","i18nActionsLabels","addLogoType","copyType","printType","wpsType","activatedWpsType","i18nDynamicModalLabels","connectionTitleLabel","i18nLoginLabels","loginTitleLabel","resetLabel","setDefaultLabel","loginButtonLabel","invalidCredentialsMessageLabel","i18nNavLabels","status","internet","network","rules","management","none","all","logout","help","translate","triggerNav","dashboard","traffic","wired","wirelessISP","otherConnections","connectionPriorities","deviceList","homeSegment","guestSegment","wifiSegment","internetSafety","firewall","forwarding","routing","domainName","wirelessACL","systemSettings","applications","usersAndAccess","diagnostics","i18nCommonLabels","searchPlaceholderLabel","i18nLabels","getTranslatedLabel","label","language","useGetTranslatedLabel","useRecoilValue","useMemo","useGetTranslatedLabels","labels","labelsRef","useRef","current","map","Input","onChange","name","type","placeholder","i18nPlaceHolderLabel","e","target","Message","message","onClose","shouldHideCloseButton","initialCredentials","login","password","defaultCredentials","initialState","shouldLogin","errorMessage","loginLabels","cleanup","cleanuperror","setdefault","validate","LoginForm","dispatch","cardTypes","connectionTypes","cleanuplogin","actionHandlers","v","trim","length","loginReducer","actionHandler","wrapPromise","promise","result","suspender","r","read","ContextLoader","useContext","SuspenseLoader","defaultCards","leftCards","rightCards","trafficType","internetDetailsType","modalContentTypes","connectionActionTypes","cardsLabels","paramTypes","navActionTypes","navSectionTypes","applicationsCatrd","cardId","applicationType","title","cardContent","systemCatrd","systemType","startedTime","systemParams","paramType","inactive","uptime","currentTime","cpuUsage","ramUsage","homeWiFiCard","wifiType","connections","connectionId","range","channel","connectionInfo","connectionContentType","url","credentials","networkId","actions","WPS","actionType","main","onlineDevices","countOfConnections","isHome","wifi","guestWiFiCard","networkPortsCard","portType","networkPortId","ports","portId","portSpeed","portUnit","cardsMocks","internetType","provider","providerLabel","providerType","trafficInfo","unit","max","details","reboot","configuration","received","sent","fetchDashboard","userToken","reject","loadDashboard","loginValues","errorHandler","catch","UnknownCard","updateUptime","diff","moment","format","paramHandlers","units","allMemory","parseFloat","split","usedRAMinPercentage","Math","random","usedRAMinUnits","round","floor","ParamRenderer","i18nLabel","i18nValue","renderSystemParams","systemParam","DynamicParams","params","updateParams","setInterval","activeParamTypes","param","updateParamsMock","clearInterval","getConnectionModifier","OnlineDeviceComponent","onlineDevice","deviseTypeLabel","to","setCheckboxClassName","setCheckboxBarClassName","setCheckboxClassNameDisabled","isDisable","Checkbox","triggerCheckbox","ModalContext","WithModalContext","modalInfo","setModal","alwaysActiveConnectionActionTypes","setIsActiveActionStatus","connectionStatus","useButtonToOpenModal","useCallback","action","includes","getConnectionModalInfo","ConnectionComponent","connection","setConnectionStatus","isWaiting","setWaitingStatus","a","res","useTriggerCheckbox","setModalContext","PortRenderer","isNetwork","internetState","speedTrafficState","get","selector","sSelector","InternetConnectionDuration","ProviderRenderer","connectionDuration","i18nProviderLabel","getModifier","isUpload","getRange","indexOf","emptyWrapper","cb","callRenderGraph","nodesRef","maxRef","withTimer","modifier","dataset","parent","d3","selectAll","remove","node","getBoundingClientRect","width","height","xScale","domain","yScale","line","x","d","i","y","curve","svg","append","attr","datum","hAxis","ticks","tickSize","call","g","select","renderGraph","maxRange","currentLength","emptyNodes","Array","fill","filledNodes","getDataset","commonLabels","navigationMockData","footer","triggerNavAction","logoutAction","linkActions","sections","isExpanded","expandSectionState","navSectionsState","toggleNavBarState","TrafficGraph","trafficValues","trafficValue","updatedTrafficValues","getLimitedCountOfNodes","isNavBarExpanded","TrafficTiming","countOfDisplayedNodes","getTrafficValue","getTrafficModifier","TrafficRenderer","trafficTypeLabel","dynamicActionHandlers","console","log","navActionLinks","sectionsUrls","urls","DefaultDetailRenderer","DetailsRendererWithTranslatedValues","detail","i18nUnit","TrafficDetailRenderer","ConfigurableDetailRenderer","isConfigurationType","valueLabel","buttonLabel","getDynamicDetailData","i18ButtonLabel","detailRenderers","renderDetails","DetailRenderer","renderDetail","DetailsRenderer","isHidden","toggleDetailsVisibility","sentReceivedUnits","generateUpDownLoadTraffic","getValue","find","Number","useUpdateInternetState","updateInternetState","sentReceivedRef","sentReceivedTraffic","RecoilInternetUpdater","useRecoilState","useInitInternetState","InternetCardRenderer","cardsComponents","hasNoApplicationsMessage","reduce","push","staticSystemParams","dynamicSystemParams","splitSystemParams","onlineDeviceTitle","port","Card","card","CardComponent","Cards","cardLoaderInstance","history","setCards","preloadedCards","location","replace","dashboardPath","undefined","fetchCards","finally","componentsToRender","cardLoader","useHistory","useLoadCards","DashboardLoader","dashboardRequest","cards","pathname","ConcurrencyLoginHandler","getDashboardRequest","fallback","ReactDOM","createPortal","document","getElementById","LoginPage","useReducer","useGetLoginPageLabels","id","toggleStatuses","SearchBar","Header","useToggleNavBar","toggleNavBarHandler","toggleNavBar","Error","getActiveSection","activeSectionEntries","getSectionClassNames","getSectionTitleClassNames","shouldExpandSection","getActionsClassNames","LinkActionRenderer","i18nActionLabel","redirectHandler","SectionRenderer","onExpandNavBar","onExpandSection","i18nSectionLabel","linkAction","renderLinkActions","Section","expandedType","expandSection","NavigationSections","refElement","sectionsRef","element","style","ps","PerfectScrollbar","wheelSpeed","destroy","onExpandNavBarHandler","useSetRecoilState","useDefaultExpandNavBarHandler","ref","navSection","Logout","Translate","setLanguage","changeLanguage","CommonNavActions","shouldDisplayCommonActions","NavigationFooter","expandAllActions","actionsLabels","useExpandCollapseHook","empty","expandCollapseClassName","setClassName","navClassName","expanded","collapsed","NavigationBar","expandCollapseNavBarClassName","Logo","src","alt","getDurationModifier","duration","Timer","restTime","setRestTime","formattedRestTime","resTime","min","sec","getFormattedRestTime","copyPasteActionHandler","navigator","clipboard","writeText","getCreatedFileInput","fileInput","createElement","display","accept","setImageFile","imageFile","setLogo","fr","FileReader","onload","readAsDataURL","fileInputUploadHandler","files","item","removeChild","addLogoActionHandler","addEventListener","click","printActionHandler","window","print","wpsActionHanlder","modalActionHandlers","modalLabels","dynamicModalLabels","actionNames","WPSAction","isWPSActivated","activateWPS","actionLabel","getActionStatus","Actions","connectionInfoPropsWithSetters","GetActionButton","Credentials","generateQR","QRCode","toDataURL","ConnectionModalContent","connectionInfoProps","description","values","String","useGetDynamicTranslatedLabel","qrCodeBase64","setQRCode","logoSrc","modalContentComponents","ModalComponent","Modal","ModalContent","ContentWrapper","process","NODE_ENV","PUBLIC_URL","basename","render","path","match","ContentComponent","AppRouter","exact","Boolean","hostname","unstable_createRoot","StrictMode","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.b4b00367.chunk.js","sourcesContent":["import { dynamicModalLabels, modalLabels } from './modals.model';\nimport { actionsLabels } from './actions.model';\nimport { cardsLabels } from './cards.model';\nimport { loginLabels } from './login.model';\nimport { navLabels } from './nav.model';\nimport { commonLabels } from './common.model';\n\nexport enum languages {\n    english = 'english',\n    russian = 'russian',\n}\n\nexport type I18nCardsLabels = {\n    [label in cardsLabels]: {\n        [key in languages]: string;\n    };\n};\n\nexport type I18nModalLabels = {\n    [label in modalLabels]: {\n        [key in languages]: string;\n    };\n};\n\nexport type I18nDynamicModalLabels = {\n    [label in dynamicModalLabels]: {\n        [key in languages]: string;\n    };\n};\n\nexport type I18nActionsLabels = {\n    [label in actionsLabels]: {\n        [key in languages]: string;\n    };\n};\n\nexport type I18nLoginLabels = {\n    [label in loginLabels]: {\n        [key in languages]: string;\n    };\n};\n\nexport type I18nNavLabels = {\n    [label in navLabels]: {\n        [key in languages]: string;\n    };\n};\n\nexport type I18nCommonLabels = {\n    [label in commonLabels]: {\n        [key in languages]: string;\n    };\n};\nexport type Labels =\n    | cardsLabels\n    | modalLabels\n    | dynamicModalLabels\n    | actionsLabels\n    | loginLabels\n    | navLabels\n    | commonLabels;\n\nexport type I18nLabels = {\n    [label in Labels]: {\n        [key in languages]: string;\n    };\n};\n","import React, { useState, PropsWithChildren } from 'react';\n\nimport { LoaderInfoContext } from '../models/login.model';\n\nexport const LoaderContext = React.createContext<LoaderInfoContext>(\n    (null as unknown) as LoaderInfoContext\n);\n\nexport const WithLoaderContext = ({ children }: PropsWithChildren<{}>) => {\n    const [isLoading, setLoader] = useState(false);\n\n    return (\n        <LoaderContext.Provider value={{ isLoading, setLoader }}>{children}</LoaderContext.Provider>\n    );\n};\n","import React, { useEffect, useState } from 'react';\nimport './button.scss';\n\nexport type ButtonProps = {\n    className?: string;\n    buttonName: string;\n    buttonHandler: () => void;\n};\nexport const Button = React.memo(({ className, buttonName, buttonHandler }: ButtonProps) => (\n    <button className={className} onClick={buttonHandler}>\n        {buttonName}\n    </button>\n));\n\nconst getSuccessStatus = (isSuccess: boolean) => (isSuccess ? `success` : '');\n\nexport const ButtonWithPostHandler = (props: ButtonProps & { isActive: boolean }) => {\n    const { className = '', isActive } = props;\n    const [isSuccess, setPostHandlerResult] = useState(false);\n\n    useEffect(() => {\n        let timerId: NodeJS.Timeout;\n\n        if (isSuccess) {\n            timerId = setTimeout(() => {\n                setPostHandlerResult(false);\n            }, 2000);\n        }\n        return () => timerId && clearTimeout(timerId);\n    }, [isSuccess]);\n\n    return (\n        <Button\n            {...props}\n            className={`${className} ${getSuccessStatus(isSuccess)}`}\n            buttonHandler={() =>\n                isSuccess || !isActive\n                    ? null\n                    : Promise.resolve(props.buttonHandler()).then(() => setPostHandlerResult(true))\n            }\n        />\n    );\n};\n","import { atom, selector, RecoilState, RecoilValueReadOnly, RecoilValue } from 'recoil';\n\nexport type GetRecoilValue = <T>(recoilVal: RecoilValue<T>) => T;\n\nexport type SAtom = <T>(state: RecoilValue<T> | Promise<T> | T) => RecoilState<T>;\nexport type SSelector = <T>(\n    get: (opts: { get: GetRecoilValue }) => Promise<T> | RecoilValue<T> | T\n) => RecoilValueReadOnly<T>;\n\nconst hashFn = (() => {\n    let index = 0;\n\n    return (): string => `${++index}`;\n})();\n\nexport const sAtom: SAtom = <T>(state: RecoilValue<T> | Promise<T> | T) =>\n    atom<T>({ key: hashFn(), default: state });\n\nexport const sSelector: SSelector = <T>(\n    get: (opts: { get: GetRecoilValue }) => Promise<T> | RecoilValue<T> | T\n) => selector<T>({ key: hashFn(), get });\n","import { sAtom } from '../utils/simple-recoil.util';\nimport { languages } from '../models/i18n.model';\n\nexport const i18nState = sAtom<languages>(languages.russian);\n","import { LoginValues, LoginState } from '../models/login.model';\n\nexport const initialCredentials: LoginValues = {\n    login: '',\n    password: '',\n};\n\nexport const defaultCredentials: LoginValues = {\n    login: 'admin',\n    password: 'root',\n};\n\nexport const initialState: LoginState = {\n    ...initialCredentials,\n    shouldLogin: false,\n    errorMessage: '',\n};\n\nexport const minCountOfLoginSymbols = 3;\nexport const minCountOfPasswordSymbols = 3;\n\nexport enum loginActionTypes {\n    login = 'login',\n    password = 'password',\n    cleanup = 'cleanup',\n    setdefault = 'setdefault',\n    cleanuperror = 'cleanuperror',\n    cleanuplogin = 'cleanuplogin',\n    validate = 'validate',\n}\n","import { I18nCardsLabels, languages } from '../../models/i18n.model';\n\nconst { english, russian } = languages;\n\nexport const i18nCardsLabels: I18nCardsLabels = {\n    download: {\n        [russian]: 'Прием',\n        [english]: 'Download',\n    },\n    upload: {\n        [russian]: 'Передача',\n        [english]: 'Upload',\n    },\n    hiddenDetailsLabel: {\n        [russian]: 'Скрыть подробности',\n        [english]: 'Hide details',\n    },\n    moreDetailsLabel: {\n        [russian]: 'Подробнее о соединении',\n        [english]: 'More details',\n    },\n    channelLabel: {\n        [russian]: 'Канал',\n        [english]: 'Channel',\n    },\n    showConnectionInfoButtonLabel: {\n        [russian]: 'Информация о сети',\n        [english]: 'Show connection info',\n    },\n    providerHeaderLabel: {\n        [russian]: 'Провайдер',\n        [english]: 'Provider',\n    },\n    applicationsCardTitleLabel: {\n        [russian]: 'Приложения',\n        [english]: 'Applications',\n    },\n    systemCardTitleLabel: {\n        [russian]: 'О системе',\n        [english]: 'About the system',\n    },\n    homeWiFiCardTitleLabel: {\n        [russian]: 'Домашняя сеть',\n        [english]: 'Home segment',\n    },\n    guestWiFiCardTitleLabel: {\n        [russian]: 'Гостевая сеть',\n        [english]: 'Guest segment',\n    },\n    networkPortsCardTitleLabel: {\n        [russian]: 'Сетевые порты',\n        [english]: 'Network ports',\n    },\n    internetCardTitleLabel: {\n        [russian]: 'Интернет',\n        [english]: 'Internet',\n    },\n    hasNoApplicationsMessageLabel: {\n        [russian]: 'Приложения не установлены',\n        [english]: 'Applications not installed',\n    },\n    onlineDeviceTitleLabel: {\n        [russian]: 'Устройства в сети',\n        [english]: 'Online devices',\n    },\n    wifiConnectionTypeMessageLabel: {\n        [russian]: 'Wi-Fi',\n        [english]: 'Wi-Fi',\n    },\n    wiredConnectionTypeMessageLabel: {\n        [russian]: 'Проводные',\n        [english]: 'Wired',\n    },\n    connectedLabel: {\n        [russian]: 'Подключено',\n        [english]: 'Connected',\n    },\n    daysLabel: {\n        [russian]: 'дн',\n        [english]: 'days',\n    },\n\n    modelLabel: {\n        [russian]: 'Модель',\n        [english]: 'Model',\n    },\n    serviceTagLabel: {\n        [russian]: 'Сервисный код',\n        [english]: 'Service tag',\n    },\n    osVersionLabel: {\n        [russian]: 'Версия ОС',\n        [english]: 'OS version',\n    },\n    autoUpdateLabel: {\n        [russian]: 'Автообновление',\n        [english]: 'Auto update',\n    },\n    upTimeLabel: {\n        [russian]: 'Время работы',\n        [english]: 'Uptime',\n    },\n    currentTimeLabel: {\n        [russian]: 'Current time',\n        [english]: 'Текущее время',\n    },\n    cpuUsageLabel: {\n        [russian]: 'Загрузка ЦП',\n        [english]: 'CPU usage',\n    },\n    ramUsageLabel: {\n        [russian]: 'Память',\n        [english]: 'RUM usage',\n    },\n\n    enabledLabel: {\n        [russian]: 'Включено',\n        [english]: 'Enabled',\n    },\n    kbitsLabel: {\n        [russian]: 'кбит/с',\n        [english]: 'kbit/s',\n    },\n    mbitsLabel: {\n        [russian]: 'Mбит/с',\n        [english]: 'Mbit/s',\n    },\n    mbitLabel: {\n        [russian]: 'Мбайт',\n        [english]: 'Mbytes',\n    },\n\n    usingEthernetLabel: {\n        [russian]: 'Сеть Ethernet',\n        [english]: 'Using Ethernet',\n    },\n\n    statusLabel: {\n        [russian]: 'Статус',\n        [english]: 'Status',\n    },\n    internetSafetyLabel: {\n        [russian]: 'Интернет-фильтр',\n        [english]: 'Internet safety',\n    },\n    authenticationTypeLabel: {\n        [russian]: 'Тип аутентификации',\n        [english]: 'Authentication type',\n    },\n    ipAddressLabel: {\n        [russian]: 'IP-адрес',\n        [english]: 'IP address',\n    },\n    subnetMaskLabel: {\n        [russian]: 'Маска подсети',\n        [english]: 'Subnet mask',\n    },\n    macAddressLabel: {\n        [russian]: 'MAC-адрес',\n        [english]: 'MAC Address',\n    },\n    downloadLabel: {\n        [russian]: 'Прием',\n        [english]: 'Download',\n    },\n    uploadLabel: {\n        [russian]: 'Передача',\n        [english]: 'Upload',\n    },\n    receivedLabel: {\n        [russian]: 'Принято',\n        [english]: 'Received',\n    },\n    sentLabel: {\n        [russian]: 'Отправлено',\n        [english]: 'Sent',\n    },\n    dnsServersLabel: {\n        [russian]: 'Сеть',\n        [english]: 'DNS-серверы',\n    },\n\n    connectionEstablishedLabel: {\n        [russian]: 'Соединение установлено',\n        [english]: 'Connection established',\n    },\n    rebootLabel: {\n        [russian]: 'Перезагрузить',\n        [english]: 'Reboot',\n    },\n    configureLabel: {\n        [russian]: 'Настроить',\n        [english]: 'Configure',\n    },\n    adGuardIsEnabledLabel: {\n        [russian]: 'AdGuard DNS включен',\n        [english]: 'AdGuard DNS is enabled',\n    },\n};\n","import { I18nModalLabels, languages } from '../../models/i18n.model';\n\nconst { english, russian } = languages;\n\nexport const i18nModalLabels: I18nModalLabels = {\n    networkNameLabel: {\n        [russian]: 'Имя сети (SSID)',\n        [english]: 'Network name (SSID)',\n    },\n    passwordLabel: {\n        [russian]: 'Пароль',\n        [english]: 'Password',\n    },\n    connectionDescriptionLabel: {\n        [russian]:\n            'Отсканируйте этот QR-код с помощью камеры вашего телефона, чтобы подключиться к беспроводной сети.',\n        [english]: \"Scan this QR code with your phone's camera to connect to the Wi-Fi network.\",\n    },\n};\n","import { I18nActionsLabels, languages } from '../../models/i18n.model';\n\nconst { english, russian } = languages;\n\nexport const i18nActionsLabels: I18nActionsLabels = {\n    addLogoType: {\n        [russian]: 'Добавить логотип',\n        [english]: 'Add logo',\n    },\n    copyType: {\n        [russian]: 'Скопировать пароль',\n        [english]: 'Copy password',\n    },\n    printType: {\n        [russian]: 'Распечатать',\n        [english]: 'Print',\n    },\n    wpsType: {\n        [russian]: 'Запустить WPS',\n        [english]: 'WPS',\n    },\n    activatedWpsType: {\n        [russian]: 'Остановить WPS',\n        [english]: 'Stop WPS session',\n    },\n};\n","import { I18nDynamicModalLabels, languages } from '../../models/i18n.model';\n\nconst { english, russian } = languages;\n\nexport const i18nDynamicModalLabels: I18nDynamicModalLabels = {\n    connectionTitleLabel: {\n        [russian]: 'Информация о беспроводной сети {$} в диапазоне {$}',\n        [english]: 'Connection information for the {$} {$} Wi-Fi network',\n    },\n};\n","import { I18nLoginLabels, languages } from '../../models/i18n.model';\n\nconst { english, russian } = languages;\n\nexport const i18nLoginLabels: I18nLoginLabels = {\n    loginTitleLabel: {\n        [russian]: 'Авторизация',\n        [english]: 'Login page',\n    },\n    resetLabel: {\n        [russian]: 'сброс',\n        [english]: 'reset',\n    },\n    setDefaultLabel: {\n        [russian]: 'по умолчанию',\n        [english]: 'set default',\n    },\n    loginButtonLabel: {\n        [russian]: 'Авторизоваться',\n        [english]: 'Login',\n    },\n    invalidCredentialsMessageLabel: {\n        [russian]: 'Введенные данные не верны',\n        [english]: 'The credentials are invalid',\n    },\n};\n","import { I18nNavLabels, languages } from '../../models/i18n.model';\n\nconst { english, russian } = languages;\n\nexport const i18nNavLabels: I18nNavLabels = {\n    status: {\n        [russian]: 'Cтатус',\n        [english]: 'Status',\n    },\n    internet: {\n        [russian]: 'Интернет',\n        [english]: 'Internet',\n    },\n    network: {\n        [russian]: 'Мои сети и Wi-Fi',\n        [english]: 'My networks and Wi-Fi',\n    },\n    rules: {\n        [russian]: 'Сетевые правила',\n        [english]: 'Network rules',\n    },\n    management: {\n        [russian]: 'Управление',\n        [english]: 'Management',\n    },\n\n    none: {\n        [russian]: '',\n        [english]: '',\n    },\n    all: {\n        [russian]: '',\n        [english]: '',\n    },\n\n    logout: {\n        [russian]: 'Выйти',\n        [english]: 'Logout',\n    },\n    help: {\n        [russian]: 'Центр поддержки',\n        [english]: 'Help Center',\n    },\n    translate: {\n        [russian]: 'Русский',\n        [english]: 'English',\n    },\n    triggerNav: {\n        [russian]: 'Скрыть меню навигации',\n        [english]: 'Hide navigation menu',\n    },\n\n    dashboard: {\n        [russian]: 'Системный монитор',\n        [english]: 'System dashboard',\n    },\n    traffic: {\n        [russian]: 'Монитор траффика хостов',\n        [english]: 'Host traffic monitor',\n    },\n\n    wired: {\n        [russian]: 'Проводной',\n        [english]: 'Wired',\n    },\n    wirelessISP: {\n        [russian]: 'Безпроводной ISP',\n        [english]: 'Wireless ISP',\n    },\n    otherConnections: {\n        [russian]: 'Другие подключиения',\n        [english]: 'Other connections',\n    },\n    connectionPriorities: {\n        [russian]: 'Приоритеты подключений',\n        [english]: 'Connection priorities',\n    },\n\n    deviceList: {\n        [russian]: 'Список устройств',\n        [english]: 'Device lists',\n    },\n    homeSegment: {\n        [russian]: 'Домашняя сеть',\n        [english]: 'Home segment',\n    },\n    guestSegment: {\n        [russian]: 'Гостевая сеть',\n        [english]: 'Guest segment',\n    },\n    wifiSegment: {\n        [russian]: 'Wi-Fi система',\n        [english]: 'Wi-Fi system',\n    },\n\n    internetSafety: {\n        [russian]: 'Интеренет-фильтр',\n        [english]: 'Internet safety',\n    },\n    firewall: {\n        [russian]: 'Межсетевой экран',\n        [english]: 'Firewall',\n    },\n    forwarding: {\n        [russian]: 'Переадресация',\n        [english]: 'Forwarding',\n    },\n    routing: {\n        [russian]: 'Маршрутизация',\n        [english]: 'Routing',\n    },\n    domainName: {\n        [russian]: 'Доменное имя',\n        [english]: 'Domain name',\n    },\n    wirelessACL: {\n        [russian]: 'Контроль доступа Wi-Fi',\n        [english]: 'Wireless ACL',\n    },\n\n    systemSettings: {\n        [russian]: 'Общие настройки',\n        [english]: 'System settings',\n    },\n    applications: {\n        [russian]: 'Приложения',\n        [english]: 'Applications',\n    },\n    usersAndAccess: {\n        [russian]: 'Пользователи и доступ',\n        [english]: 'Users and access',\n    },\n    diagnostics: {\n        [russian]: 'Диагностика',\n        [english]: 'Diagnostics',\n    },\n};\n","import { I18nCommonLabels, languages } from '../../models/i18n.model';\n\nconst { english, russian } = languages;\n\nexport const i18nCommonLabels: I18nCommonLabels = {\n    searchPlaceholderLabel: {\n        [russian]: 'Поиск настроек',\n        [english]: 'Search for settings',\n    },\n};\n","import { i18nCardsLabels } from './i18n.cards.constants';\nimport { i18nModalLabels } from './i18n.modal.constants';\nimport { i18nActionsLabels } from './i18n.actions.constants';\nimport { i18nDynamicModalLabels } from './i18n.dynamic.constants';\nimport { i18nLoginLabels } from './i18n.login.constants';\nimport { i18nNavLabels } from './i18n.navigation.constants';\nimport { i18nCommonLabels } from './i18n.common.constants';\n\nimport { I18nLabels } from '../../models/i18n.model';\n\nexport const i18nLabels: I18nLabels = {\n    ...i18nCardsLabels,\n    ...i18nModalLabels,\n    ...i18nActionsLabels,\n    ...i18nDynamicModalLabels,\n    ...i18nLoginLabels,\n    ...i18nNavLabels,\n    ...i18nCommonLabels,\n};\n","import { useMemo, useRef } from 'react';\nimport { useRecoilValue } from 'recoil';\n\nimport { i18nState } from '../recoil-state/i18n.state';\nimport { i18nLabels } from '../constants/i18n/i18n.constants';\n\nimport { Labels, languages } from '../models/i18n.model';\n\nconst getTranslatedLabel = (label: Labels, language: languages): string =>\n    i18nLabels[label] ? i18nLabels[label][language] : '';\n\nexport const useGetTranslatedLabel = (label: Labels): string => {\n    const language = useRecoilValue<languages>(i18nState);\n    return useMemo(() => getTranslatedLabel(label, language), [language, label]);\n};\n\nexport const useGetTranslatedLabels = (labels: Array<Labels>): Array<string> => {\n    const labelsRef = useRef(labels);\n    const language = useRecoilValue<languages>(i18nState);\n\n    return useMemo(() => labelsRef.current.map((label) => getTranslatedLabel(label, language)), [\n        language,\n    ]);\n};\n\nexport const useGetDynamicTranslatedLabel = (\n    label: Labels,\n    values: Array<string | number>\n): string => {\n    const language = useRecoilValue<languages>(i18nState);\n\n    return useMemo(() => {\n        let index = 0;\n        return getTranslatedLabel(label, language).replace(/{\\$}/g, () => String(values[index++]));\n    }, [language, values, label]);\n};\n","import React from 'react';\nimport './input.scss';\n\nimport { useGetTranslatedLabel } from '../../services/i18n.service';\nimport { commonLabels } from '../../models/common.model';\n\nexport type InputProps = {\n    value: string | number;\n    name: string;\n    onChange: (value: string) => void;\n    type?: string;\n    placeholder?: string;\n    className?: string;\n};\n\nexport const Input = React.memo(\n    ({ value, onChange, name, type = 'text', placeholder = '', className = '' }: InputProps) => {\n        const i18nPlaceHolderLabel = useGetTranslatedLabel(placeholder as commonLabels);\n\n        return (\n            <input\n                name={name}\n                type={type}\n                value={value}\n                className={className}\n                placeholder={i18nPlaceHolderLabel}\n                onChange={(e) => onChange(e.target.value)}\n            ></input>\n        );\n    }\n);\n","import React from 'react';\nimport './message.scss';\n\nimport { Button } from './button';\n\nexport type MessageProps = {\n    message: string;\n    type: string;\n    onClose: () => void;\n    shouldHideCloseButton?: boolean;\n};\n\nexport const Message = React.memo(\n    ({ message, type, onClose, shouldHideCloseButton = false }: MessageProps) =>\n        message ? (\n            <section className=\"message\">\n                <p className={type}>\n                    {message}\n                    {shouldHideCloseButton ? null : (\n                        <Button\n                            className=\"close-message-button\"\n                            buttonName=\"x\"\n                            buttonHandler={onClose}\n                        />\n                    )}\n                </p>\n            </section>\n        ) : null\n);\n","import { loginActionTypes } from '../constants/login.constants';\n\nexport type LoginValues = {\n    login: string;\n    password: string;\n};\n\nexport type SetLoader = (isLoading: boolean) => void;\nexport type SetErrorMessage = (errorMessage: string) => void;\nexport type Login = (loginValues: LoginValues) => void;\n\nexport type UseLoginReturnedValues = {\n    errorMessage: string;\n    hideErrorMessage: SetErrorMessage;\n    login: Login;\n};\n\nexport type LoginState = LoginValues & {\n    shouldLogin: boolean;\n    errorMessage: string;\n};\n\nexport type Action = {\n    type: loginActionTypes;\n    value?: string;\n};\n\nexport type LoginReducer = (state: LoginState, action: Action) => LoginState;\n\nexport type LoaderInfoContext = {\n    isLoading: boolean;\n    setLoader: SetLoader;\n};\n\nexport type ActionHandlers = {\n    [actionType in loginActionTypes]: (...args: any) => any;\n};\n\nexport enum loginLabels {\n    loginTitleLabel = 'loginTitleLabel',\n    resetLabel = 'resetLabel',\n    setDefaultLabel = 'setDefaultLabel',\n    loginButtonLabel = 'loginButtonLabel',\n    invalidCredentialsMessageLabel = 'invalidCredentialsMessageLabel',\n}\n","import React from 'react';\n\nimport { Button } from '../common/button';\nimport { Input } from '../common/input';\nimport { Message } from '../common/message';\n\nimport { LoginLabels } from '../../services/i18n.login.service';\n\nimport { loginActionTypes } from '../../constants/login.constants';\n\nimport { LoginState } from '../../models/login.model';\n\nexport type LoginFormProps = {\n    state: LoginState;\n    i18nLabels: LoginLabels;\n    dispatch: React.Dispatch<any>;\n};\n\nconst { cleanup, cleanuperror, setdefault, validate } = loginActionTypes;\n\nconst loginInputName = 'login';\nconst passwordInputName = 'password';\n\nexport const LoginForm = React.memo(\n    ({ i18nLabels, dispatch, state: { login, password } }: LoginFormProps) => (\n        <section className=\"login\">\n            <h2 className=\"_aligned\">{i18nLabels.loginTitleLabel}</h2>\n            <Button\n                className=\"hint-button hint-button__left\"\n                buttonName={i18nLabels.resetLabel}\n                buttonHandler={() => dispatch({ type: cleanup })}\n            />\n            <Button\n                className=\"hint-button  hint-button__right\"\n                buttonName={i18nLabels.setDefaultLabel}\n                buttonHandler={() => dispatch({ type: setdefault })}\n            />\n            <section className=\"login-form\">\n                <Input\n                    name={loginInputName}\n                    value={login}\n                    onChange={(value: string) => dispatch({ type: loginActionTypes.login, value })}\n                />\n                <Input\n                    name={passwordInputName}\n                    value={password}\n                    onChange={(value: string) =>\n                        dispatch({ type: loginActionTypes.password, value })\n                    }\n                    type=\"password\"\n                />\n                <Button\n                    buttonName={i18nLabels.loginButtonLabel}\n                    buttonHandler={() => dispatch({ type: validate })}\n                />\n                <Message\n                    type=\"error\"\n                    message={i18nLabels.invalidCredentialsMessageLabel}\n                    onClose={() => dispatch({ type: cleanuperror })}\n                />\n            </section>\n        </section>\n    )\n);\n","import { Cards } from '../models/dashboard.model';\n\nexport const invalidCardsMessage = 'The cards loading was failed';\n\nexport const defaultCards: Cards = {\n    leftCards: [],\n    rightCards: [],\n};\n\nexport enum cardTypes {\n    applicationType = 'applicationType',\n    systemType = 'systemType',\n    wifiType = 'wifiType',\n    portType = 'portType',\n    internetType = 'internetType',\n}\nexport enum connectionTypes {\n    wired = 'wired',\n    wifi = 'wifi',\n}\n\nexport const updateActiveParamsInterval = 1000;\nexport const internetRequestDelay = 3000;\n\nexport enum trafficType {\n    upload = 'upload',\n    download = 'download',\n}\n\nexport const trafficTimeFormat = 'HH:mm';\n\nexport enum internetDetailsType {\n    default = 'default',\n    reboot = 'reboot',\n    configuration = 'configuration',\n    download = 'download',\n    upload = 'upload',\n    sent = 'sent',\n    received = 'received',\n}\n\nexport const mModifier = 1000;\nexport const bModifier = 1;\n\nexport const countOfDisplayedNodes = 100;\n","import {\n    initialCredentials,\n    defaultCredentials,\n    minCountOfLoginSymbols,\n    minCountOfPasswordSymbols,\n    loginActionTypes,\n} from '../constants/login.constants';\nimport {\n    LoginReducer,\n    LoginState,\n    Action,\n    ActionHandlers,\n    loginLabels,\n} from '../models/login.model';\n\nconst {\n    cleanup,\n    cleanuperror,\n    cleanuplogin,\n    login,\n    password,\n    setdefault,\n    validate,\n} = loginActionTypes;\n\nexport const actionHandlers: ActionHandlers = {\n    [login]: (login: string) => ({ login }),\n    [password]: (password: string) => ({ password }),\n    [cleanup]: () => ({\n        ...initialCredentials,\n        errorMessage: '',\n    }),\n    [setdefault]: () => ({\n        ...defaultCredentials,\n        errorMessage: '',\n    }),\n    [cleanuperror]: () => ({ errorMessage: '' }),\n    [cleanuplogin]: (errorMessage: string) => ({\n        shouldLogin: false,\n        errorMessage,\n    }),\n    [validate]: (v: null, { login, password }: LoginState) => {\n        if (\n            login.trim().length > minCountOfLoginSymbols &&\n            password.trim().length > minCountOfPasswordSymbols\n        ) {\n            return {\n                shouldLogin: true,\n                errorMessage: '',\n            };\n        }\n\n        return {\n            shouldLogin: false,\n            errorMessage: loginLabels.invalidCredentialsMessageLabel,\n        };\n    },\n};\n\nexport const loginReducer: LoginReducer = (\n    state: LoginState,\n    { type, value }: Action\n): LoginState => {\n    const actionHandler = actionHandlers[type];\n    if (actionHandler) {\n        return {\n            ...state,\n            ...actionHandler(value, state),\n        };\n    }\n\n    return state;\n};\n","export type SuspenseResource<R> = {\n    read(): R;\n};\n\nexport const suspenseFetch = <R>(promise: Promise<R>): SuspenseResource<R | undefined> => {\n    return wrapPromise<R>(promise);\n};\n\nconst wrapPromise = <R>(promise: Promise<R>) => {\n    let status = 'pending';\n    let result: R;\n\n    const suspender = promise.then(\n        (r) => {\n            status = 'success';\n            result = r;\n        },\n        (e) => {\n            status = 'error';\n            result = e;\n        }\n    );\n    return {\n        read(): R | undefined {\n            if (status === 'pending') {\n                throw suspender;\n            } else if (status === 'error') {\n                throw result;\n            } else if (status === 'success') {\n                return result;\n            }\n        },\n    };\n};\n","import React, { useContext } from 'react';\nimport './loader.scss';\n\nimport { LoaderContext } from '../../context/loader.context';\n\nexport const ContextLoader = React.memo(() => {\n    const { isLoading } = useContext(LoaderContext);\n\n    return isLoading ? <section className=\"loader\"></section> : null;\n});\n\nexport const SuspenseLoader = () => <section className=\"loader\"></section>;\n","export enum modalContentTypes {\n    connectionContentType = 'connectionContentType',\n}\n\nexport enum connectionActionTypes {\n    copyType = 'copyType',\n    printType = 'printType',\n    addLogoType = 'addLogoType',\n    wpsType = 'wpsType',\n}\n","export enum cardsLabels {\n    channelLabel = 'channelLabel',\n    showConnectionInfoButtonLabel = 'showConnectionInfoButtonLabel',\n    download = 'download',\n    upload = 'upload',\n    providerHeaderLabel = 'providerHeaderLabel',\n    moreDetailsLabel = 'moreDetailsLabel',\n    hiddenDetailsLabel = 'hiddenDetailsLabel',\n    applicationsCardTitleLabel = 'applicationsCardTitleLabel',\n    systemCardTitleLabel = 'systemCardTitleLabel',\n    homeWiFiCardTitleLabel = 'homeWiFiCardTitleLabel',\n    guestWiFiCardTitleLabel = 'guestWiFiCardTitleLabel',\n    networkPortsCardTitleLabel = 'networkPortsCardTitleLabel',\n    internetCardTitleLabel = 'internetCardTitleLabel',\n    hasNoApplicationsMessageLabel = 'hasNoApplicationsMessageLabel',\n    onlineDeviceTitleLabel = 'onlineDeviceTitleLabel',\n    wifiConnectionTypeMessageLabel = 'wifiConnectionTypeMessageLabel',\n    wiredConnectionTypeMessageLabel = 'wiredConnectionTypeMessageLabel',\n    connectedLabel = 'connectedLabel',\n    daysLabel = 'daysLabel',\n\n    modelLabel = 'modelLabel',\n    serviceTagLabel = 'serviceTagLabel',\n    osVersionLabel = 'osVersionLabel',\n    autoUpdateLabel = 'autoUpdateLabel',\n    upTimeLabel = 'upTimeLabel',\n    currentTimeLabel = 'currentTimeLabel',\n    cpuUsageLabel = 'cpuUsageLabel',\n    ramUsageLabel = 'ramUsageLabel',\n\n    enabledLabel = 'enabledLabel',\n    kbitsLabel = 'kbitsLabel',\n    mbitsLabel = 'mbitsLabel',\n    mbitLabel = 'mbitLabel',\n\n    usingEthernetLabel = 'usingEthernetLabel',\n\n    statusLabel = 'statusLabel',\n    internetSafetyLabel = 'internetSafetyLabel',\n    authenticationTypeLabel = 'authenticationTypeLabel',\n    ipAddressLabel = 'ipAddressLabel',\n    subnetMaskLabel = 'subnetMaskLabel',\n    macAddressLabel = 'macAddressLabel',\n    downloadLabel = 'downloadLabel',\n    uploadLabel = 'uploadLabel',\n    receivedLabel = 'receivedLabel',\n    sentLabel = 'sentLabel',\n    dnsServersLabel = 'dnsServersLabel',\n\n    connectionEstablishedLabel = 'connectionEstablishedLabel',\n    rebootLabel = 'rebootLabel',\n    configureLabel = 'configureLabel',\n    adGuardIsEnabledLabel = 'adGuardIsEnabledLabel',\n}\n","import { CardLoaderService } from '../services/card-loader.service';\nimport {\n    cardTypes,\n    connectionTypes,\n    internetDetailsType,\n    trafficType,\n} from '../constants/cards.constants';\nimport { connectionActionTypes, modalContentTypes } from '../constants/modal.constants';\n\nimport { cardsLabels } from './cards.model';\n\nexport type DashboardProps = {\n    cardLoader?: CardLoaderService;\n};\nexport type BaseCard = {\n    cardId: string;\n    type: cardTypes;\n    title: cardsLabels;\n};\n\nexport enum paramTypes {\n    inactive = 'inactive',\n    uptime = 'uptime',\n    currentTime = 'currentTime',\n    cpuUsage = 'cpuUsage',\n    ramUsage = 'ramUsage',\n}\n\nexport type SystemParamValue = string | number | Date;\nexport type SystemParam = {\n    label: cardsLabels;\n    value: SystemParamValue;\n    isActive: boolean;\n    paramType: paramTypes;\n};\n\nexport type SystemParams = Array<SystemParam>;\nexport type UpdateParams = (systemParams: SystemParams) => void;\n\nexport type SystemCardContent = {\n    startedTime: string;\n    systemParams: SystemParams;\n};\n\nexport type SystemCard = BaseCard & {\n    cardContent: SystemCardContent;\n};\n\nexport type DynamicParamProps = {\n    systemParams: SystemParams;\n    startedTime: string;\n};\n\nexport type SplitParams = {\n    staticSystemParams: SystemParams;\n    dynamicSystemParams: SystemParams;\n};\n\nexport type ApplicationsCardContent = {\n    applications: Array<any>;\n};\n\nexport type ApplicationsCard = BaseCard & {\n    cardContent: ApplicationsCardContent;\n};\n\nexport type ConnectionAction = {\n    isActive: boolean;\n    actionType: connectionActionTypes;\n};\n\nexport type ConnectionInfo = {\n    type: modalContentTypes;\n    url: string;\n    credentials: {\n        networkId: string;\n        password: string | null;\n    };\n    actions: {\n        main: Array<ConnectionAction>;\n        WPS: ConnectionAction;\n    };\n};\n\nexport type Connection = {\n    connectionId: string;\n    name: string;\n    isActive: boolean;\n    range: string;\n    channel: number;\n    connectionInfo: ConnectionInfo;\n};\nexport type ConnectionProps = {\n    connection: Connection;\n};\n\nexport type OnlineDevice = {\n    key: string;\n    type: connectionTypes;\n    countOfConnections: number;\n    isHome: boolean;\n};\nexport type OnlineDeviceProps = {\n    onlineDevice: OnlineDevice;\n};\n\nexport type WiFiCardContent = {\n    connections: Array<Connection>;\n    onlineDevices: Array<OnlineDevice>;\n};\n\nexport type WiFiCard = BaseCard & {\n    cardContent: WiFiCardContent;\n};\n\nexport type Port = {\n    portId: string;\n    portType: string;\n    portSpeed: number;\n    portUnit: string;\n    isActive: boolean;\n};\n\nexport type Ports = Array<Port>;\n\nexport type NetworkPortsCardContent = {\n    networkPortId: string;\n    ports: Ports;\n};\n\nexport type NetworkPortsCard = BaseCard & {\n    cardContent: NetworkPortsCardContent;\n};\n\nexport type InternetProvider = {\n    providerLabel: cardsLabels;\n    providerType: string;\n};\n\nexport type TrafficValue = {\n    value: number;\n    unit: cardsLabels;\n};\nexport type TrafficValues = Array<TrafficValue>;\n\nexport type Traffic = {\n    type: trafficType;\n    max: TrafficValue;\n    current: TrafficValue;\n};\n\nexport type TrafficInfo = {\n    download: Traffic;\n    upload: Traffic;\n};\n\nexport type InternetDetail = {\n    label: cardsLabels;\n    value: string | number;\n    type: internetDetailsType;\n};\nexport type InternetDetails = Array<InternetDetail>;\n\nexport type InternetCardContent = {\n    main: {\n        provider: InternetProvider;\n        trafficInfo: TrafficInfo;\n        startedTime: string;\n    };\n    details: InternetDetails;\n};\n\nexport type InternetCard = BaseCard & {\n    cardContent: InternetCardContent;\n};\n\nexport type Card = SystemCard | ApplicationsCard | WiFiCard | NetworkPortsCard | InternetCard;\nexport type CardContent =\n    | SystemCardContent\n    | ApplicationsCardContent\n    | WiFiCardContent\n    | NetworkPortsCardContent\n    | InternetCardContent;\n\nexport type CardsResponse = {\n    isLoading: boolean;\n    leftCards: Array<Card>;\n    rightCards: Array<Card>;\n};\n\nexport type Cards = {\n    leftCards: Array<Card>;\n    rightCards: Array<Card>;\n};\n\nexport type CardsProps = Cards;\nexport type CardProps = {\n    card: Card;\n};\n\nexport type CardsComponents = {\n    [cardType in cardTypes]: (card: CardContent) => JSX.Element;\n};\n","import {\n    cardTypes,\n    connectionTypes,\n    internetDetailsType,\n    trafficType,\n} from '../constants/cards.constants';\nimport { connectionActionTypes, modalContentTypes } from '../constants/modal.constants';\n\nimport { cardsLabels } from '../models/cards.model';\nimport {\n    ApplicationsCard,\n    Cards,\n    InternetCard,\n    NetworkPortsCard,\n    paramTypes,\n    SystemCard,\n    WiFiCard,\n} from '../models/dashboard.model';\n\nexport const applicationsCatrd: ApplicationsCard = {\n    cardId: 'applicationsCatrd_1',\n    type: cardTypes.applicationType,\n    title: cardsLabels.applicationsCardTitleLabel,\n    cardContent: {\n        applications: [],\n    },\n};\n\nconst startedTime = '7/2/2020';\nexport const systemCatrd: SystemCard = {\n    cardId: 'systemCatrd_1',\n    type: cardTypes.systemType,\n    title: cardsLabels.systemCardTitleLabel,\n    cardContent: {\n        startedTime,\n        systemParams: [\n            {\n                label: cardsLabels.modelLabel,\n                value: 'Speedster (KN-3010)',\n                isActive: false,\n                paramType: paramTypes.inactive,\n            },\n            {\n                label: cardsLabels.serviceTagLabel,\n                value: '067-483-550-015-477',\n                isActive: false,\n                paramType: paramTypes.inactive,\n            },\n            {\n                label: cardsLabels.osVersionLabel,\n                value: '3.4.6',\n                isActive: false,\n                paramType: paramTypes.inactive,\n            },\n            {\n                label: cardsLabels.autoUpdateLabel,\n                value: 'enabledLabel',\n                isActive: false,\n                paramType: paramTypes.inactive,\n            },\n            {\n                label: cardsLabels.upTimeLabel,\n                value: '',\n                isActive: true,\n                paramType: paramTypes.uptime,\n            },\n            {\n                label: cardsLabels.currentTimeLabel,\n                value: '',\n                isActive: true,\n                paramType: paramTypes.currentTime,\n            },\n            {\n                label: cardsLabels.cpuUsageLabel,\n                value: '4%',\n                isActive: true,\n                paramType: paramTypes.cpuUsage,\n            },\n            {\n                label: cardsLabels.ramUsageLabel,\n                value: '40% (51/128 Mbytes)',\n                isActive: true,\n                paramType: paramTypes.ramUsage,\n            },\n        ],\n    },\n};\n\nexport const homeWiFiCard: WiFiCard = {\n    cardId: 'homeWiFiCard_ 1',\n    type: cardTypes.wifiType,\n    title: cardsLabels.homeWiFiCardTitleLabel,\n    cardContent: {\n        connections: [\n            {\n                connectionId: 'connection_1',\n                name: 'Keenetic-9672',\n                isActive: true,\n                range: '2.4 GHz',\n                channel: 9,\n                connectionInfo: {\n                    type: modalContentTypes.connectionContentType,\n                    url: 'https://url.com/123',\n                    credentials: {\n                        networkId: 'N ET WO R K iD',\n                        password: 'network password',\n                    },\n                    actions: {\n                        WPS: {\n                            actionType: connectionActionTypes.wpsType,\n                            isActive: true,\n                        },\n                        main: [\n                            {\n                                actionType: connectionActionTypes.copyType,\n                                isActive: true,\n                            },\n                            {\n                                actionType: connectionActionTypes.printType,\n                                isActive: true,\n                            },\n                            {\n                                actionType: connectionActionTypes.addLogoType,\n                                isActive: true,\n                            },\n                        ],\n                    },\n                },\n            },\n            {\n                connectionId: 'connection_2',\n                name: 'Keenetic-9672',\n                isActive: true,\n                range: '5 GHz',\n                channel: 149,\n                connectionInfo: {\n                    type: modalContentTypes.connectionContentType,\n                    url: 'https://url.com/1321',\n                    credentials: {\n                        networkId: 'N ET WO R K iD 321',\n                        password: 'network password 321',\n                    },\n                    actions: {\n                        WPS: {\n                            actionType: connectionActionTypes.wpsType,\n                            isActive: true,\n                        },\n                        main: [\n                            {\n                                actionType: connectionActionTypes.copyType,\n                                isActive: true,\n                            },\n                            {\n                                actionType: connectionActionTypes.printType,\n                                isActive: true,\n                            },\n                            {\n                                actionType: connectionActionTypes.addLogoType,\n                                isActive: true,\n                            },\n                        ],\n                    },\n                },\n            },\n        ],\n        onlineDevices: [\n            {\n                key: 'device_1',\n                type: connectionTypes.wired,\n                countOfConnections: 0,\n                isHome: true,\n            },\n            {\n                key: 'device_2',\n                type: connectionTypes.wifi,\n                countOfConnections: 6,\n                isHome: true,\n            },\n        ],\n    },\n};\n\nexport const guestWiFiCard: WiFiCard = {\n    cardId: 'guestWiFiCard_ 1',\n    type: cardTypes.wifiType,\n    title: cardsLabels.guestWiFiCardTitleLabel,\n    cardContent: {\n        connections: [\n            {\n                connectionId: 'connection_1',\n                name: 'Guest',\n                isActive: false,\n                range: '2.4 GHz',\n                channel: 9,\n                connectionInfo: {\n                    type: modalContentTypes.connectionContentType,\n                    url: 'https://url.com/1321123123',\n                    credentials: {\n                        networkId: 'N ET WO R K iD 1231231',\n                        password: 'network password 123123123',\n                    },\n                    actions: {\n                        WPS: {\n                            actionType: connectionActionTypes.wpsType,\n                            isActive: false,\n                        },\n                        main: [\n                            {\n                                actionType: connectionActionTypes.copyType,\n                                isActive: false,\n                            },\n                            {\n                                actionType: connectionActionTypes.printType,\n                                isActive: true,\n                            },\n                            {\n                                actionType: connectionActionTypes.addLogoType,\n                                isActive: true,\n                            },\n                        ],\n                    },\n                },\n            },\n            {\n                connectionId: 'connection_2',\n                name: 'Guest',\n                isActive: false,\n                range: '5 GHz',\n                channel: 149,\n                connectionInfo: {\n                    type: modalContentTypes.connectionContentType,\n                    url: 'https://url.com/1321123123',\n                    credentials: {\n                        networkId: 'N ET 6423',\n                        password: 'network password 00123',\n                    },\n                    actions: {\n                        WPS: {\n                            actionType: connectionActionTypes.wpsType,\n                            isActive: false,\n                        },\n                        main: [\n                            {\n                                actionType: connectionActionTypes.copyType,\n                                isActive: false,\n                            },\n                            {\n                                actionType: connectionActionTypes.printType,\n                                isActive: true,\n                            },\n                            {\n                                actionType: connectionActionTypes.addLogoType,\n                                isActive: true,\n                            },\n                        ],\n                    },\n                },\n            },\n        ],\n        onlineDevices: [\n            {\n                key: 'device_1',\n                type: connectionTypes.wired,\n                countOfConnections: 0,\n                isHome: false,\n            },\n            {\n                key: 'device_2',\n                type: connectionTypes.wifi,\n                countOfConnections: 0,\n                isHome: false,\n            },\n        ],\n    },\n};\n\nexport const networkPortsCard: NetworkPortsCard = {\n    cardId: 'networkPorts-1',\n    type: cardTypes.portType,\n    title: cardsLabels.networkPortsCardTitleLabel,\n    cardContent: {\n        networkPortId: 'port-id_0',\n        ports: [\n            {\n                isActive: true,\n                portId: 'port-id_0',\n                portSpeed: 100,\n                portType: 'FDX',\n                portUnit: 'M',\n            },\n            {\n                isActive: true,\n                portId: 'port-id_1',\n                portSpeed: 100,\n                portType: 'FDX',\n                portUnit: 'M',\n            },\n            {\n                isActive: false,\n                portId: 'port-id_2',\n                portSpeed: 0,\n                portType: '',\n                portUnit: '',\n            },\n            {\n                isActive: false,\n                portId: 'port-id_3',\n                portSpeed: 0,\n                portType: '',\n                portUnit: '',\n            },\n            {\n                isActive: false,\n                portId: 'port-id_4',\n                portSpeed: 0,\n                portType: '',\n                portUnit: '',\n            },\n        ],\n    },\n};\n\nexport const internetCard: InternetCard = {\n    cardId: 'internetCard_ 1',\n    type: cardTypes.internetType,\n    title: cardsLabels.internetCardTitleLabel,\n    cardContent: {\n        main: {\n            startedTime,\n            provider: {\n                providerLabel: cardsLabels.usingEthernetLabel,\n                providerType: 'PPPoE',\n            },\n            trafficInfo: {\n                download: {\n                    current: {\n                        unit: cardsLabels.kbitsLabel,\n                        value: 0,\n                    },\n                    max: {\n                        unit: cardsLabels.mbitsLabel,\n                        value: 100,\n                    },\n                    type: trafficType.download,\n                },\n                upload: {\n                    current: {\n                        unit: cardsLabels.kbitsLabel,\n                        value: 0,\n                    },\n                    max: {\n                        unit: cardsLabels.mbitsLabel,\n                        value: 50,\n                    },\n                    type: trafficType.upload,\n                },\n            },\n        },\n        details: [\n            {\n                label: cardsLabels.statusLabel,\n                type: internetDetailsType.reboot,\n                value: cardsLabels.connectionEstablishedLabel,\n            },\n            {\n                label: cardsLabels.internetSafetyLabel,\n                type: internetDetailsType.configuration,\n                value: cardsLabels.adGuardIsEnabledLabel,\n            },\n            {\n                label: cardsLabels.authenticationTypeLabel,\n                type: internetDetailsType.default,\n                value: 'PPPoE',\n            },\n            {\n                label: cardsLabels.ipAddressLabel,\n                type: internetDetailsType.default,\n                value: '192.168.1.1',\n            },\n            {\n                label: cardsLabels.subnetMaskLabel,\n                type: internetDetailsType.default,\n                value: '125.125.125.125',\n            },\n            {\n                label: cardsLabels.macAddressLabel,\n                type: internetDetailsType.default,\n                value: '13:ld:78:c1:5d:09',\n            },\n            {\n                label: cardsLabels.downloadLabel,\n                type: internetDetailsType.download,\n                value: '',\n            },\n            {\n                label: cardsLabels.uploadLabel,\n                type: internetDetailsType.upload,\n                value: '',\n            },\n            {\n                label: cardsLabels.receivedLabel,\n                type: internetDetailsType.received,\n                value: 0,\n            },\n            {\n                label: cardsLabels.sentLabel,\n                type: internetDetailsType.sent,\n                value: 0,\n            },\n            {\n                label: cardsLabels.dnsServersLabel,\n                type: internetDetailsType.default,\n                value: '543.217.093.5',\n            },\n        ],\n    },\n};\nexport const cardsMocks: Cards = {\n    leftCards: [internetCard, applicationsCatrd, systemCatrd],\n    rightCards: [homeWiFiCard, guestWiFiCard, networkPortsCard],\n};\n","export enum navActionTypes {\n    logout = 'logout',\n    help = 'help',\n    translate = 'translate',\n    triggerNav = 'triggerNav',\n\n    dashboard = 'dashboard',\n    traffic = 'traffic',\n\n    wired = 'wired',\n    wirelessISP = 'wirelessISP',\n    otherConnections = 'otherConnections',\n    connectionPriorities = 'connectionPriorities',\n\n    deviceList = 'deviceList',\n    homeSegment = 'homeSegment',\n    guestSegment = 'guestSegment',\n    wifiSegment = 'wifiSegment',\n\n    internetSafety = 'internetSafety',\n    firewall = 'firewall',\n    forwarding = 'forwarding',\n    routing = 'routing',\n    domainName = 'domainName',\n    wirelessACL = 'wirelessACL',\n\n    systemSettings = 'systemSettings',\n    applications = 'applications',\n    usersAndAccess = 'usersAndAccess',\n    diagnostics = 'diagnostics',\n}\n\nexport enum navSectionTypes {\n    status = 'status',\n    internet = 'internet',\n    network = 'network',\n    rules = 'rules',\n    management = 'management',\n    none = 'none',\n    all = 'all',\n}\n\nexport type navLabels = navSectionTypes | navActionTypes;\n\nexport type NavSection = {\n    type: navSectionTypes;\n    linkActions: LinkActions;\n    isExpanded: boolean;\n};\nexport type NavSections = Array<NavSection>;\n\nexport type LinkAction = {\n    type: navActionTypes;\n};\nexport type LinkActions = Array<LinkAction>;\n\nexport type NavigationData = {\n    sections: NavSections;\n    footer: {\n        logoutAction: LinkAction;\n        linkActions: LinkActions;\n        triggerNavAction: LinkAction;\n    };\n};\n\nexport type NavSectionTitles = {\n    [title in navSectionTypes]: string;\n};\n\nexport type NavActionLabels = {\n    [label in navActionTypes]: string;\n};\n\nexport type NavActionLinks = {\n    [link in navActionTypes]: string;\n};\n\nexport type SectionUrls = {\n    type: navSectionTypes;\n    urls: Array<string>;\n};\n\nexport type SectionsUrls = Array<SectionUrls>;\n\nexport type NavigationBarProps = {\n    isNavBarExpanded: boolean;\n    toggleNavBar: () => void;\n};\n","import { defaultCredentials } from '../constants/login.constants';\nimport { invalidCardsMessage } from '../constants/cards.constants';\n\nimport { cardsMocks } from '../mock/cards.mock';\n\nimport { loginLabels, LoginValues } from '../models/login.model';\nimport { Cards } from '../models/dashboard.model';\nimport { ErrorHandler } from '../models/concurrency.model';\n\nexport const login = ({ login, password }: LoginValues): Promise<string> => {\n    return new Promise((resolve, reject) =>\n        setTimeout(() => {\n            if (login === defaultCredentials.login && password === defaultCredentials.password) {\n                resolve('userToken');\n            } else {\n                reject(loginLabels.invalidCredentialsMessageLabel);\n            }\n        }, 1000)\n    );\n};\n\nexport const fetchDashboard = (userToken: string): Promise<Cards> =>\n    new Promise((resolve, reject) =>\n        setTimeout(() => {\n            if (userToken) {\n                return resolve(cardsMocks);\n            }\n\n            reject(invalidCardsMessage);\n        }, 2000)\n    );\n\nexport const loadDashboard = (\n    loginValues: LoginValues,\n    errorHandler: ErrorHandler\n): Promise<Cards | undefined> => login(loginValues).then(fetchDashboard).catch(errorHandler);\n","import React from 'react';\nimport { Message } from '../../common/message';\n\nexport type UnknownCardProps = {\n    type: string;\n};\nexport const UnknownCard = ({ type }: UnknownCardProps) => (\n    <section className=\"unknown-card\">\n        <Message\n            message={`card with type: ${type} is not found`}\n            type=\"error\"\n            onClose={() => {}}\n            shouldHideCloseButton\n        />\n    </section>\n);\n","import moment from 'moment';\n\nimport {\n    paramTypes,\n    SystemParam,\n    SystemParams,\n    SystemParamValue,\n    UpdateParams,\n} from '../models/dashboard.model';\n\nexport type ParamHandlerArguments = {\n    value: SystemParamValue;\n    startedTime: string;\n    daysLabel?: string;\n    units?: string;\n};\nexport type ParamHandlers = {\n    [key in paramTypes]: (paramHandlerArguments: ParamHandlerArguments) => SystemParamValue;\n};\n\nexport const updateRAMValue = ({ value, units }: ParamHandlerArguments): SystemParamValue => {\n    const allMemory = parseFloat((value as string).split('/')[1]);\n    const usedRAMinPercentage = Math.random();\n    const usedRAMinUnits = Math.round(usedRAMinPercentage * allMemory);\n\n    return `${Math.floor(usedRAMinPercentage * 100)}% (${usedRAMinUnits}/${allMemory} ${units})`;\n};\n\nexport const updateCPUValue = (): SystemParamValue => {\n    return `${Math.floor(Math.random() * 100)}%`;\n};\n\nexport const updateUptime = ({\n    startedTime,\n    daysLabel,\n}: ParamHandlerArguments): SystemParamValue => {\n    const diff = moment(moment().diff(startedTime));\n\n    return `${diff.format('D')} ${daysLabel} ${diff.format('H:mm:ss')}`;\n};\n\nexport const getCurrentTime = (): SystemParamValue => {\n    const now = moment();\n    return now.format('M/DD/YYYY H:mm:ss');\n};\n\nexport const inactive = (): SystemParamValue => '';\n\nconst paramHandlers: ParamHandlers = {\n    [paramTypes.ramUsage]: updateRAMValue,\n    [paramTypes.cpuUsage]: updateCPUValue,\n    [paramTypes.uptime]: updateUptime,\n    [paramTypes.currentTime]: getCurrentTime,\n    [paramTypes.inactive]: inactive,\n};\n\nexport const updateParamsMock = (\n    activeParamTypes: SystemParams,\n    updateParams: UpdateParams,\n    startedTime: string = '',\n    daysLabel: string = '',\n    units: string = ''\n): void =>\n    updateParams(\n        activeParamTypes.map(\n            (param: SystemParam): SystemParam => ({\n                ...param,\n                value: paramHandlers[param.paramType]({\n                    value: param.value,\n                    startedTime,\n                    daysLabel,\n                    units,\n                }),\n            })\n        )\n    );\n","import React, { useEffect, useMemo, useState } from 'react';\n\nimport { splitSystemParams } from '../../../services/system-card.service';\nimport { updateParamsMock } from '../../../services/system-params.service';\nimport { useGetTranslatedLabels } from '../../../services/i18n.service';\n\nimport { updateActiveParamsInterval } from '../../../constants/cards.constants';\n\nimport { cardsLabels } from '../../../models/cards.model';\nimport {\n    CardContent,\n    DynamicParamProps,\n    SystemCardContent,\n    SystemParam,\n    SystemParams,\n} from '../../../models/dashboard.model';\n\nexport const ParamRenderer = React.memo(({ label, value }: SystemParam) => {\n    const [i18nLabel, i18nValue] = useGetTranslatedLabels([label, value as cardsLabels]);\n    return (\n        <section className=\"param-pair\">\n            <p className=\"param-pair__label\">{i18nLabel}</p>\n            <p className=\"param-pair__value\">{i18nValue || value}</p>\n        </section>\n    );\n});\n\nexport const renderSystemParams = (systemParams: SystemParams) =>\n    systemParams.map((systemParam: SystemParam) => (\n        <ParamRenderer key={systemParam.label} {...systemParam} />\n    ));\n\nexport const DynamicParams = ({ systemParams, startedTime }: DynamicParamProps) => {\n    const [params, updateParams] = useState(systemParams);\n    const [daysLabel, mbitLabel] = useGetTranslatedLabels([\n        cardsLabels.daysLabel,\n        cardsLabels.mbitLabel,\n    ]);\n\n    useEffect(() => {\n        const timerId = setInterval(() => {\n            updateParamsMock(params, updateParams, startedTime, daysLabel, mbitLabel);\n        }, updateActiveParamsInterval);\n        return () => clearInterval(timerId);\n    }, [updateParams, params, startedTime, daysLabel, mbitLabel]);\n\n    return <>{renderSystemParams(params)}</>;\n};\n\nexport const SystemCardComponent = (cardContent: CardContent) => {\n    const { systemParams, startedTime } = cardContent as SystemCardContent;\n\n    const { staticSystemParams, dynamicSystemParams } = useMemo(\n        () => splitSystemParams(systemParams),\n        [systemParams]\n    );\n    return (\n        <section className=\"card-content\">\n            {renderSystemParams(staticSystemParams)}\n            <DynamicParams systemParams={dynamicSystemParams} startedTime={startedTime} />\n        </section>\n    );\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useGetTranslatedLabel } from '../../../services/i18n.service';\nimport { connectionTypes } from '../../../constants/cards.constants';\n\nimport { OnlineDeviceProps } from '../../../models/dashboard.model';\nimport { cardsLabels } from '../../../models/cards.model';\n\nconst getConnectionModifier = (isHome: boolean) =>\n    isHome ? 'connections-count__home' : 'connections-count__guest';\n\nexport const OnlineDeviceComponent = React.memo(\n    ({ onlineDevice: { countOfConnections, type, isHome } }: OnlineDeviceProps) => {\n        const label =\n            type === connectionTypes.wifi\n                ? cardsLabels.wifiConnectionTypeMessageLabel\n                : cardsLabels.wiredConnectionTypeMessageLabel;\n        const deviseTypeLabel = useGetTranslatedLabel(label);\n\n        return (\n            <section className=\"online-device\">\n                <Link\n                    to={'/controlPanel/devicesList'}\n                    className={`connections-count ${getConnectionModifier(isHome)}`}\n                >\n                    {countOfConnections}\n                    {countOfConnections ? (\n                        <span className=\"connections-count__hint\">{countOfConnections}</span>\n                    ) : null}\n                </Link>\n                <p className=\"device-type\">{deviseTypeLabel}</p>\n            </section>\n        );\n    }\n);\n","import React from 'react';\nimport './checkbox.scss';\n\nexport type CheckboxProps = {\n    isDisable: boolean;\n    isActive: boolean;\n    triggerCheckbox: (isActive: boolean) => void;\n};\n\nconst setCheckboxClassName = (isActive: boolean) =>\n    isActive ? 'checkbox__active' : 'checkbox__inactive';\nconst setCheckboxBarClassName = (isActive: boolean) =>\n    isActive ? 'checkbox--bar__active' : 'checkbox--bar__inactive';\n\nconst setCheckboxClassNameDisabled = (isDisable: boolean) =>\n    isDisable ? 'checkbox__disabled' : 'checkbox__enabled';\nexport const Checkbox = React.memo(({ isActive, triggerCheckbox, isDisable }: CheckboxProps) => (\n    <section\n        className={`checkbox ${setCheckboxClassName(isActive)} ${setCheckboxClassNameDisabled(\n            isDisable\n        )}`}\n    >\n        <span\n            onClick={() => !isDisable && triggerCheckbox(!isActive)}\n            className={`checkbox--bar ${setCheckboxBarClassName(isActive)}`}\n        ></span>\n    </section>\n));\n","import React, { useState, PropsWithChildren } from 'react';\nimport { ModalInfoContext, ModalInfo } from '../models/modals.model';\n\nexport const ModalContext = React.createContext<ModalInfoContext>(\n    (null as unknown) as ModalInfoContext\n);\n\nexport const WithModalContext = ({ children }: PropsWithChildren<{}>) => {\n    const [modalInfo, setModal] = useState(null as ModalInfo);\n\n    return (\n        <ModalContext.Provider value={{ modalInfo, setModal }}>{children}</ModalContext.Provider>\n    );\n};\n","import { ConnectionAction, ConnectionInfo } from '../models/dashboard.model';\nimport { ModalInfo } from '../models/modals.model';\nimport { connectionActionTypes } from '../constants/modal.constants';\n\nconst alwaysActiveConnectionActionTypes = [\n    connectionActionTypes.addLogoType,\n    connectionActionTypes.printType,\n];\n\nexport const setIsActiveActionStatus = (\n    { actionType, isActive }: ConnectionAction,\n    connectionStatus: boolean\n): ConnectionAction => ({\n    actionType,\n    isActive: connectionStatus ? isActive : false,\n});\n\nexport const getConnectionModalInfo = (\n    connectionInfo: ConnectionInfo,\n    name: string,\n    range: string,\n    connectionStatus: boolean\n): ModalInfo => ({\n    ...connectionInfo,\n    name,\n    range,\n    actions: {\n        WPS: setIsActiveActionStatus(connectionInfo.actions.WPS, connectionStatus),\n        main: connectionInfo.actions.main.map((action) =>\n            alwaysActiveConnectionActionTypes.includes(action.actionType)\n                ? action\n                : setIsActiveActionStatus(action, connectionStatus)\n        ),\n    },\n});\n","import { useCallback, useContext, useState } from 'react';\n\nimport { LoaderContext } from '../../../context/loader.context';\nimport { ModalContext } from '../../../context/modal.context';\n\nimport { getConnectionModalInfo } from '../../../context/modal.connection.actions.transformer';\n\nimport { ConnectionInfo } from '../../../models/dashboard.model';\n\nexport const useTriggerCheckbox = (connectionId: string, isActive: boolean) => {\n    const { setLoader } = useContext(LoaderContext);\n    const [connectionStatus, setConnectionStatus] = useState(isActive);\n    const [isWaiting, setWaitingStatus] = useState(false);\n\n    const triggerCheckbox = useCallback(\n        async (connectionStatus: boolean) => {\n            setConnectionStatus(connectionStatus);\n\n            setWaitingStatus(true);\n            setLoader(true);\n            try {\n                await new Promise((res) => setTimeout(() => res(connectionId), 2000));\n                setConnectionStatus(connectionStatus);\n            } catch {\n                setConnectionStatus(!connectionStatus);\n            } finally {\n                setWaitingStatus(false);\n                setLoader(false);\n            }\n        },\n        [connectionId, setLoader, setWaitingStatus]\n    );\n\n    return {\n        triggerCheckbox,\n        connectionStatus,\n        isWaiting,\n    };\n};\n\nexport const useButtonToOpenModal = (\n    connectionInfo: ConnectionInfo,\n    name: string,\n    range: string,\n    connectionStatus: boolean\n) => {\n    const { setModal } = useContext(ModalContext);\n\n    return useCallback(\n        () => setModal(getConnectionModalInfo(connectionInfo, name, range, connectionStatus)),\n        [connectionStatus, connectionInfo, name, range, setModal]\n    );\n};\n","import React from 'react';\n\nimport { Button } from '../../common/button';\nimport { Checkbox } from '../../common/checkbox';\n\nimport { useGetTranslatedLabels } from '../../../services/i18n.service';\nimport { useButtonToOpenModal, useTriggerCheckbox } from './connection.hooks';\n\nimport { ConnectionProps } from '../../../models/dashboard.model';\nimport { cardsLabels } from '../../../models/cards.model';\n\nexport const ConnectionComponent = ({\n    connection: { channel, connectionInfo, isActive, name, range, connectionId },\n}: ConnectionProps) => {\n    const { triggerCheckbox, isWaiting, connectionStatus } = useTriggerCheckbox(\n        connectionId,\n        isActive\n    );\n\n    const setModalContext = useButtonToOpenModal(connectionInfo, name, range, connectionStatus);\n\n    const [channelLabel, showConnectionInfoButtonLabel] = useGetTranslatedLabels([\n        cardsLabels.channelLabel,\n        cardsLabels.showConnectionInfoButtonLabel,\n    ]);\n\n    return (\n        <section className=\"connection\">\n            <section className=\"connection-main\">\n                <section className=\"connection-main__status\">\n                    <Checkbox\n                        isDisable={isWaiting}\n                        isActive={connectionStatus}\n                        triggerCheckbox={() => triggerCheckbox(!connectionStatus)}\n                    />\n                </section>\n                <section className=\"details\">\n                    <p className=\"details__name\">{name}</p>\n                    <section className=\"details--minor\">\n                        <p className=\"details--minor__range\">{range},</p>\n                        <p className=\"details--minor__channel\">\n                            {channelLabel} {channel}\n                        </p>\n                    </section>\n                </section>\n            </section>\n            <section className=\"connection-info\">\n                <Button\n                    className=\"show-more-button\"\n                    buttonName={showConnectionInfoButtonLabel}\n                    buttonHandler={setModalContext}\n                />\n            </section>\n        </section>\n    );\n};\n","import React from 'react';\n\nimport { CardContent, NetworkPortsCardContent, Port } from '../../../models/dashboard.model';\n\nexport type PortProps = Port & {\n    isNetwork: boolean;\n    index: number;\n};\nexport const PortRenderer = ({\n    isActive,\n    isNetwork,\n    portSpeed,\n    portType,\n    portUnit,\n    index,\n}: PortProps) => (\n    <section className={`port ${isNetwork ? 'port_network' : ''}`}>\n        <p className=\"port_icon\">\n            {index}\n            {isNetwork ? <span className=\"port_icon__network\"></span> : null}\n        </p>\n        <section className=\"port-info\">\n            <p className=\"port-info_type\">{isActive ? portType : '-'}</p>\n            {isActive ? <p className=\"port-info_speed\">{`${portSpeed} ${portUnit}`}</p> : null}\n        </section>\n    </section>\n);\n\nexport const NetworkPortsCardComponent = (cardContent: CardContent) => {\n    const { ports, networkPortId } = cardContent as NetworkPortsCardContent;\n\n    return (\n        <section className=\"card-content card-content_port\">\n            {ports.map((port: Port, index: number) => (\n                <PortRenderer\n                    key={port.portId}\n                    {...port}\n                    index={index}\n                    isNetwork={port.portId === networkPortId}\n                />\n            ))}\n        </section>\n    );\n};\n","import { sAtom, sSelector } from '../utils/simple-recoil.util';\n\nimport { InternetState, SpeedTrafficState } from '../models/internet.model';\nimport { cardsLabels } from '../models/cards.model';\n\nexport const internetState = sAtom<InternetState>({\n    download: {\n        value: 0,\n        unit: cardsLabels.kbitsLabel,\n    },\n    upload: {\n        value: 0,\n        unit: cardsLabels.kbitsLabel,\n    },\n    received: {\n        value: 0,\n        unit: cardsLabels.mbitLabel,\n    },\n    sent: {\n        value: 0,\n        unit: cardsLabels.mbitLabel,\n    },\n});\n\nexport const speedTrafficState = sSelector<SpeedTrafficState>(({ get }) => ({\n    upload: get<InternetState>(internetState).upload,\n    download: get<InternetState>(internetState).download,\n}));\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport './provider.scss';\n\nimport { internetState } from '../../../recoil-state/internet.state';\n\nimport { ParamHandlerArguments, updateUptime } from '../../../services/system-params.service';\nimport { useGetTranslatedLabels } from '../../../services/i18n.service';\n\nimport { InternetProvider } from '../../../models/dashboard.model';\nimport { cardsLabels } from '../../../models/cards.model';\n\nexport type ProviderProps = InternetProvider & {\n    connectionDuration: string;\n};\n\nexport const InternetConnectionDuration = React.memo(\n    ({ startedTime, value }: ParamHandlerArguments) => {\n        useRecoilValue(internetState); // to sync with state update\n        const [connectedLabel, daysLabel] = useGetTranslatedLabels([\n            cardsLabels.connectedLabel,\n            cardsLabels.daysLabel,\n        ]);\n        return (\n            <section className=\"provider-connection-duration\">\n                {`${connectedLabel}: ${updateUptime({ startedTime, value, daysLabel })}`}\n            </section>\n        );\n    }\n);\nexport const ProviderRenderer = ({\n    providerLabel,\n    providerType,\n    connectionDuration,\n}: ProviderProps) => {\n    const [providerHeaderLabel, i18nProviderLabel] = useGetTranslatedLabels([\n        cardsLabels.providerHeaderLabel,\n        providerLabel,\n    ]);\n\n    return (\n        <section className=\"provider\">\n            <h3 className=\"provider-label\">{providerHeaderLabel}</h3>\n            <section className=\"provider-info\">\n                <span className=\"provider-info_label\">{i18nProviderLabel}</span>\n                {' / '}\n                <span className=\"provider-info_type\">{providerType}</span>\n            </section>\n            <InternetConnectionDuration value=\"\" startedTime={connectionDuration} />\n        </section>\n    );\n};\n","import { MutableRefObject } from 'react';\n\nimport { renderGraph } from '../utils/d3-graph';\n\nimport { bModifier, countOfDisplayedNodes, mModifier } from '../constants/cards.constants';\nimport { navBarToggleTime } from '../constants/common.constants';\n\nimport { TrafficValue, TrafficValues } from '../models/dashboard.model';\nimport { cardsLabels } from '../models/cards.model';\n\nexport const getModifier = (isUpload: boolean) => (isUpload ? 'upload' : 'download');\n\nconst getRange = (unit: cardsLabels) =>\n    [cardsLabels.kbitsLabel, cardsLabels.mbitsLabel].indexOf(unit) ? mModifier : bModifier;\n\nexport const getDataset = (current: TrafficValues, max: TrafficValue) => {\n    const maxRange = max.value * mModifier;\n    const currentLength = current.length;\n    const arrayLength =\n        countOfDisplayedNodes - currentLength > 0 ? countOfDisplayedNodes - currentLength : 0;\n\n    const emptyNodes = new Array(arrayLength).fill('').map(() => ({ y: 0 }));\n\n    const filledNodes = current.map(({ value, unit }: TrafficValue) => ({\n        y: (value * getRange(unit)) / maxRange,\n    }));\n\n    return [{ y: 0 }, ...emptyNodes, ...filledNodes, { y: 0 }];\n};\n\nexport const getLimitedCountOfNodes = (\n    trafficValues: TrafficValues,\n    trafficValue: TrafficValue\n): TrafficValues => {\n    let updatedTrafficValues = [...trafficValues, trafficValue];\n\n    if (updatedTrafficValues.length > countOfDisplayedNodes) {\n        const [, ...updatedTrafficValuesWithoutFirstValues] = updatedTrafficValues;\n        updatedTrafficValues = updatedTrafficValuesWithoutFirstValues;\n    }\n\n    return updatedTrafficValues;\n};\n\nconst emptyWrapper = (cb: () => void) => cb();\nexport const callRenderGraph = (\n    nodesRef: MutableRefObject<TrafficValues>,\n    maxRef: MutableRefObject<TrafficValue>,\n    isUpload: boolean,\n    withTimer: boolean\n): void | NodeJS.Timeout => {\n    const wrapper = withTimer ? setTimeout : emptyWrapper;\n    return wrapper(() => {\n        renderGraph(\n            'traffic-graph',\n            getModifier(isUpload),\n            getDataset(nodesRef.current, maxRef.current)\n        );\n    }, navBarToggleTime);\n};\n","import * as d3 from 'd3';\n\nconst offsetTop = 0;\nconst offsetRight = 0;\nconst offsetBottom = 10;\nconst offsetLeft = 0;\n\nexport const renderGraph = (selector: string, modifier: string, dataset: Array<{ y: number }>) => {\n    const parent = d3.select(`.${selector}__${modifier}`);\n    parent.selectAll('*').remove();\n\n    const {\n        width: parentWidth,\n        height: parentHeight,\n    } = (parent.node() as HTMLElement).getBoundingClientRect();\n\n    const width = parentWidth - offsetLeft - offsetRight;\n    const height = parentHeight - offsetTop - offsetBottom;\n\n    const xScale = d3\n        .scaleLinear()\n        .domain([0, dataset.length - 1])\n        .range([0, width]);\n\n    const yScale = d3.scaleLinear().domain([0, 1]).range([0, height]);\n\n    const line = d3\n        .line()\n        .x((d, i) => xScale(i))\n        .y((d: any) => height - yScale(d.y))\n        .curve(d3.curveMonotoneX);\n\n    const svg = parent\n        .append('svg')\n        .attr('width', width + offsetLeft + offsetRight)\n        .attr('height', height + offsetTop + offsetBottom);\n\n    svg.append('g')\n        .attr('transform', `translate(${offsetLeft}, ${offsetTop})`)\n        .append('path')\n        .datum(dataset)\n        .attr('class', `line__${modifier}`)\n        .attr('d', line as any);\n\n    const hAxis = d3\n        .axisRight(d3.scaleLinear().range([height, 0])) // to set base border as he first item to simple remove it\n        .ticks(6)\n        .tickSize(width);\n\n    svg.append('g')\n        .attr('class', 'h-oriented-borders')\n        .call(hAxis)\n        .call((g) => g.select('.domain').remove()) // to remove domain\n        .call((g) => g.select('.tick').remove()); // to remove the base border\n};\n","export const navBarToggleTime = 300;\n","import { navActionTypes, NavigationData, navSectionTypes } from '../models/nav.model';\n\nexport const navigationMockData: NavigationData = {\n    footer: {\n        triggerNavAction: {\n            type: navActionTypes.triggerNav,\n        },\n        logoutAction: {\n            type: navActionTypes.logout,\n        },\n        linkActions: [\n            {\n                type: navActionTypes.help,\n            },\n            {\n                type: navActionTypes.translate,\n            },\n        ],\n    },\n    sections: [\n        {\n            type: navSectionTypes.status,\n            linkActions: [\n                {\n                    type: navActionTypes.dashboard,\n                },\n                {\n                    type: navActionTypes.traffic,\n                },\n            ],\n            isExpanded: false,\n        },\n        {\n            type: navSectionTypes.internet,\n            linkActions: [\n                {\n                    type: navActionTypes.wired,\n                },\n                {\n                    type: navActionTypes.wirelessISP,\n                },\n                {\n                    type: navActionTypes.otherConnections,\n                },\n                {\n                    type: navActionTypes.connectionPriorities,\n                },\n            ],\n            isExpanded: false,\n        },\n        {\n            type: navSectionTypes.network,\n            linkActions: [\n                {\n                    type: navActionTypes.deviceList,\n                },\n                {\n                    type: navActionTypes.homeSegment,\n                },\n                {\n                    type: navActionTypes.guestSegment,\n                },\n                {\n                    type: navActionTypes.wifiSegment,\n                },\n            ],\n            isExpanded: false,\n        },\n        {\n            type: navSectionTypes.rules,\n            linkActions: [\n                {\n                    type: navActionTypes.internetSafety,\n                },\n                {\n                    type: navActionTypes.firewall,\n                },\n                {\n                    type: navActionTypes.forwarding,\n                },\n                {\n                    type: navActionTypes.routing,\n                },\n                {\n                    type: navActionTypes.domainName,\n                },\n                {\n                    type: navActionTypes.wirelessACL,\n                },\n            ],\n            isExpanded: false,\n        },\n        {\n            type: navSectionTypes.management,\n            linkActions: [\n                {\n                    type: navActionTypes.systemSettings,\n                },\n                {\n                    type: navActionTypes.applications,\n                },\n                {\n                    type: navActionTypes.usersAndAccess,\n                },\n                {\n                    type: navActionTypes.diagnostics,\n                },\n            ],\n            isExpanded: false,\n        },\n    ],\n};\n","export enum commonLabels {\n    searchPlaceholderLabel = 'searchPlaceholderLabel',\n}\n","import { sAtom } from '../utils/simple-recoil.util';\n\nimport { navigationMockData } from '../mock/nav.mock';\n\nimport { navSectionTypes } from '../models/nav.model';\nimport { NavSections } from '../models/nav.model';\n\nexport const expandSectionState = sAtom<navSectionTypes>(navSectionTypes.none);\n\nexport const navSectionsState = sAtom<NavSections>(navigationMockData.sections);\n\nexport const toggleNavBarState = sAtom(false);\n","import React, { useEffect, useRef } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport './traffic-graph.scss';\n\nimport {\n    callRenderGraph,\n    getLimitedCountOfNodes,\n    getModifier,\n} from '../../../services/traffic-graph.service';\nimport { toggleNavBarState } from '../../../recoil-state/navigation.state';\n\nimport { TrafficValue, TrafficValues } from '../../../models/dashboard.model';\nimport { TrafficGraphProps } from '../../../models/internet.model';\n\nexport const TrafficGraph = ({ isUpload, current, max }: TrafficGraphProps) => {\n    const maxRef = useRef<TrafficValue>(max);\n    const nodesRef = useRef<TrafficValues>([]);\n\n    useEffect(() => {\n        nodesRef.current = getLimitedCountOfNodes(nodesRef.current, current);\n        callRenderGraph(nodesRef, maxRef, isUpload, false);\n    }, [current, isUpload]);\n\n    const isNavBarExpanded = useRecoilValue(toggleNavBarState);\n    useEffect(() => {\n        const timerId = callRenderGraph(nodesRef, maxRef, isUpload, true) as NodeJS.Timeout;\n        return () => clearTimeout(timerId);\n    }, [isNavBarExpanded, isUpload]);\n\n    return <section className={`traffic-graph traffic-graph__${getModifier(isUpload)}`}></section>;\n};\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport './traffic-timing.scss';\n\nimport { speedTrafficState } from '../../../recoil-state/internet.state';\nimport { getCurrentTiming, getStartTiming } from '../../../services/traffic.time.service';\n\nexport const TrafficTiming = React.memo(() => {\n    useRecoilValue(speedTrafficState);\n\n    return (\n        <section className=\"timing\">\n            <span className=\"timing_start\">{getStartTiming()}</span>\n            <span className=\"timing_current\">{getCurrentTiming()}</span>\n        </section>\n    );\n});\n","import moment from 'moment';\n\nimport { countOfDisplayedNodes, trafficTimeFormat } from '../constants/cards.constants';\n\nconst msModifier = 1000;\n\nexport const getCurrentTiming = (): string => moment().format(trafficTimeFormat);\nexport const getStartTiming = (): string =>\n    moment(moment().diff(countOfDisplayedNodes * msModifier)).format(trafficTimeFormat);\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport './traffic.scss';\n\nimport { TrafficGraph } from './traffic-graph';\nimport { TrafficTiming } from './traffic-timing';\n\nimport { speedTrafficState } from '../../../recoil-state/internet.state';\nimport { useGetTranslatedLabels } from '../../../services/i18n.service';\n\nimport { trafficType } from '../../../constants/cards.constants';\n\nimport { Traffic } from '../../../models/dashboard.model';\nimport { cardsLabels } from '../../../models/cards.model';\n\nexport const getTrafficValue = ({ unit, value }: { unit: string; value: any }) =>\n    `${value} ${unit}`;\nexport const getTrafficModifier = (type: trafficType) => `traffic__${type}`;\n\nexport const TrafficRenderer = React.memo(({ type, max }: Traffic) => {\n    // https://github.com/facebookexperimental/Recoil/issues/12\n    const { upload, download } = useRecoilValue(speedTrafficState);\n    const trafficValue = type === trafficType.upload ? upload : download;\n    const [trafficTypeLabel, unit] = useGetTranslatedLabels([\n        type === trafficType.upload ? cardsLabels.upload : cardsLabels.download,\n        trafficValue.unit,\n    ]);\n\n    return (\n        <section className={`traffic ${getTrafficModifier(type)}`}>\n            <section className=\"traffic-info\">\n                <section className=\"traffic-info_actual\">\n                    <span className=\"traffic-info_actual-type\">{trafficTypeLabel}: </span>\n                    <span className=\"traffic-info_actual-value\">\n                        {getTrafficValue({ unit, value: trafficValue.value })}\n                    </span>\n                </section>\n                <section className=\"traffic-info_max-speed\">\n                    {getTrafficValue({ unit, value: max.value })}\n                </section>\n            </section>\n            <TrafficGraph max={max} current={trafficValue} isUpload={type === trafficType.upload} />\n            <TrafficTiming />\n        </section>\n    );\n});\n","import { internetDetailsType } from '../constants/cards.constants';\nimport { cardsLabels } from '../models/cards.model';\n\nconst { configuration, reboot } = internetDetailsType;\nconst {\n    connectionEstablishedLabel,\n    adGuardIsEnabledLabel,\n    rebootLabel,\n    configureLabel,\n} = cardsLabels;\n\nexport type DynamicActionHandlers = {\n    configuration: () => void;\n    reboot: () => void;\n};\n\nconst dynamicActionHandlers: DynamicActionHandlers = {\n    configuration: () => console.log(123),\n    reboot: () => console.log(321),\n};\n\nexport const getDynamicDetailData = (type: internetDetailsType) => {\n    const isConfigurationType = type === configuration;\n    const valueLabel = isConfigurationType ? adGuardIsEnabledLabel : connectionEstablishedLabel;\n    const buttonLabel = isConfigurationType ? configureLabel : rebootLabel;\n    const buttonHandler = isConfigurationType\n        ? dynamicActionHandlers.configuration\n        : type === reboot\n        ? dynamicActionHandlers.reboot\n        : () => {};\n\n    return {\n        isConfigurationType,\n        valueLabel,\n        buttonLabel,\n        buttonHandler,\n    };\n};\n","import { NavActionLinks, navActionTypes, navSectionTypes, SectionsUrls } from '../models/nav.model';\n\nexport const navActionLinks: NavActionLinks = {\n    [navActionTypes.logout]: '',\n    [navActionTypes.help]: 'https://help.keenetic.com/hc/en',\n    [navActionTypes.translate]: '',\n    [navActionTypes.triggerNav]: '',\n\n    [navActionTypes.dashboard]: '/dashboard',\n    [navActionTypes.traffic]: '/controlPanel/traffic-monitor/',\n\n    [navActionTypes.wired]: '/controlPanel/wired/',\n    [navActionTypes.wirelessISP]: '/controlPanel/wifiClient/',\n    [navActionTypes.otherConnections]: '/controlPanel/otherConnections',\n    [navActionTypes.connectionPriorities]: '/controlPanel/policies',\n\n    [navActionTypes.deviceList]: '/controlPanel/devicesList',\n    [navActionTypes.homeSegment]: '/controlPanel/segments/HomeSegment',\n    [navActionTypes.guestSegment]: '/controlPanel/segments/GuestSegment',\n    [navActionTypes.wifiSegment]: '/controlPanel/wifiSystem',\n\n    [navActionTypes.internetSafety]: '/controlPanel/secureInternet',\n    [navActionTypes.firewall]: '/controlPanel/firewall',\n    [navActionTypes.forwarding]: '/controlPanel/portForwarding',\n    [navActionTypes.routing]: '/controlPanel/staticRoutes',\n    [navActionTypes.domainName]: '/controlPanel/remoteAccess/',\n    [navActionTypes.wirelessACL]: '/controlPanel/wirelessAcl/',\n\n    [navActionTypes.systemSettings]: '/controlPanel/system',\n    [navActionTypes.applications]: '/controlPanel/apps',\n    [navActionTypes.usersAndAccess]: '/controlPanel/administrator',\n    [navActionTypes.diagnostics]: '/controlPanel/diagnostics',\n};\n\nexport const sectionsUrls: SectionsUrls = [\n    {\n        type: navSectionTypes.status,\n        urls: [navActionLinks.dashboard, navActionLinks.traffic],\n    },\n    {\n        type: navSectionTypes.internet,\n        urls: [\n            navActionLinks.wired,\n            navActionLinks.wirelessISP,\n            navActionLinks.otherConnections,\n            navActionLinks.connectionPriorities,\n        ],\n    },\n    {\n        type: navSectionTypes.network,\n        urls: [\n            navActionLinks.deviceList,\n            navActionLinks.homeSegment,\n            navActionLinks.guestSegment,\n            navActionLinks.wifiSegment,\n        ],\n    },\n    {\n        type: navSectionTypes.rules,\n        urls: [\n            navActionLinks.internetSafety,\n            navActionLinks.firewall,\n            navActionLinks.forwarding,\n            navActionLinks.routing,\n            navActionLinks.domainName,\n            navActionLinks.wirelessACL,\n        ],\n    },\n    {\n        type: navSectionTypes.management,\n        urls: [\n            navActionLinks.systemSettings,\n            navActionLinks.applications,\n            navActionLinks.usersAndAccess,\n            navActionLinks.diagnostics,\n        ],\n    },\n];\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useRecoilValue } from 'recoil';\n\nimport { Button } from '../../common/button';\n\nimport { useGetTranslatedLabel, useGetTranslatedLabels } from '../../../services/i18n.service';\nimport { internetState } from '../../../recoil-state/internet.state';\n\nimport { internetDetailsType } from '../../../constants/cards.constants';\n\nimport { InternetDetail, TrafficValue } from '../../../models/dashboard.model';\nimport { cardsLabels } from '../../../models/cards.model';\nimport { InternetState } from '../../../models/internet.model';\nimport { getDynamicDetailData } from '../../../services/dynamic-detail.service';\nimport { navActionLinks } from '../../../constants/nav.constants';\n\nexport const DefaultDetailRenderer = ({ label, value }: InternetDetail) => {\n    const [i18nLabel, i18nValue] = useGetTranslatedLabels([label, value as cardsLabels]);\n    return (\n        <section className=\"detail-pair\">\n            <section className=\"detail-pair-label\">{i18nLabel}</section>\n            <section className=\"detail-pair-value\">{i18nValue || value}</section>\n        </section>\n    );\n};\n\nconst DetailsRendererWithTranslatedValues = ({ detail, trafficValue }: any) => {\n    const i18nUnit = useGetTranslatedLabel(trafficValue.unit);\n    return <DefaultDetailRenderer {...detail} value={`${trafficValue.value} ${i18nUnit}`} />;\n};\n\nexport const getTrafficValue = (type: internetDetailsType, state: InternetState): TrafficValue => {\n    const trafficValues: any = {\n        [internetDetailsType.upload]: state.upload,\n        [internetDetailsType.download]: state.download,\n        [internetDetailsType.sent]: state.sent,\n        [internetDetailsType.received]: state.received,\n    };\n\n    return trafficValues[type];\n};\n\nexport const TrafficDetailRenderer = (detail: InternetDetail) => {\n    // https:github.com/facebookexperimental/Recoil/issues/12\n    const state = useRecoilValue(internetState);\n    const trafficValue = getTrafficValue(detail.type, state);\n\n    return <DetailsRendererWithTranslatedValues detail={detail} trafficValue={trafficValue} />;\n};\n\nexport const ConfigurableDetailRenderer = (detail: InternetDetail) => {\n    const { valueLabel, buttonLabel, buttonHandler, isConfigurationType } = getDynamicDetailData(\n        detail.type\n    );\n\n    const [i18nLabel, i18nValue, i18ButtonLabel] = useGetTranslatedLabels([\n        detail.label,\n        valueLabel,\n        buttonLabel,\n    ]);\n\n    return (\n        <section className=\"detail-pair\">\n            <section className=\"detail-pair-label\">{i18nLabel}</section>\n            <section className=\"detail-pair-value\">\n                <span className=\"detail-pair-value-message\">{i18nValue || detail.value} </span>\n                {isConfigurationType ? (\n                    <Link className=\"detail-pair-value-link\" to={navActionLinks['internetSafety']}>\n                        {i18ButtonLabel}\n                    </Link>\n                ) : (\n                    <Button\n                        buttonName={i18ButtonLabel}\n                        className=\"detail-pair-value-button\"\n                        buttonHandler={buttonHandler}\n                    />\n                )}\n            </section>\n        </section>\n    );\n};\n","import React, { useState } from 'react';\nimport './details.scss';\n\nimport { Button } from '../../common/button';\nimport { ConfigurableDetailRenderer, DefaultDetailRenderer, TrafficDetailRenderer } from './detail';\n\nimport { useGetTranslatedLabels } from '../../../services/i18n.service';\n\nimport { internetDetailsType } from '../../../constants/cards.constants';\n\nimport { InternetDetail, InternetDetails } from '../../../models/dashboard.model';\nimport { cardsLabels } from '../../../models/cards.model';\n\nconst { download, upload, received, sent, reboot, configuration } = internetDetailsType;\n\nexport type InternetDetailsProps = {\n    details: InternetDetails;\n};\n\nexport const detailRenderers: {\n    [renderer in internetDetailsType]: (detail: InternetDetail) => JSX.Element;\n} = {\n    [configuration]: ConfigurableDetailRenderer,\n    [reboot]: ConfigurableDetailRenderer,\n    [sent]: TrafficDetailRenderer,\n    [received]: TrafficDetailRenderer,\n    [download]: TrafficDetailRenderer,\n    [upload]: TrafficDetailRenderer,\n    [internetDetailsType.default]: DefaultDetailRenderer,\n};\n\nexport const renderDetail = (detail: InternetDetail, index: number) => {\n    const DetailRenderer = detailRenderers[detail.type];\n    return <DetailRenderer key={index} {...detail} />;\n};\n\nexport const renderDetails = (details: InternetDetails) =>\n    details.map((detail: InternetDetail, index: number) => renderDetail(detail, index));\n\nexport const DetailsRenderer = ({ details }: InternetDetailsProps) => {\n    const [isHidden, toggleDetailsVisibility] = useState(true);\n    const [moreDetailsLabel, hiddenDetailsLabel] = useGetTranslatedLabels([\n        cardsLabels.moreDetailsLabel,\n        cardsLabels.hiddenDetailsLabel,\n    ]);\n\n    return (\n        <section className=\"details\">\n            <Button\n                className=\"details-button\"\n                buttonHandler={() => toggleDetailsVisibility(!isHidden)}\n                buttonName={isHidden ? moreDetailsLabel : hiddenDetailsLabel}\n            />\n            {isHidden ? null : <section className=\"details-info\">{renderDetails(details)}</section>}\n        </section>\n    );\n};\n","import { TrafficValue } from '../models/dashboard.model';\nimport { SentReceivedTraffic } from '../models/internet.model';\nimport { cardsLabels } from '../models/cards.model';\n\nconst sentReceivedUnits = [cardsLabels.mbitLabel, cardsLabels.mbitLabel];\nexport const getSentReceivedTraffic = (): SentReceivedTraffic => ({\n    sent: generateUpDownLoadTraffic(sentReceivedUnits),\n    received: generateUpDownLoadTraffic(sentReceivedUnits),\n});\n\nexport const generateUpDownLoadTraffic = (sentReceivedUnits?: Array<cardsLabels>): TrafficValue => {\n    const unitsLabels = sentReceivedUnits\n        ? sentReceivedUnits\n        : [cardsLabels.mbitsLabel, cardsLabels.mbitsLabel];\n    return {\n        unit: unitsLabels[Math.round(Math.random())],\n        value: Math.round(Math.random() * 500) / 10,\n    };\n};\n","import React, { MutableRefObject, useEffect, useRef } from 'react';\nimport { SetterOrUpdater, useRecoilState } from 'recoil';\n\nimport { internetState } from '../../../recoil-state/internet.state';\n\nimport { internetDetailsType, internetRequestDelay } from '../../../constants/cards.constants';\nimport {\n    generateUpDownLoadTraffic,\n    getSentReceivedTraffic,\n} from '../../../services/internet-card.service';\n\nimport { InternetState, SentReceivedTraffic } from '../../../models/internet.model';\nimport { cardsLabels } from '../../../models/cards.model';\nimport {\n    InternetDetail,\n    InternetDetails,\n    TrafficInfo,\n    TrafficValue,\n} from '../../../models/dashboard.model';\n\nexport type ContextUpdaterProps = {\n    details: InternetDetails;\n    trafficInfo: TrafficInfo;\n};\n\nexport const getValue = (details: InternetDetails, type: internetDetailsType): TrafficValue => {\n    const { value } = details.find((detail: InternetDetail) => detail.type === type) || {\n        value: '',\n    };\n\n    return {\n        value: Number(value),\n        unit: cardsLabels.mbitLabel,\n    };\n};\n\nconst useInitInternetState = (\n    updateInternetState: SetterOrUpdater<InternetState>,\n    trafficInfo: TrafficInfo,\n    details: InternetDetails\n) => {\n    useEffect(() => {\n        updateInternetState({\n            ...{ upload: trafficInfo.upload.current, download: trafficInfo.download.current },\n            received: getValue(details, internetDetailsType.received),\n            sent: getValue(details, internetDetailsType.sent),\n        });\n    }, [trafficInfo, details, updateInternetState]);\n};\n\nconst useUpdateInternetState = (\n    updateInternetState: SetterOrUpdater<InternetState>,\n    sentReceivedRef: MutableRefObject<SentReceivedTraffic>\n) => {\n    useEffect(() => {\n        const timerId = setInterval(() => {\n            const sentReceivedTraffic = getSentReceivedTraffic();\n            sentReceivedRef.current = sentReceivedTraffic;\n\n            updateInternetState({\n                ...sentReceivedTraffic,\n                upload: generateUpDownLoadTraffic(),\n                download: generateUpDownLoadTraffic(),\n            });\n        }, internetRequestDelay);\n        return () => clearInterval(timerId);\n    }, [updateInternetState, sentReceivedRef]);\n};\n\nexport const RecoilInternetUpdater = React.memo(({ details, trafficInfo }: ContextUpdaterProps) => {\n    const [{ received, sent }, updateInternetState] = useRecoilState(internetState);\n    const sentReceivedRef = useRef({ received, sent });\n\n    useInitInternetState(updateInternetState, trafficInfo, details);\n    useUpdateInternetState(updateInternetState, sentReceivedRef);\n\n    return null;\n});\n","import React from 'react';\n\nimport { ProviderRenderer } from '../internet/provider';\nimport { TrafficRenderer } from '../internet/traffic';\nimport { DetailsRenderer } from '../internet/details';\n\nimport { CardContent, InternetCardContent } from '../../../models/dashboard.model';\nimport { RecoilInternetUpdater } from '../internet/recoil-internet-updater';\n\nexport const InternetCardRenderer = (cardContent: InternetCardContent) => {\n    const { main, details } = cardContent;\n    const { trafficInfo, startedTime, provider } = main;\n    const { upload, download } = trafficInfo;\n\n    return (\n        <section className=\"card-content\">\n            <ProviderRenderer {...provider} connectionDuration={startedTime} />\n            <section className=\"traffics\">\n                <TrafficRenderer {...download} />\n                <TrafficRenderer {...upload} />\n            </section>\n            <DetailsRenderer details={details} />\n        </section>\n    );\n};\nexport const InternetCardComponent = (cardContent: CardContent) => {\n    return (\n        <>\n            <RecoilInternetUpdater\n                details={(cardContent as InternetCardContent).details}\n                trafficInfo={(cardContent as InternetCardContent).main.trafficInfo}\n            />\n            <InternetCardRenderer {...(cardContent as InternetCardContent)} />\n        </>\n    );\n};\n","import React from 'react';\nimport './cards.scss';\n\nimport * as models from '../../../models/dashboard.model';\nimport { cardTypes } from '../../../constants/cards.constants';\nimport { UnknownCard } from './unknown-card';\nimport { ApplicationsCardComponent } from './applications-card';\nimport { SystemCardComponent } from './system-card';\nimport { WifiCardComponent } from './wifi-card';\nimport { NetworkPortsCardComponent } from './network-ports-card';\nimport { InternetCardComponent } from './internet-card';\nimport { useGetTranslatedLabel } from '../../../services/i18n.service';\n\nconst cardsComponents: models.CardsComponents = {\n    [cardTypes.applicationType]: ApplicationsCardComponent,\n    [cardTypes.systemType]: SystemCardComponent,\n    [cardTypes.wifiType]: WifiCardComponent,\n    [cardTypes.portType]: NetworkPortsCardComponent,\n    [cardTypes.internetType]: InternetCardComponent,\n};\n\nexport const Card = React.memo(({ card }: models.CardProps) => {\n    const CardComponent = cardsComponents[card.type];\n    const title = useGetTranslatedLabel(card.title);\n    return (\n        <section className=\"card\">\n            <section className=\"application-card\">\n                <h3 className=\"card__title\">{title}</h3>\n                {CardComponent ? (\n                    <CardComponent {...card.cardContent} />\n                ) : (\n                    <UnknownCard type={card.type} />\n                )}\n            </section>\n        </section>\n    );\n});\n\nexport const Cards = ({ leftCards, rightCards }: models.CardsProps) => (\n    <section className=\"cards\">\n        <section className=\"cards-left\">\n            {leftCards.map((card: models.Card) => (\n                <Card key={card.cardId} card={card} />\n            ))}\n        </section>\n\n        <section className=\"cards-right\">\n            {rightCards.map((card: models.Card) => (\n                <Card key={card.cardId} card={card} />\n            ))}\n        </section>\n    </section>\n);\n","import React from 'react';\nimport { ApplicationsCardContent, CardContent } from '../../../models/dashboard.model';\nimport { useGetTranslatedLabel } from '../../../services/i18n.service';\nimport { cardsLabels } from '../../../models/cards.model';\n\nexport const ApplicationsCardComponent = (cardContent: CardContent) => {\n    const { applications } = cardContent as ApplicationsCardContent;\n    const hasNoApplicationsMessage = useGetTranslatedLabel(\n        cardsLabels.hasNoApplicationsMessageLabel\n    );\n    return (\n        <section className=\"card-content\">\n            {applications.length ? 'Applications' : hasNoApplicationsMessage}\n        </section>\n    );\n};\n","import { SplitParams, SystemParam } from '../models/dashboard.model';\n\nexport const splitSystemParams = (systemParams: Array<SystemParam>) =>\n    systemParams.reduce(\n        (params: SplitParams, param: SystemParam): SplitParams => {\n            const field = param.isActive ? 'dynamicSystemParams' : 'staticSystemParams';\n            params[field].push(param);\n\n            return params;\n        },\n        {\n            staticSystemParams: [],\n            dynamicSystemParams: [],\n        }\n    );\n","import React from 'react';\n\nimport { OnlineDeviceComponent } from '../online-device/online-device';\nimport { ConnectionComponent } from '../connection/connection';\n\nimport { useGetTranslatedLabel } from '../../../services/i18n.service';\n\nimport { cardsLabels } from '../../../models/cards.model';\nimport {\n    CardContent,\n    Connection,\n    OnlineDevice,\n    WiFiCardContent,\n} from '../../../models/dashboard.model';\n\nexport const WifiCardComponent = (cardContent: CardContent) => {\n    const { connections, onlineDevices } = cardContent as WiFiCardContent;\n    const onlineDeviceTitle = useGetTranslatedLabel(cardsLabels.onlineDeviceTitleLabel);\n\n    return (\n        <section className=\"card-content\">\n            <section className=\"connections\">\n                {connections.map((connection: Connection) => (\n                    <ConnectionComponent key={connection.connectionId} connection={connection} />\n                ))}\n            </section>\n            {onlineDevices.length ? (\n                <section className=\"devices\">\n                    <h3 className=\"devices--title\">{onlineDeviceTitle}</h3>\n                    <section className=\"devices-content\">\n                        {onlineDevices.map((onlineDevice: OnlineDevice) => (\n                            <OnlineDeviceComponent\n                                key={onlineDevice.key}\n                                onlineDevice={onlineDevice}\n                            />\n                        ))}\n                    </section>\n                </section>\n            ) : null}\n        </section>\n    );\n};\n","import { useEffect, useState } from 'react';\nimport { History } from 'history';\n\nimport { defaultCards } from '../constants/cards.constants';\nimport { cardsMocks } from '../mock/cards.mock';\nimport { dashboardPath } from '../constants/router.constants';\n\nimport { Cards, CardsResponse } from '../models/dashboard.model';\n\nexport type SetCards = (cards: Cards) => void;\n\nexport class CardLoaderService {\n    public useLoadCards(history: History<Cards>): CardsResponse {\n        const [isLoading, setLoader] = useState(false);\n        const [{ leftCards, rightCards }, setCards] = useState(defaultCards);\n\n        useEffect(() => {\n            const preloadedCards = history.location.state;\n\n            if (preloadedCards) {\n                history.replace(dashboardPath, undefined);\n                return setCards(preloadedCards);\n            }\n\n            setLoader(true);\n            this.fetchCards(setCards).finally(() => setLoader(false));\n        }, [history]);\n\n        return { isLoading, leftCards, rightCards };\n    }\n\n    private async fetchCards(setCards: SetCards): Promise<void> {\n        return new Promise((res) => {\n            setTimeout(() => {\n                setCards(cardsMocks);\n                res();\n            }, 1000);\n        });\n    }\n}\n\nexport const cardLoaderInstance = new CardLoaderService();\n","import { DashboardPage } from '../pages/dashboard/dashboard';\nimport { IsNotImplemented } from '../pages/is-not-implemented';\n\nimport { ComponentsToRender } from '../models/router.model';\n\nexport const rootPath = '/';\nexport const dashboardPath = '/dashboard';\nexport const rootControlPanelPath = '/controlpanel';\n\nexport const componentsToRender: ComponentsToRender = {\n    default: IsNotImplemented,\n    [dashboardPath]: DashboardPage,\n};\n","import React from 'react';\n\nexport const IsNotImplemented = () => <h1>Component is not implemented yet</h1>;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport './dashboard.scss';\n\nimport { Cards as CardsComponent } from '../../components/dashboard/cards/cards';\n\nimport { cardLoaderInstance } from '../../services/card-loader.service';\n\nimport { DashboardProps, Cards } from '../../models/dashboard.model';\n\nexport const DashboardPage = ({ cardLoader = cardLoaderInstance }: DashboardProps) => {\n    const history = useHistory<Cards>();\n    const { leftCards, rightCards } = cardLoader.useLoadCards(history);\n\n    return <CardsComponent leftCards={leftCards} rightCards={rightCards} />;\n};\n","import React, { Suspense, useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { useHistory } from 'react-router-dom';\n\nimport { suspenseFetch } from '../../concurrency/suspence-fetch';\nimport { SuspenseLoader } from '../common/loader';\nimport { loadDashboard } from '../../services/login-and-load-dashboard';\nimport { dashboardPath } from '../../constants/router.constants';\n\nimport { Cards } from '../../models/dashboard.model';\nimport { DashboardLoaderProps, ConcurrencyLoginHandlerProps } from '../../models/concurrency.model';\n\nexport const DashboardLoader = ({ dashboardRequest }: DashboardLoaderProps) => {\n    const history = useHistory();\n\n    const cards = dashboardRequest.read();\n\n    useEffect(() => {\n        history.push({ pathname: dashboardPath, state: cards });\n    }, [history, cards]);\n\n    return null;\n};\n\nexport const ConcurrencyLoginHandler = ({\n    loginValues,\n    errorHandler,\n    getDashboardRequest = loadDashboard,\n}: ConcurrencyLoginHandlerProps) => {\n    const [dashboardRequest] = useState(\n        suspenseFetch<Cards | undefined>(getDashboardRequest(loginValues, errorHandler))\n    );\n\n    return (\n        <Suspense\n            fallback={ReactDOM.createPortal(\n                <SuspenseLoader />,\n                document.getElementById('root-portal-modal') as HTMLElement\n            )}\n        >\n            <DashboardLoader dashboardRequest={dashboardRequest} />\n        </Suspense>\n    );\n};\n","import React, { useReducer } from 'react';\nimport './login.scss';\n\nimport { WithLoaderContext } from '../../context/loader.context';\nimport { LoginForm } from '../../components/login/login-form';\n\nimport { loginReducer } from '../../reducers/login.reducer';\nimport { ConcurrencyLoginHandler } from '../../components/concurrency/concurrency-login-handler';\nimport { useGetLoginPageLabels } from '../../services/i18n.login.service';\n\nimport { initialState, loginActionTypes } from '../../constants/login.constants';\n\nimport { LoginState, LoginReducer } from '../../models/login.model';\n\nconst { cleanuplogin } = loginActionTypes;\n\nexport const LoginPage = () => {\n    const [state, dispatch] = useReducer<LoginReducer, LoginState>(\n        loginReducer,\n        initialState,\n        () => initialState\n    );\n    const { errorMessage, shouldLogin, password, login } = state;\n\n    const i18nLabels = useGetLoginPageLabels(errorMessage);\n\n    return (\n        <WithLoaderContext>\n            <section id=\"root-portal-modal\"></section>\n            {shouldLogin ? (\n                <ConcurrencyLoginHandler\n                    loginValues={{ login, password }}\n                    errorHandler={(errorMessage: string) =>\n                        dispatch({ type: cleanuplogin, value: errorMessage })\n                    }\n                />\n            ) : null}\n            <LoginForm dispatch={dispatch} i18nLabels={i18nLabels} state={state} />\n        </WithLoaderContext>\n    );\n};\n","import { useGetTranslatedLabels } from './i18n.service';\nimport { loginLabels } from '../models/login.model';\n\nexport type LoginLabels = {\n    [key in loginLabels]: string;\n};\nexport const useGetLoginPageLabels = (errorMessage: string): LoginLabels => {\n    const [\n        loginTitleLabel,\n        loginButtonLabel,\n        resetLabel,\n        setDefaultLabel,\n        invalidCredentialsMessageLabel,\n    ] = useGetTranslatedLabels([\n        loginLabels.loginTitleLabel,\n        loginLabels.loginButtonLabel,\n        loginLabels.resetLabel,\n        loginLabels.setDefaultLabel,\n        loginLabels.invalidCredentialsMessageLabel,\n    ]);\n\n    return {\n        loginTitleLabel,\n        loginButtonLabel,\n        resetLabel,\n        setDefaultLabel,\n        invalidCredentialsMessageLabel:\n            errorMessage === loginLabels.invalidCredentialsMessageLabel\n                ? invalidCredentialsMessageLabel\n                : errorMessage,\n    };\n};\n","import React from 'react';\n\nimport { Input } from './input';\nimport { commonLabels } from '../../models/common.model';\n\nexport const SearchBar = () => (\n    <label className=\"search-content\">\n        <Input\n            value=\"\"\n            name=\"search\"\n            type=\"search\"\n            className=\"search-input\"\n            placeholder={commonLabels.searchPlaceholderLabel}\n            onChange={(value: string) => console.log(value)}\n        />\n    </label>\n);\n","export enum toggleStatuses {\n    none = 'none',\n    expanded = 'expanded',\n    collapsed = 'collapsed',\n    empty = '',\n}\n","import React from 'react';\nimport './header.scss';\n\nimport { SearchBar } from '../../common/search-bar';\n\nexport const Header = () => (\n    <header>\n        <h1>\n            Keenetic <span>Router</span>\n        </h1>\n        <SearchBar />\n    </header>\n);\n","import { useCallback } from 'react';\nimport { useRecoilState } from 'recoil';\n\nimport { toggleNavBarState } from '../recoil-state/navigation.state';\nimport { NavigationBarProps } from '../models/nav.model';\n\nexport const useToggleNavBar = (): NavigationBarProps => {\n    const [isNavBarExpanded, toggleNavBarHandler] = useRecoilState(toggleNavBarState);\n    const toggleNavBar = useCallback(() => {\n        toggleNavBarHandler((isNavBarExpanded: boolean) => !isNavBarExpanded);\n        new Error('TOGGLE');\n    }, [toggleNavBarHandler]);\n\n    return { isNavBarExpanded, toggleNavBar };\n};\n","import { navSectionTypes, SectionUrls } from '../models/nav.model';\nimport { sectionsUrls } from '../constants/nav.constants';\n\nexport const getActiveSection = (pathname: string): navSectionTypes => {\n    const activeSectionEntries = sectionsUrls.find(({ urls }: SectionUrls) =>\n        urls.includes(pathname)\n    );\n    if (activeSectionEntries) {\n        return activeSectionEntries.type;\n    }\n\n    return navSectionTypes.all;\n};\n\nexport const getSectionClassNames = (type: navSectionTypes) => `nav-section nav-section__${type}`;\n\nexport const getSectionTitleClassNames = (isActive: boolean, shouldExpandSection: boolean) =>\n    `nav-section-title nav-section-title__${shouldExpandSection ? 'expanded' : 'collapsed'} ${\n        isActive ? 'nav-section-title__active' : ''\n    }`;\n\nexport const getActionsClassNames = (shouldExpandSection: boolean) =>\n    `nav-section-actions nav-section-actions__${shouldExpandSection ? 'expanded' : 'collapsed'}`;\n","import React, { useCallback } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useToggleNavBar } from '../../../hooks/toggle-nav-bar.recoil.hook';\nimport { useGetTranslatedLabel } from '../../../services/i18n.service';\nimport {\n    getActionsClassNames,\n    getSectionClassNames,\n    getSectionTitleClassNames,\n} from '../../../services/navigation.service';\n\nimport { navActionLinks } from '../../../constants/nav.constants';\n\nimport { LinkAction, LinkActions, navSectionTypes } from '../../../models/nav.model';\n\nexport type SectionRendererProps = {\n    isActive: boolean;\n    shouldExpandSection: boolean;\n    type: navSectionTypes;\n    onExpandNavBar: () => void;\n    onExpandSection: () => void;\n    linkActions: LinkActions;\n};\n\nexport const LinkActionRenderer = React.memo(({ type }: LinkAction) => {\n    const i18nActionLabel = useGetTranslatedLabel(type);\n    const { toggleNavBar } = useToggleNavBar();\n\n    const redirectHandler = useCallback(() => {\n        toggleNavBar();\n        return navActionLinks[type];\n    }, [type, toggleNavBar]);\n\n    return (\n        <Link key={type} className=\"nav-section-action\" to={redirectHandler}>\n            {i18nActionLabel}\n        </Link>\n    );\n});\n\nexport const renderLinkActions = (linkActions: LinkActions) =>\n    linkActions.map((linkAction: LinkAction) => (\n        <LinkActionRenderer key={linkAction.type} {...linkAction} />\n    ));\n\nexport const SectionRenderer = React.memo(\n    ({\n        onExpandNavBar,\n        type,\n        shouldExpandSection,\n        onExpandSection,\n        isActive,\n        linkActions,\n    }: SectionRendererProps) => {\n        const i18nSectionLabel = useGetTranslatedLabel(type);\n\n        return (\n            <section onClick={onExpandNavBar} className={getSectionClassNames(type)}>\n                <h3\n                    onClick={onExpandSection}\n                    className={getSectionTitleClassNames(isActive, shouldExpandSection)}\n                >\n                    {i18nSectionLabel}\n                </h3>\n                <section className={getActionsClassNames(shouldExpandSection)}>\n                    {renderLinkActions(linkActions)}\n                </section>\n            </section>\n        );\n    }\n);\n","import React, { useCallback } from 'react';\nimport { useRecoilState } from 'recoil';\nimport { useHistory } from 'react-router-dom';\n\nimport { SectionRenderer } from './navigation-section.renderer';\n\nimport { expandSectionState } from '../../../recoil-state/navigation.state';\nimport { getActiveSection } from '../../../services/navigation.service';\nimport { useToggleNavBar } from '../../../hooks/toggle-nav-bar.recoil.hook';\n\nimport { NavSection, navSectionTypes } from '../../../models/nav.model';\n\nexport const Section = React.memo(({ type, linkActions }: NavSection) => {\n    const { isNavBarExpanded, toggleNavBar } = useToggleNavBar();\n    const [expandedType, expandSection] = useRecoilState(expandSectionState);\n    const history = useHistory();\n\n    const onExpandSection = useCallback(() => {\n        expandSection(type);\n    }, [expandSection, type]);\n\n    const onExpandNavBar = useCallback(() => {\n        if (!isNavBarExpanded) {\n            toggleNavBar();\n        }\n        onExpandSection();\n    }, [isNavBarExpanded, toggleNavBar, onExpandSection]);\n\n    const shouldExpandSection = expandedType === type || expandedType === navSectionTypes.all;\n    const isActive = getActiveSection(history.location.pathname) === type;\n\n    return (\n        <SectionRenderer\n            isActive={isActive}\n            shouldExpandSection={shouldExpandSection}\n            type={type}\n            linkActions={linkActions}\n            onExpandNavBar={onExpandNavBar}\n            onExpandSection={onExpandSection}\n        />\n    );\n});\n","import React, { useRef } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport './navigation-sections.scss';\n\nimport { Section } from './navigation-section';\n\nimport { navSectionsState } from '../../../recoil-state/navigation.state';\nimport { useVerticalPerfectScroll } from '../../../hooks/vertical-scroll.hook';\nimport { useDefaultExpandNavBarHandler } from '../../../hooks/expand-nav-bar.hook';\n\nimport { NavSection } from '../../../models/nav.model';\n\nexport const NavigationSections = () => {\n    const sections = useRecoilValue(navSectionsState);\n    const sectionsRef = useRef<HTMLElement>((null as unknown) as HTMLElement);\n\n    useVerticalPerfectScroll(sectionsRef);\n    const onExpandNavBarHandler = useDefaultExpandNavBarHandler();\n\n    return (\n        <>\n            <section ref={sectionsRef} className=\"nav-sections\" onClick={onExpandNavBarHandler}>\n                {sections.map((navSection: NavSection) => (\n                    <Section key={navSection.type} {...navSection} />\n                ))}\n            </section>\n        </>\n    );\n};\n","import { MutableRefObject, useEffect } from 'react';\nimport PerfectScrollbar from 'perfect-scrollbar';\n\nexport const useVerticalPerfectScroll = (refElement: MutableRefObject<HTMLElement>) => {\n    useEffect(() => {\n        const element = refElement.current;\n        const { height } = element.getBoundingClientRect();\n        element.style.height = `${height}px`;\n\n        const ps = new PerfectScrollbar(element as any, { wheelSpeed: 0.2 });\n        return () => ps.destroy();\n    }, [refElement]);\n};\n","import React, { useCallback } from 'react';\nimport { useSetRecoilState } from 'recoil';\nimport { useHistory } from 'react-router-dom';\n\nimport { useToggleNavBar } from './toggle-nav-bar.recoil.hook';\n\nimport { expandSectionState } from '../recoil-state/navigation.state';\n\nimport { getActiveSection } from '../services/navigation.service';\n\nexport const useDefaultExpandNavBarHandler = () => {\n    const { isNavBarExpanded, toggleNavBar } = useToggleNavBar();\n    const expandSection = useSetRecoilState(expandSectionState);\n    const history = useHistory();\n\n    return useCallback(\n        ({ target }: React.MouseEvent<HTMLElement, MouseEvent>) => {\n            if ((target as any).className.includes('nav-sections')) {\n                toggleNavBar();\n                if (!isNavBarExpanded) {\n                    expandSection(getActiveSection(history.location.pathname));\n                }\n            }\n        },\n        [isNavBarExpanded, toggleNavBar, expandSection, history.location.pathname]\n    );\n};\n","import React, { useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport { useGetTranslatedLabel } from '../../../../services/i18n.service';\nimport { useToggleNavBar } from '../../../../hooks/toggle-nav-bar.recoil.hook';\n\nimport { rootPath } from '../../../../constants/router.constants';\n\nimport { navActionTypes } from '../../../../models/nav.model';\n\nexport const Logout = React.memo(() => {\n    const history = useHistory();\n    const i18nActionLabel = useGetTranslatedLabel(navActionTypes.logout);\n\n    const { toggleNavBar } = useToggleNavBar();\n    const redirectHandler = useCallback(() => {\n        toggleNavBar();\n        history.push({ pathname: rootPath, state: null });\n    }, [toggleNavBar, history]);\n\n    return (\n        <section className=\"nav-section nav-section__top-border nav-section__logout\">\n            <h3\n                onClick={redirectHandler}\n                className=\"nav-section-title nav-section-title__white-simple\"\n            >\n                {i18nActionLabel}\n            </h3>\n        </section>\n    );\n});\n","import React, { useCallback } from 'react';\nimport { useSetRecoilState } from 'recoil';\n\nimport { i18nState } from '../../../../recoil-state/i18n.state';\n\nimport { useGetTranslatedLabel } from '../../../../services/i18n.service';\n\nimport { navActionTypes } from '../../../../models/nav.model';\nimport { languages } from '../../../../models/i18n.model';\n\nconst { russian, english } = languages;\nexport const Translate = React.memo(() => {\n    const setLanguage = useSetRecoilState(i18nState);\n\n    const changeLanguage = useCallback(\n        () => setLanguage((language: languages) => (language === russian ? english : russian)),\n        [setLanguage]\n    );\n\n    const i18nActionsLabels = useGetTranslatedLabel(navActionTypes.translate);\n\n    return (\n        <section onClick={changeLanguage} className=\"dropdown-as-link\">\n            {i18nActionsLabels}\n        </section>\n    );\n});\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './navigation-common-actions.scss';\n\nimport { Logout } from './logout';\nimport { Translate } from './translate';\n\nimport { useGetTranslatedLabel } from '../../../../services/i18n.service';\n\nimport { navActionLinks } from '../../../../constants/nav.constants';\n\nimport { navActionTypes } from '../../../../models/nav.model';\n\nexport const getCommonActionsClassNames = (shouldDisplayCommonActions: boolean) =>\n    `nav-common-actions nav-common-actions__${\n        shouldDisplayCommonActions ? 'expanded' : 'collapsed'\n    }`;\n\nexport const CommonNavActions = React.memo(\n    ({ isNavBarExpanded }: { isNavBarExpanded: boolean }) => {\n        const i18nActionLabel = useGetTranslatedLabel(navActionTypes.help);\n\n        return (\n            <section className={getCommonActionsClassNames(isNavBarExpanded)}>\n                <Logout />\n                <section className=\"nav-section nav-section__top-border nav-section__split\">\n                    <Link to={navActionLinks[navActionTypes.help]} className=\"action-as-link\">\n                        {i18nActionLabel}\n                    </Link>\n                    <Translate />\n                </section>\n            </section>\n        );\n    }\n);\n","import React, { useEffect } from 'react';\nimport { useSetRecoilState } from 'recoil';\nimport './navigation-footer.scss';\n\nimport { Button } from '../../common/button';\nimport { CommonNavActions } from './common-actions/navigation-common-actions';\n\nimport { useGetTranslatedLabel } from '../../../services/i18n.service';\n\nimport { expandSectionState } from '../../../recoil-state/navigation.state';\nimport { useToggleNavBar } from '../../../hooks/toggle-nav-bar.recoil.hook';\n\nimport { navActionTypes, navSectionTypes } from '../../../models/nav.model';\n\nexport const NavigationFooter = React.memo(() => {\n    const { isNavBarExpanded, toggleNavBar } = useToggleNavBar();\n    const expandAllActions = useSetRecoilState(expandSectionState);\n    const triggerNavBar = () => {\n        toggleNavBar();\n        expandAllActions(navSectionTypes.all);\n    };\n    useEffect(() => {\n        if (!isNavBarExpanded) {\n            expandAllActions(navSectionTypes.none);\n        }\n    }, [isNavBarExpanded, expandAllActions]);\n\n    const i18nActionsLabels = useGetTranslatedLabel(navActionTypes.triggerNav);\n\n    return (\n        <section className=\"navbar-footer\">\n            <CommonNavActions isNavBarExpanded={isNavBarExpanded} />\n\n            <Button\n                buttonHandler={triggerNavBar}\n                className=\"navbar-footer_trigger-action\"\n                buttonName={i18nActionsLabels}\n            ></Button>\n        </section>\n    );\n});\n","import { useEffect, useState } from 'react';\n\nimport { toggleStatuses } from '../constants/hooks.constants';\n\nexport const useExpandCollapseHook = (isExpanded: boolean): toggleStatuses => {\n    const [expandCollapseClassName, setClassName] = useState<toggleStatuses>(toggleStatuses.empty);\n\n    useEffect(() => {\n        setClassName((navClassName) =>\n            navClassName\n                ? isExpanded\n                    ? toggleStatuses.expanded\n                    : toggleStatuses.collapsed\n                : toggleStatuses.none\n        );\n    }, [isExpanded, setClassName]);\n\n    return expandCollapseClassName;\n};\n","import { connectionActionTypes } from '../constants/modal.constants';\nimport { ConnectionInfoPropsWithSetters } from './modals.model';\n\nexport enum actionsLabels {\n    addLogoType = 'addLogoType',\n    copyType = 'copyType',\n    printType = 'printType',\n    wpsType = 'wpsType',\n    activatedWpsType = 'activatedWpsType',\n}\n\nexport type ActionNames = {\n    activatedWpsType: actionsLabels;\n    [connectionActionTypes.addLogoType]: actionsLabels;\n    [connectionActionTypes.copyType]: actionsLabels;\n    [connectionActionTypes.printType]: actionsLabels;\n    [connectionActionTypes.wpsType]: actionsLabels;\n};\n\nexport type ModalActionHandler = (actionPayload: ConnectionInfoPropsWithSetters) => Promise<void>;\n\nexport type ModalActionHandlers = {\n    [actionType in connectionActionTypes]: ModalActionHandler;\n};\n","import React from 'react';\n\nimport './navigation-bar.scss';\n\nimport { NavigationSections } from './navigation-sections';\nimport { NavigationFooter } from './navigation-footer';\n\nimport { useExpandCollapseHook } from '../../../hooks/expand-collpase.hook';\nimport { useToggleNavBar } from '../../../hooks/toggle-nav-bar.recoil.hook';\n\nexport const NavigationBar = () => {\n    const { isNavBarExpanded, toggleNavBar } = useToggleNavBar();\n    const expandCollapseNavBarClassName = useExpandCollapseHook(isNavBarExpanded);\n\n    return (\n        <nav className={expandCollapseNavBarClassName}>\n            <section\n                onClick={toggleNavBar}\n                className={`nav-background nav-background__${expandCollapseNavBarClassName}`}\n            ></section>\n            <section className=\"nav-container\">\n                <NavigationSections />\n                <NavigationFooter />\n            </section>\n        </nav>\n    );\n};\n","import React from 'react';\n\nexport type LogoProps = {\n    src: string;\n    className: string;\n};\n\nexport const Logo = ({ src, className }: LogoProps) => (\n    <img className={className} src={src} alt=\"loading\"></img>\n);\n","import React, { useEffect, useState, useMemo } from 'react';\nimport './timer.scss';\n\nexport type TimerProps = {\n    duration: number;\n    fallback: () => void;\n};\n\nconst tickDuration = 1000;\n\nconst getFormattedRestTime = (resTime: number): string => {\n    const min = Math.floor(resTime / 60);\n    const sec = resTime % 60;\n\n    return `0${min}: ${sec > 9 ? sec : `0${sec}`}`;\n};\n\nconst getDurationModifier = (duration: number) => `progress-bar_rest--${duration}`;\n\nexport const Timer = ({ duration, fallback }: TimerProps) => {\n    const [restTime, setRestTime] = useState(duration);\n\n    useEffect(() => {\n        const timerId = setTimeout(fallback, duration * tickDuration);\n        return () => clearTimeout(timerId);\n    }, [fallback, duration]);\n\n    useEffect(() => {\n        const timerId = setInterval(() => {\n            setRestTime((restTime) => restTime - 1);\n        }, tickDuration);\n        return () => clearInterval(timerId);\n    }, []);\n\n    const formattedRestTime = useMemo(() => getFormattedRestTime(restTime), [restTime]);\n\n    return (\n        <section className=\"timer\">\n            <h3 className=\"duration\">{formattedRestTime}</h3>\n            <section className=\"progress-bar\">\n                <p className={`progress-bar_rest ${getDurationModifier(duration)}`}></p>\n            </section>\n        </section>\n    );\n};\n","import { ConnectionInfoPropsWithSetters } from '../models/modals.model';\n\nexport const copyPasteActionHandler = async ({\n    credentials: { password },\n}: ConnectionInfoPropsWithSetters) => {\n    if (password && navigator.clipboard) {\n        return await navigator.clipboard.writeText(password);\n    }\n};\n","import { ConnectionInfoPropsWithSetters, SetLogo } from '../models/modals.model';\n\nexport const getCreatedFileInput = () => {\n    const fileInput = document.createElement('input') as HTMLInputElement;\n\n    fileInput.style.display = 'none';\n    fileInput.type = 'file';\n    fileInput.accept = '.png, .jpg, .jpeg, .svg';\n\n    return fileInput;\n};\nexport type SetImageFile = (imageFile: File, setLogo: SetLogo) => void;\n\nexport const setImageFile = (imageFile: File, setLogo: SetLogo) => {\n    const fr = new FileReader();\n\n    fr.onload = () => setLogo(fr.result as string);\n    fr.readAsDataURL(imageFile);\n};\n\nexport const fileInputUploadHandler = (\n    fileInput: HTMLInputElement,\n    parent: HTMLElement,\n    setImageFile: SetImageFile,\n    setLogo: SetLogo\n) => {\n    const imageFile = fileInput.files?.item(0);\n\n    if (imageFile && imageFile.type.includes('image/')) {\n        setImageFile(imageFile, setLogo);\n    }\n\n    parent.removeChild(fileInput);\n};\nexport const addLogoActionHandler = async ({ setLogo }: ConnectionInfoPropsWithSetters) => {\n    const fileInput = getCreatedFileInput();\n\n    const parent = document.getElementById('root') as HTMLElement;\n    parent.append(fileInput);\n\n    fileInput.addEventListener('change', () =>\n        fileInputUploadHandler(fileInput, parent, setImageFile, setLogo)\n    );\n    fileInput.click();\n};\n","export const printActionHandler = async () => window.print();\n","import { ConnectionInfoPropsWithSetters } from '../models/modals.model';\n\nexport const wpsActionHanlder = async ({\n    credentials: { networkId },\n}: ConnectionInfoPropsWithSetters) => {\n    await Promise.resolve(networkId);\n};\n","import { connectionActionTypes } from '../constants/modal.constants';\nimport { ModalActionHandlers } from '../models/actions.model';\nimport { copyPasteActionHandler } from './copy-paste.action';\nimport { addLogoActionHandler } from './add-logo.action';\nimport { printActionHandler } from './print.action';\nimport { wpsActionHanlder } from './wps.action';\n\nexport const modalActionHandlers: ModalActionHandlers = {\n    [connectionActionTypes.copyType]: copyPasteActionHandler,\n    [connectionActionTypes.addLogoType]: addLogoActionHandler,\n    [connectionActionTypes.printType]: printActionHandler,\n    [connectionActionTypes.wpsType]: wpsActionHanlder,\n};\n","import { ActionNames, actionsLabels } from '../models/actions.model';\n\nexport const actionNames: ActionNames = {\n    addLogoType: actionsLabels.addLogoType,\n    copyType: actionsLabels.copyType,\n    printType: actionsLabels.printType,\n    wpsType: actionsLabels.wpsType,\n    activatedWpsType: actionsLabels.activatedWpsType,\n};\n\nexport const wpsActivationDuration = 120; // 2min in sec\n","import { modalContentTypes } from '../constants/modal.constants';\nimport { FunctionComponent } from 'react';\nimport { ConnectionInfo } from './dashboard.model';\n\nexport type SetLogo = (src: string) => void;\n\nexport type ConnectionInfoProps = ConnectionInfo & {\n    name: string;\n    range: string;\n};\n\nexport type ConnectionInfoPropsWithSetters = ConnectionInfoProps & {\n    setLogo: SetLogo;\n};\nexport type ModalContentComponents = {\n    [modalContentTypes.connectionContentType]: FunctionComponent<ConnectionInfoProps>;\n};\n\nexport type ModalInfo = ConnectionInfoProps | null;\nexport type SetModal = (modalInfo: ModalInfo) => void;\n\nexport type ModalInfoContext = {\n    modalInfo: ModalInfo;\n    setModal: SetModal;\n};\n\nexport enum modalLabels {\n    networkNameLabel = 'networkNameLabel',\n    passwordLabel = 'passwordLabel',\n    connectionDescriptionLabel = 'connectionDescriptionLabel',\n}\n\nexport enum dynamicModalLabels {\n    connectionTitleLabel = 'connectionTitleLabel',\n}\n","import React, { useCallback, useState } from 'react';\n\nimport { Button } from '../common/button';\nimport { Timer } from '../common/timer';\n\nimport { useGetTranslatedLabel } from '../../services/i18n.service';\n\nimport { getActionStatus } from './actions';\nimport { modalActionHandlers } from '../../actions/actions';\n\nimport { actionNames, wpsActivationDuration } from '../../constants/actions.constants';\nimport { connectionActionTypes } from '../../constants/modal.constants';\n\nimport { ConnectionInfoPropsWithSetters } from '../../models/modals.model';\n\nconst actionHandler = modalActionHandlers[connectionActionTypes.wpsType];\nconst { wpsType, activatedWpsType } = actionNames;\n\nexport const WPSAction = (props: ConnectionInfoPropsWithSetters) => {\n    const { isActive } = props.actions.WPS;\n\n    const [isWPSActivated, activateWPS] = useState(false);\n    const buttonHandler = useCallback(() => {\n        activateWPS((isWPSActivated: boolean) => !isWPSActivated);\n        actionHandler(props).catch(() => activateWPS(false));\n    }, [props]);\n\n    const actionLabel = useGetTranslatedLabel(isWPSActivated ? activatedWpsType : wpsType);\n\n    return (\n        <section className=\"acitons-wps\">\n            <Button\n                className={`modal-action-button ${getActionStatus(isActive)} wps`}\n                buttonName={actionLabel}\n                buttonHandler={isActive ? buttonHandler : () => {}}\n            />\n            {isWPSActivated ? (\n                <Timer duration={wpsActivationDuration} fallback={() => activateWPS(false)} />\n            ) : null}\n        </section>\n    );\n};\n","import React from 'react';\n\nimport { ButtonWithPostHandler } from '../common/button';\nimport { WPSAction } from './wps.action';\n\nimport { useGetTranslatedLabel } from '../../services/i18n.service';\n\nimport { actionNames } from '../../constants/actions.constants';\nimport { modalActionHandlers } from '../../actions/actions';\n\nimport { ConnectionAction } from '../../models/dashboard.model';\nimport { ConnectionInfoPropsWithSetters } from '../../models/modals.model';\n\nexport const getActionStatus = (isActive: boolean) =>\n    `modal-action-button__${isActive ? 'active' : 'inactive'}`;\n\nexport const GetActionButton = (\n    { actionType, isActive }: ConnectionAction,\n    connectionInfoPropsWithSetters: ConnectionInfoPropsWithSetters\n) => {\n    const actionLabel = useGetTranslatedLabel(actionNames[actionType]);\n\n    return (\n        <ButtonWithPostHandler\n            key={actionType}\n            isActive={isActive}\n            className={`modal-action-button ${getActionStatus(isActive)}`}\n            buttonName={actionLabel}\n            buttonHandler={\n                isActive\n                    ? () => modalActionHandlers[actionType](connectionInfoPropsWithSetters)\n                    : () => {}\n            }\n        />\n    );\n};\n\nexport const Actions = (props: ConnectionInfoPropsWithSetters) => (\n    <section className=\"actions\">\n        <section className=\"actions-main\">\n            {props.actions.main.map((action: ConnectionAction) => GetActionButton(action, props))}\n        </section>\n        <WPSAction {...props} />\n    </section>\n);\n","import React from 'react';\n\nimport { useGetTranslatedLabels } from '../../services/i18n.service';\n\nimport { modalLabels } from '../../models/modals.model';\n\nexport type CredentialsProps = {\n    password: string | null;\n    networkId: string;\n};\n\nexport const Credentials = ({ password, networkId }: CredentialsProps) => {\n    const [networkNameLabel, passwordLabel] = useGetTranslatedLabels([\n        modalLabels.networkNameLabel,\n        modalLabels.passwordLabel,\n    ]);\n    return (\n        <section className=\"modal-connection-credentials\">\n            <section className=\"modal-connection-credentials-pair\">\n                <span className=\"modal-connection-credentials-pair_label\">{networkNameLabel}:</span>\n                <b className=\"modal-connection-credentials-pair_value\">{` ${networkId}`}</b>\n            </section>\n            <section className=\"modal-connection-credentials_pair\">\n                <span className=\"modal-connection-credentials-pair_label\">{passwordLabel}:</span>\n                <b className=\"modal-connection-credentials-pair_value\">{` ${password}`}</b>\n            </section>\n        </section>\n    );\n};\n","import QRCode from 'qrcode';\n\nexport const generateQR = async (url: string): Promise<string> => await QRCode.toDataURL(url);\n","import React, { useEffect, useState } from 'react';\nimport './connection.content.scss';\n\nimport { Logo } from '../common/logo';\nimport { Actions } from './actions';\nimport { Credentials } from './credentials';\n\nimport { generateQR } from '../../services/qr-code-generator.service';\nimport { useGetDynamicTranslatedLabel, useGetTranslatedLabel } from '../../services/i18n.service';\n\nimport { ConnectionInfoProps, dynamicModalLabels, modalLabels } from '../../models/modals.model';\n\nexport const ConnectionModalContent = React.memo((connectionInfoProps: ConnectionInfoProps) => {\n    const {\n        credentials: { networkId, password },\n        url,\n        name,\n        range,\n    } = connectionInfoProps;\n\n    const description = useGetTranslatedLabel(modalLabels.connectionDescriptionLabel);\n    const title = useGetDynamicTranslatedLabel(dynamicModalLabels.connectionTitleLabel, [\n        name,\n        range,\n    ]);\n\n    const [qrCodeBase64, setQRCode] = useState('');\n    const [logoSrc, setLogo] = useState('');\n\n    useEffect(() => {\n        generateQR(url).then(setQRCode).catch(setQRCode);\n    }, [url, setQRCode]);\n\n    return (\n        <section className=\"modal-connection\">\n            <h1 className=\"modal-connection_print-title\">KEENETIC</h1>\n            <h3 className=\"modal-connection_title\">{title}</h3>\n            {logoSrc ? <Logo src={logoSrc} className=\"connection-logo\" /> : null}\n            <p className=\"modal-connection_description\">{description}</p>\n            <Logo src={qrCodeBase64} className=\"modal-connection_qr-code\" />\n            <Credentials password={password} networkId={networkId} />\n            <Actions\n                {...{\n                    ...connectionInfoProps,\n                    setLogo,\n                }}\n            />\n        </section>\n    );\n});\n","import React, { useContext, PropsWithChildren } from 'react';\n\nimport './modal.scss';\n\nimport { Button } from './button';\n\nimport { ModalContext } from '../../context/modal.context';\nimport { ModalContentComponents } from '../../models/modals.model';\nimport { modalContentTypes } from '../../constants/modal.constants';\nimport { ConnectionModalContent } from '../modal-content/connection.content';\n\nexport type ModalComponent = PropsWithChildren<{\n    setModal: (value: null) => void;\n}>;\n\nconst modalContentComponents: ModalContentComponents = {\n    [modalContentTypes.connectionContentType]: ConnectionModalContent,\n};\n\nexport const ModalComponent = React.memo(({ children, setModal }: ModalComponent) => (\n    <section\n        className=\"modal-background\"\n        onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) =>\n            (e.target as HTMLElement).className === 'modal-background' && setModal(null)\n        }\n    >\n        <section className=\"modal-content\">\n            <Button\n                className=\"close-modal-button\"\n                buttonName=\"x\"\n                buttonHandler={() => setModal(null)}\n            />\n            {children}\n        </section>\n    </section>\n));\n\nexport const Modal = React.memo(() => {\n    const { modalInfo, setModal } = useContext(ModalContext);\n    const ModalContent = modalInfo ? modalContentComponents[modalInfo.type] : null;\n\n    return ModalContent && modalInfo ? (\n        <ModalComponent setModal={setModal}>\n            <ModalContent {...modalInfo} />\n        </ModalComponent>\n    ) : null;\n});\n","import React, { PropsWithChildren } from 'react';\nimport './content-wrapper.scss';\n\nimport { Header } from '../../components/dashboard/header/header';\nimport { ContextLoader } from '../../components/common/loader';\nimport { NavigationBar } from '../../components/dashboard/nvagation-bar/navigation-bar';\nimport { Modal } from '../../components/common/modal';\n\nimport { useExpandCollapseHook } from '../../hooks/expand-collpase.hook';\nimport { useToggleNavBar } from '../../hooks/toggle-nav-bar.recoil.hook';\nimport { WithModalContext } from '../../context/modal.context';\nimport { WithLoaderContext } from '../../context/loader.context';\n\nexport const ContentWrapper = ({ children }: PropsWithChildren<{}>) => {\n    const { isNavBarExpanded } = useToggleNavBar();\n    const expandCollapseClassName = useExpandCollapseHook(isNavBarExpanded);\n\n    return (\n        <>\n            <WithLoaderContext>\n                <WithModalContext>\n                    <Modal />\n                    <ContextLoader />\n                    <Header />\n                    <main>\n                        <NavigationBar />\n                        <section className={`content content__${expandCollapseClassName}`}>\n                            {children}\n                        </section>\n                    </main>\n                </WithModalContext>\n            </WithLoaderContext>\n        </>\n    );\n};\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { RouteComponentProps } from 'react-router';\nimport { RecoilRoot } from 'recoil';\n\nimport { LoginPage } from './login/login';\nimport { ContentWrapper } from './content-wrapper/content-wrapper';\n\nimport {\n    componentsToRender,\n    dashboardPath,\n    rootControlPanelPath,\n    rootPath,\n} from '../constants/router.constants';\n\nconst { NODE_ENV, PUBLIC_URL } = process.env;\nconst basename = NODE_ENV === 'development' ? '/' : PUBLIC_URL;\n\nexport const render = ({ match: { path } }: RouteComponentProps<any>) => {\n    const ContentComponent = componentsToRender[path] || componentsToRender.default;\n\n    return (\n        <ContentWrapper>\n            <ContentComponent />\n        </ContentWrapper>\n    );\n};\n\nexport const AppRouter = () => (\n    <RecoilRoot>\n        <Router basename={basename}>\n            <Switch>\n                <Route exact path={rootPath}>\n                    <LoginPage />\n                </Route>\n\n                <Route\n                    path={[\n                        dashboardPath,\n                        `${rootControlPanelPath}/:path`,\n                        `${rootControlPanelPath}/:path/:id`,\n                    ]}\n                    render={render}\n                ></Route>\n            </Switch>\n        </Router>\n    </RecoilRoot>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { AppRouter } from './pages/router';\n\nimport './index.scss';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.unstable_createRoot(document.getElementById('root') as Element).render(\n    <React.StrictMode>\n        <AppRouter />\n    </React.StrictMode>\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}