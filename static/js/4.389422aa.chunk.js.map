{"version":3,"sources":["models/devices-list.model.ts","components/common/page-content.tsx","hooks/scroll-page.hook.ts","components/common/dirty.tsx","mock/devices-list.mock.ts","constants/devices-list.constants.ts","recoil-state/devices-list.settings.state.ts","components/common/dropdown.tsx","hooks/prepare-settings-pair-data.hook.ts","services/devices-list.service.ts","components/devices-list/devices-settings-pair.tsx","components/devices-list/devices-settings.tsx","hooks/toggle-dirty.hook.ts","pages/devices-list/devices-list.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","components/common/checkbox.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toArray.js","hooks/toggle-button-with-i18n.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["devicesListLabels","devicesDynamicListLabels","speedKeys","getClassNames","classModifier","withScroll","PageContent","React","memo","children","useState","setWithScroll","useEffect","listener","Boolean","window","pageYOffset","addEventListener","removeEventListener","useScrollPageListener","className","Dirty","onSave","onCancel","isDirty","isValid","useGetTranslatedLabels","commonLabels","saveButtonLabel","cancelButtonLabel","disabled","buttonHandler","buttonName","deviceSettings","common","value","unitId","upload","download","filterOptions","id","label","withoutFilteringLabel","withoutADCLabel","familyLabel","speedOptions","cardsLabels","kbitsLabel","mbitsLabel","speedRange","isAsymmetric","filterId","defaultFilterState","sAtom","filterState","defaultSpeedStates","speedStates","defaultAsymmetricState","asymmetricState","settingsDirtyState","sSelector","get","filter","default","input","asymmetric","deviceDirtyState","isDirtyFilters","isDirtyAsymmetric","isDirtySpeed","some","v","getSpeedValidatorState","key","min","max","speedValidatorState","validatorState","isCommonValid","isUploadValid","isDownloadValid","Dropdown","dropdownOptions","onChange","useMemo","find","isSelected","onChangeHandler","useCallback","optionId","target","map","DropdownWithInput","classNameModifier","onInputChange","preparedValue","trim","parseFloat","onDropdownChange","Number","name","useGetSettingPairData","state","options","getSelectedOptionId","useRecoilState","setState","optionLabels","i18nLabel","i18nOptionLabels","selectedOptionId","i","getDropdownOptions","SettingsValue","isAligned","getSelectedFilterId","FilterPair","pairData","speedValueRangeErrorLabel","getSelectedSpeedId","SpeedPair","speedStateKey","useRecoilValue","i18nErrorMessage","useGetDynamicTranslatedLabel","AsymmetricPair","checked","Settings","settingsDescriptionLabel","useGetTranslatedLabel","navActionTypes","internetSafety","speedLimitLabel","asymmetricLabel","DevicesSettings","useToggleButtonWithI18n","displayDeviceSettingsLabel","hideDeviceSettingsLabel","i18nLabels","isHidden","toggleDetailsVisibility","setDeviceValues","devicesSettings","forEach","set","DevicesList","DFState","setDFState","FState","setFState","DAState","setDAState","AState","setAState","DCState","setDCState","CState","setCState","DDState","setDDState","DState","setDState","DUState","setDUState","UState","setUState","cb","useDirty","useGetTranslatedLabelsObject","titleLabel","descriptionLabel","unregisteredDevicesTitleLabel","unregisteredDevicesDescriptionLabel","registeredDevicesTitleLabel","blockedDevicesDescriptionLabel","blockedDevicesTitleLabel","addDeviceButtonLabel","console","log","_iterableToArray","iter","Symbol","iterator","Object","Array","from","setCheckboxClassName","isActive","setCheckboxBarClassName","setCheckboxClassNameDisabled","isDisable","Checkbox","triggerCheckbox","onClick","SimpleCheckBox","type","_toArray","arr","labels","_toConsumableArray","isArray","arrayLikeToArray","iterableToArray","unsupportedIterableToArray","TypeError"],"mappings":"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","file":"static/js/4.389422aa.chunk.js","sourcesContent":["import { SetterOrUpdater } from 'recoil';\n\nexport enum devicesListLabels {\n    titleLabel = 'titleLabel',\n    descriptionLabel = 'descriptionLabel',\n    unregisteredDevicesTitleLabel = 'unregisteredDevicesTitleLabel',\n    unregisteredDevicesDescriptionLabel = 'unregisteredDevicesDescriptionLabel',\n    registeredDevicesTitleLabel = 'registeredDevicesTitleLabel',\n    blockedDevicesTitleLabel = 'blockedDevicesTitleLabel',\n    blockedDevicesDescriptionLabel = 'blockedDevicesDescriptionLabel',\n    addDeviceButtonLabel = 'addDeviceButtonLabel',\n    displayDeviceSettingsLabel = 'displayDeviceSettingsLabel',\n    hideDeviceSettingsLabel = 'hideDeviceSettingsLabel',\n    settingsDescriptionLabel = 'settingsDescriptionLabel',\n    withoutFilteringLabel = 'withoutFilteringLabel',\n    withoutADCLabel = 'withoutADCLabel',\n    familyLabel = 'familyLabel',\n    speedLimitLabel = 'speedLimitLabel',\n    asymmetricLabel = 'asymmetricLabel',\n}\n\nexport enum devicesDynamicListLabels {\n    speedValueRangeErrorLabel = 'speedValueRangeErrorLabel',\n}\n\nexport enum speedKeys {\n    common = 'common',\n    upload = 'upload',\n    download = 'download',\n}\n\nexport type SpeedValue = {\n    value: number;\n    unitId: string;\n};\n\nexport type DeviceSettings = {\n    isAsymmetric: boolean;\n    filterId: string;\n    speedLimits: {\n        common: SpeedValue;\n        upload: SpeedValue;\n        download: SpeedValue;\n    };\n};\n\nexport type DevicesSetting<T> = {\n    set: SetterOrUpdater<T>;\n    state: T;\n};\n\nexport type DeviceSettingsStates =\n    | DevicesSetting<boolean>\n    | DevicesSetting<string>\n    | DevicesSetting<SpeedValue>;\n\nexport type DevicesSettings = Array<DeviceSettingsStates>;\n","import React, { PropsWithChildren } from 'react';\n\nimport { useScrollPageListener } from '../../hooks/scroll-page.hook';\n\nexport type PageContentProps = {\n    classModifier?: string;\n};\n\nexport const getClassNames = (classModifier: string, withScroll: boolean) =>\n    `page-content ${classModifier} ${withScroll ? 'page-content__with-scroll' : ''}`;\n\nexport const PageContent = React.memo(\n    ({ children, classModifier = '' }: PropsWithChildren<PageContentProps>) => {\n        const withScroll = useScrollPageListener();\n        return <section className={getClassNames(classModifier, withScroll)}>{children}</section>;\n    }\n);\n","import { useEffect, useState } from 'react';\n\nconst scrollEventName = 'scroll';\n\nexport const useScrollPageListener = () => {\n    const [withScroll, setWithScroll] = useState(false);\n    useEffect(() => {\n        const listener = () => setWithScroll(Boolean(window.pageYOffset));\n\n        window.addEventListener(scrollEventName, listener);\n        return () => window.removeEventListener(scrollEventName, listener);\n    }, [setWithScroll]);\n\n    return withScroll;\n};\n","import React from 'react';\n\nimport { Button } from './button';\n\nimport { useGetTranslatedLabels } from '../../services/i18n.service';\n\nimport { commonLabels } from '../../models/common.model';\n\nexport type DirtyProps = {\n    isDirty: boolean;\n    isValid: boolean;\n    onSave: () => void;\n    onCancel: () => void;\n};\nexport const Dirty = React.memo(({ onSave, onCancel, isDirty, isValid }: DirtyProps) => {\n    const [saveButtonLabel, cancelButtonLabel] = useGetTranslatedLabels([\n        commonLabels.saveButtonLabel,\n        commonLabels.cancelButtonLabel,\n    ]);\n\n    return (\n        <section className={`dirty-section dirty-section__${isDirty ? 'visible' : 'hidden'}`}>\n            <Button\n                disabled={!isValid}\n                buttonHandler={onSave}\n                buttonName={saveButtonLabel}\n                className=\"confirmation-button confirmation-button__save\"\n            />\n            <Button\n                buttonHandler={onCancel}\n                buttonName={cancelButtonLabel}\n                className=\"confirmation-button confirmation-button__cancel\"\n            />\n        </section>\n    );\n});\n","import { DeviceSettings } from '../models/devices-list.model';\n\nexport const deviceSettings: DeviceSettings = {\n    isAsymmetric: false,\n    filterId: '431',\n    speedLimits: {\n        common: {\n            value: 0,\n            unitId: '123',\n        },\n        upload: {\n            value: 0,\n            unitId: '123',\n        },\n        download: {\n            value: 0,\n            unitId: '123',\n        },\n    },\n};\n","import { devicesListLabels } from '../models/devices-list.model';\nimport { Options } from '../models/common.model';\nimport { cardsLabels } from '../models/cards.model';\n\nexport const filterOptions: Options<devicesListLabels> = [\n    {\n        id: '123',\n        label: devicesListLabels.withoutFilteringLabel,\n    },\n    {\n        id: '321',\n        label: devicesListLabels.withoutADCLabel,\n    },\n    {\n        id: '431',\n        label: devicesListLabels.familyLabel,\n    },\n];\n\nexport const speedOptions: Options<cardsLabels> = [\n    {\n        id: '123',\n        label: cardsLabels.kbitsLabel,\n    },\n    {\n        id: '321',\n        label: cardsLabels.mbitsLabel,\n    },\n];\n\nexport const speedRange = [64, 1000000];\n","import { sAtom, sSelector } from '../utils/simple-recoil.util';\n\nimport { deviceSettings } from '../mock/devices-list.mock';\nimport { speedKeys, SpeedValue } from '../models/devices-list.model';\nimport { speedRange } from '../constants/devices-list.constants';\n\nconst {\n    isAsymmetric,\n    filterId,\n    speedLimits: { common, download, upload },\n} = deviceSettings;\n\nexport const defaultFilterState = sAtom<string>(filterId);\nexport const filterState = sAtom<string>(filterId);\n\nexport const defaultSpeedStates = {\n    [speedKeys.common]: sAtom<SpeedValue>({ ...common }),\n    [speedKeys.upload]: sAtom<SpeedValue>({ ...upload }),\n    [speedKeys.download]: sAtom<SpeedValue>({ ...download }),\n};\n\nexport const speedStates = {\n    [speedKeys.common]: sAtom<SpeedValue>({ ...common }),\n    [speedKeys.upload]: sAtom<SpeedValue>({ ...upload }),\n    [speedKeys.download]: sAtom<SpeedValue>({ ...download }),\n};\n\nexport const defaultAsymmetricState = sAtom<boolean>(isAsymmetric);\nexport const asymmetricState = sAtom<boolean>(isAsymmetric);\n\nexport const settingsDirtyState = sSelector(({ get }) => ({\n    filter: {\n        default: get(defaultFilterState),\n        input: get(filterState),\n    },\n    asymmetric: {\n        default: get(defaultAsymmetricState),\n        input: get(asymmetricState),\n    },\n    common: {\n        default: get(defaultSpeedStates.common),\n        input: get(speedStates.common),\n    },\n    upload: {\n        default: get(defaultSpeedStates.upload),\n        input: get(speedStates.upload),\n    },\n    download: {\n        default: get(defaultSpeedStates.download),\n        input: get(speedStates.download),\n    },\n}));\n\nexport const deviceDirtyState = sSelector<boolean>(({ get }) => {\n    const { filter, asymmetric, common, download, upload } = get(settingsDirtyState);\n    const isDirtyFilters = filter.default !== filter.input;\n    const isDirtyAsymmetric = asymmetric.default !== asymmetric.input;\n    const isDirtySpeed = [common, download, upload].some(\n        (v) => v.default.value !== v.input.value || v.default.unitId !== v.input.unitId\n    );\n\n    return isDirtyFilters || isDirtyAsymmetric || isDirtySpeed;\n});\n\nexport const getSpeedValidatorState = (key: speedKeys) =>\n    sSelector(({ get }) => {\n        const { value }: SpeedValue = get(speedStates[key]);\n        const [min, max] = speedRange;\n\n        return value === 0 || (value >= min && value <= max);\n    });\n\nexport const speedValidatorState = {\n    common: getSpeedValidatorState(speedKeys.common),\n    upload: getSpeedValidatorState(speedKeys.upload),\n    download: getSpeedValidatorState(speedKeys.download),\n};\n\nexport const validatorState = sSelector<boolean>(({ get }) => {\n    const isAsymmetric = get(asymmetricState);\n    const isCommonValid = get(speedValidatorState.common);\n    const isUploadValid = get(speedValidatorState.upload);\n    const isDownloadValid = get(speedValidatorState.download);\n\n    return isAsymmetric ? isUploadValid && isDownloadValid : isCommonValid;\n});\n","import React, { useCallback, useMemo } from 'react';\nimport './dropdown.scss';\n\nimport { Input } from './input';\n\nimport { DropdownOptions } from '../../models/common.model';\nimport { SpeedValue } from '../../models/devices-list.model';\n\nexport type DropdownProps = {\n    onChange: (value: string) => void;\n    dropdownOptions: DropdownOptions<string>;\n};\n\nexport type DropdownWithInput = {\n    value: string | number;\n    dropdownOptions: DropdownOptions<string>;\n    onChange: (speedValue: SpeedValue) => void;\n    classNameModifier?: string;\n};\n\nexport const Dropdown = React.memo(({ dropdownOptions, onChange }: DropdownProps) => {\n    const id = useMemo(\n        () => (dropdownOptions.find(({ isSelected }) => isSelected) || dropdownOptions[0]).id,\n        [dropdownOptions]\n    );\n\n    const onChangeHandler = useCallback(\n        ({ target: { value: optionId } }) => {\n            onChange(optionId);\n        },\n        [onChange]\n    );\n\n    return (\n        <select className=\"dropdown\" value={id} onChange={onChangeHandler}>\n            {dropdownOptions.map(({ id, label }) => (\n                <option key={id} value={id}>\n                    {label}\n                </option>\n            ))}\n        </select>\n    );\n});\n\nexport const DropdownWithInput = React.memo(\n    ({ dropdownOptions, onChange, value, classNameModifier }: DropdownWithInput) => {\n        const unitId = useMemo(\n            () => (dropdownOptions.find(({ isSelected }) => isSelected) || dropdownOptions[0]).id,\n            [dropdownOptions]\n        );\n\n        const onInputChange = useCallback(\n            (value: string) => {\n                const preparedValue = value.trim();\n                onChange({ value: parseFloat(preparedValue) || 0, unitId });\n            },\n            [onChange, unitId]\n        );\n\n        const onDropdownChange = useCallback(\n            (unitId: string) => {\n                onChange({ value: Number(value), unitId });\n            },\n            [value, onChange]\n        );\n\n        return (\n            <section className={`dropdown-with-input ${classNameModifier}`}>\n                <Input\n                    value={value}\n                    onChange={onInputChange}\n                    name=\"dropdowm-input\"\n                    className=\"dropdown-with-input__input\"\n                />\n                <label className=\"dropdown-wrapper\">\n                    <Dropdown dropdownOptions={dropdownOptions} onChange={onDropdownChange} />\n                </label>\n            </section>\n        );\n    }\n);\n","import { useMemo } from 'react';\nimport { RecoilState, useRecoilState } from 'recoil';\n\nimport { getDropdownOptions } from '../services/devices-list.service';\nimport { useGetTranslatedLabels } from '../services/i18n.service';\n\nimport { Options } from '../models/common.model';\nimport { Labels } from '../models/i18n.model';\n\nexport const useGetSettingPairData = <S>(\n    state: RecoilState<S>,\n    options: Options<Labels>,\n    label: Labels,\n    getSelectedOptionId: (value: S) => string\n) => {\n    const [value, setState] = useRecoilState<S>(state);\n    const optionLabels = useMemo(() => options.map(({ label }) => label), [options]);\n    const [i18nLabel, ...i18nOptionLabels] = useGetTranslatedLabels([label, ...optionLabels]);\n\n    const selectedOptionId = getSelectedOptionId(value);\n    const dropdownOptions = useMemo(\n        () => getDropdownOptions(options, i18nOptionLabels, selectedOptionId),\n        [options, i18nOptionLabels, selectedOptionId]\n    );\n\n    return {\n        value,\n        setState,\n        dropdownOptions,\n        i18nLabel,\n    };\n};\n","import { DropdownOptions, Option, Options } from '../models/common.model';\nimport { Labels } from '../models/i18n.model';\n\nexport const getDropdownOptions = (\n    options: Options<Labels>,\n    i18nOptionLabels: Array<string>,\n    filterId: string\n): DropdownOptions<string> =>\n    options.map(({ id }: Option<Labels>, i: number) => ({\n        id,\n        label: i18nOptionLabels[i],\n        isSelected: id === filterId,\n    }));\n","import React, { PropsWithChildren } from 'react';\nimport './devices-settings-pair.scss';\n\nimport { Dropdown, DropdownWithInput } from '../common/dropdown';\nimport { SimpleCheckBox } from '../common/checkbox';\n\nimport { Labels } from '../../models/i18n.model';\n\nimport {\n    asymmetricState,\n    filterState,\n    speedStates,\n    speedValidatorState,\n} from '../../recoil-state/devices-list.settings.state';\n\nimport { devicesDynamicListLabels, speedKeys, SpeedValue } from '../../models/devices-list.model';\nimport { filterOptions, speedOptions, speedRange } from '../../constants/devices-list.constants';\nimport { useGetSettingPairData } from '../../hooks/prepare-settings-pair-data.hook';\nimport { useRecoilValue } from 'recoil';\nimport { useGetDynamicTranslatedLabel } from '../../services/i18n.service';\n\nexport type DeviceSettingsPairProps = {\n    label: Labels;\n};\n\nexport type SpeedPairProps = DeviceSettingsPairProps & {\n    speedStateKey: speedKeys;\n};\n\nexport type AsymmetricPairProps = DeviceSettingsPairProps & {\n    name: string;\n};\n\nexport type SettingsValueProps = {\n    i18nLabel: string;\n    isAligned?: boolean;\n};\nexport const SettingsValue = ({\n    children,\n    i18nLabel,\n    isAligned,\n}: PropsWithChildren<SettingsValueProps>) => (\n    <section className={`setting-pair ${isAligned ? ' setting-pair__aligned' : ''}`}>\n        <p className=\"page-text\">{i18nLabel}</p>\n        {children}\n    </section>\n);\n\nexport const getSelectedFilterId = (filterId: string): string => filterId;\nexport const FilterPair = React.memo(({ label }: DeviceSettingsPairProps) => {\n    const pairData = useGetSettingPairData(filterState, filterOptions, label, getSelectedFilterId);\n    const { i18nLabel, setState, dropdownOptions } = pairData;\n\n    return (\n        <SettingsValue i18nLabel={i18nLabel}>\n            <Dropdown onChange={setState} dropdownOptions={dropdownOptions} />\n        </SettingsValue>\n    );\n});\n\nconst { speedValueRangeErrorLabel } = devicesDynamicListLabels;\nexport const getSelectedSpeedId = ({ unitId }: SpeedValue) => unitId;\nexport const SpeedPair = React.memo(({ speedStateKey, label }: SpeedPairProps) => {\n    const state = speedStates[speedStateKey];\n    const pairData = useGetSettingPairData(state, speedOptions, label, getSelectedSpeedId);\n    const { i18nLabel, setState, dropdownOptions, value } = pairData;\n\n    const isValid = useRecoilValue(speedValidatorState[speedStateKey]);\n    const i18nErrorMessage = useGetDynamicTranslatedLabel(speedValueRangeErrorLabel, speedRange);\n\n    return (\n        <SettingsValue i18nLabel={i18nLabel}>\n            <DropdownWithInput\n                value={value.value || ''}\n                onChange={setState}\n                dropdownOptions={dropdownOptions}\n                classNameModifier={isValid ? '' : 'invalid'}\n            />\n            {isValid ? null : <p className=\"page-text__error-inline\">{i18nErrorMessage}</p>}\n        </SettingsValue>\n    );\n});\n\nexport const AsymmetricPair = React.memo(({ name, label }: AsymmetricPairProps) => {\n    const pairData = useGetSettingPairData(asymmetricState, [], label, () => '');\n    const { setState, i18nLabel, value: checked } = pairData;\n\n    const onChangeHandler = () => setState((checked: boolean) => !checked);\n\n    return (\n        <SettingsValue i18nLabel={i18nLabel} isAligned>\n            <SimpleCheckBox name={name} checked={checked} onChange={onChangeHandler} />\n        </SettingsValue>\n    );\n});\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\n\nimport { asymmetricState } from '../../recoil-state/devices-list.settings.state';\n\nimport { Button } from '../common/button';\nimport { FilterPair, SpeedPair, AsymmetricPair } from './devices-settings-pair';\n\nimport { useToggleButtonWithI18n } from '../../hooks/toggle-button-with-i18n';\nimport { useGetTranslatedLabel } from '../../services/i18n.service';\n\nimport { devicesListLabels, speedKeys } from '../../models/devices-list.model';\nimport { cardsLabels } from '../../models/cards.model';\nimport { navActionTypes } from '../../models/nav.model';\n\nexport const Settings = React.memo(() => {\n    const isAsymmetric = useRecoilValue(asymmetricState);\n\n    const settingsDescriptionLabel = useGetTranslatedLabel(\n        devicesListLabels.settingsDescriptionLabel\n    );\n\n    return (\n        <section className=\"settings\">\n            <p className=\"page-text\">{settingsDescriptionLabel}</p>\n            <section className=\"page-section\">\n                <FilterPair label={navActionTypes.internetSafety} />\n                <SpeedPair\n                    speedStateKey={isAsymmetric ? speedKeys.download : speedKeys.common}\n                    label={isAsymmetric ? cardsLabels.download : devicesListLabels.speedLimitLabel}\n                />\n                <AsymmetricPair name=\"asymmetric\" label={devicesListLabels.asymmetricLabel} />\n                {isAsymmetric ? (\n                    <SpeedPair speedStateKey={speedKeys.upload} label={cardsLabels.upload} />\n                ) : null}\n            </section>\n        </section>\n    );\n});\n\nexport const DevicesSettings = React.memo(() => {\n    const { i18nLabels, isHidden, toggleDetailsVisibility } = useToggleButtonWithI18n([\n        devicesListLabels.displayDeviceSettingsLabel,\n        devicesListLabels.hideDeviceSettingsLabel,\n    ]);\n    const [displayDeviceSettingsLabel, hideDeviceSettingsLabel] = i18nLabels;\n\n    return (\n        <section className=\"devices-settings\">\n            <Button\n                buttonName={isHidden ? displayDeviceSettingsLabel : hideDeviceSettingsLabel}\n                buttonHandler={toggleDetailsVisibility}\n                className=\"details-button\"\n            />\n            {isHidden ? null : <Settings />}\n        </section>\n    );\n});\n","import { RecoilValueReadOnly, SetterOrUpdater, useRecoilState, useRecoilValue } from 'recoil';\nimport {\n    asymmetricState,\n    defaultAsymmetricState,\n    defaultFilterState,\n    defaultSpeedStates,\n    filterState,\n    speedStates,\n} from '../recoil-state/devices-list.settings.state';\nimport { DeviceSettingsStates, DevicesSettings } from '../models/devices-list.model';\n\n// TODO clarify how to fix casting\nconst setDeviceValues = (devicesSettings: DevicesSettings) =>\n    devicesSettings.forEach(({ state, set }: DeviceSettingsStates) =>\n        (set as SetterOrUpdater<boolean>)(state as boolean)\n    );\n\nexport const useDirty = (validatorState: RecoilValueReadOnly<boolean>) => {\n    const isDirty = useRecoilValue(validatorState);\n\n    const [DFState, setDFState] = useRecoilState(defaultFilterState);\n    const [FState, setFState] = useRecoilState(filterState);\n\n    const [DAState, setDAState] = useRecoilState(defaultAsymmetricState);\n    const [AState, setAState] = useRecoilState(asymmetricState);\n\n    const [DCState, setDCState] = useRecoilState(defaultSpeedStates.common);\n    const [CState, setCState] = useRecoilState(speedStates.common);\n    const [DDState, setDDState] = useRecoilState(defaultSpeedStates.download);\n    const [DState, setDState] = useRecoilState(speedStates.download);\n    const [DUState, setDUState] = useRecoilState(defaultSpeedStates.upload);\n    const [UState, setUState] = useRecoilState(speedStates.upload);\n\n    return {\n        isDirty,\n        onSave: (cb: any) => () => {\n            cb();\n            setDeviceValues([\n                {\n                    set: setDFState,\n                    state: FState,\n                },\n                {\n                    set: setDAState,\n                    state: AState,\n                },\n                {\n                    set: setDCState,\n                    state: CState,\n                },\n                {\n                    set: setDDState,\n                    state: DState,\n                },\n                {\n                    set: setDUState,\n                    state: UState,\n                },\n            ]);\n        },\n        onCancel: () =>\n            setDeviceValues([\n                {\n                    set: setFState,\n                    state: DFState,\n                },\n                {\n                    set: setAState,\n                    state: DAState,\n                },\n                {\n                    set: setCState,\n                    state: DCState,\n                },\n                {\n                    set: setDState,\n                    state: DDState,\n                },\n                {\n                    set: setUState,\n                    state: DUState,\n                },\n            ]),\n    };\n};\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport '../../styles/typography.page.scss';\n\nimport { Button } from '../../components/common/button';\nimport { PageContent } from '../../components/common/page-content';\nimport { Dirty } from '../../components/common/dirty';\n\nimport { DevicesSettings } from '../../components/devices-list/devices-settings';\n\nimport { deviceDirtyState, validatorState } from '../../recoil-state/devices-list.settings.state';\nimport { useGetTranslatedLabelsObject } from '../../services/i18n.service';\nimport { useDirty } from '../../hooks/toggle-dirty.hook';\n\nimport { devicesListLabels } from '../../models/devices-list.model';\n\nexport const DevicesList = () => {\n    const { isDirty, onCancel, onSave } = useDirty(deviceDirtyState);\n    const isValid = useRecoilValue(validatorState);\n\n    const i18nLabels = useGetTranslatedLabelsObject([\n        devicesListLabels.titleLabel,\n        devicesListLabels.descriptionLabel,\n        devicesListLabels.unregisteredDevicesTitleLabel,\n        devicesListLabels.unregisteredDevicesDescriptionLabel,\n        devicesListLabels.registeredDevicesTitleLabel,\n        devicesListLabels.blockedDevicesDescriptionLabel,\n        devicesListLabels.blockedDevicesTitleLabel,\n        devicesListLabels.addDeviceButtonLabel,\n    ]);\n\n    return (\n        <PageContent classModifier=\"devices\">\n            <h1 className=\"page-title\">{i18nLabels.titleLabel}</h1>\n            <section className=\"page-content-wrapper\">\n                <p className=\"page-text\">{i18nLabels.descriptionLabel}</p>\n                <h2 className=\"page-sub-title\">{i18nLabels.unregisteredDevicesTitleLabel}</h2>\n                <p className=\"page-text\">{i18nLabels.unregisteredDevicesDescriptionLabel}</p>\n                <hr />\n                <DevicesSettings />\n                <h2 className=\"page-sub-title\">{i18nLabels.registeredDevicesTitleLabel}</h2>\n                <hr />\n                <h2 className=\"page-sub-title\">{i18nLabels.blockedDevicesTitleLabel}</h2>\n                <p className=\"page-text\">{i18nLabels.blockedDevicesDescriptionLabel}</p>\n                <hr />\n                <Button\n                    className=\"show-more-button\"\n                    buttonHandler={() => {}}\n                    buttonName={i18nLabels.addDeviceButtonLabel}\n                ></Button>\n            </section>\n            <Dirty\n                onCancel={onCancel}\n                onSave={onSave(() => console.log('saved'))}\n                isDirty={isDirty}\n                isValid={isValid}\n            />\n        </PageContent>\n    );\n};\n\nexport default DevicesList;\n","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","import React from 'react';\nimport './checkbox.scss';\n\nexport type CheckboxProps = {\n    isDisable: boolean;\n    isActive: boolean;\n    triggerCheckbox: (isActive: boolean) => void;\n};\n\nexport type SimpleCheckBoxProps = {\n    name: string;\n    checked: boolean;\n    onChange: any;\n};\n\nconst setCheckboxClassName = (isActive: boolean) =>\n    isActive ? 'checkbox__active' : 'checkbox__inactive';\nconst setCheckboxBarClassName = (isActive: boolean) =>\n    isActive ? 'checkbox--bar__active' : 'checkbox--bar__inactive';\n\nconst setCheckboxClassNameDisabled = (isDisable: boolean) =>\n    isDisable ? 'checkbox__disabled' : 'checkbox__enabled';\n\nexport const Checkbox = React.memo(({ isActive, triggerCheckbox, isDisable }: CheckboxProps) => (\n    <section\n        className={`checkbox ${setCheckboxClassName(isActive)} ${setCheckboxClassNameDisabled(\n            isDisable\n        )}`}\n    >\n        <span\n            onClick={() => !isDisable && triggerCheckbox(!isActive)}\n            className={`checkbox--bar ${setCheckboxBarClassName(isActive)}`}\n        ></span>\n    </section>\n));\n\nexport const SimpleCheckBox = React.memo(({ name, checked, onChange }: SimpleCheckBoxProps) => {\n    return (\n        <input\n            type=\"checkbox\"\n            className=\"simple-checkbox\"\n            name={name}\n            checked={checked}\n            onChange={onChange}\n        ></input>\n    );\n});\n","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}","import { useCallback, useState } from 'react';\n\nimport { useGetTranslatedLabels } from '../services/i18n.service';\n\nimport { Labels } from '../models/i18n.model';\n\nexport const useToggleButtonWithI18n = (labels: Array<Labels>) => {\n    const [isHidden, toggleDetailsVisibility] = useState(true);\n    const i18nLabels = useGetTranslatedLabels(labels);\n\n    return {\n        isHidden,\n        i18nLabels,\n        toggleDetailsVisibility: useCallback(\n            () => toggleDetailsVisibility((isHidden) => !isHidden),\n            [toggleDetailsVisibility]\n        ),\n    };\n};\n","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}