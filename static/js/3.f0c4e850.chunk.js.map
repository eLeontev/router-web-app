{"version":3,"sources":["components/dashboard/cards/unknown-card.tsx","services/system-params.service.ts","components/dashboard/cards/system-card.tsx","components/dashboard/online-device/online-device.tsx","context/modal.connection.actions.transformer.ts","hooks/connection.hook.ts","components/dashboard/connection/connection.tsx","components/common/connection-image.tsx","components/dashboard/cards/network-ports-card.tsx","recoil-state/internet.state.ts","components/dashboard/internet/provider.tsx","services/traffic-graph.service.ts","utils/d3-graph.ts","components/dashboard/internet/traffic-graph.tsx","components/dashboard/internet/traffic-timing.tsx","services/traffic.time.service.ts","components/dashboard/internet/traffic.tsx","services/dynamic-detail.service.ts","components/dashboard/internet/detail.tsx","components/dashboard/internet/details.tsx","services/internet-card.service.ts","components/dashboard/internet/recoil-internet-updater.tsx","components/dashboard/cards/internet-card.tsx","components/dashboard/cards/cards.tsx","components/dashboard/cards/applications-card.tsx","services/system-card.service.ts","components/dashboard/cards/wifi-card.tsx","services/card-loader.service.ts","pages/dashboard/dashboard.tsx","components/common/checkbox.tsx","hooks/toggle-button-with-i18n.ts"],"names":["UnknownCard","type","className","message","onClose","shouldHideCloseButton","updateUptime","startedTime","daysLabel","diff","moment","format","paramHandlers","paramTypes","ramUsage","value","units","allMemory","parseFloat","split","usedRAMinPercentage","Math","random","usedRAMinUnits","round","floor","cpuUsage","uptime","currentTime","inactive","ParamRenderer","React","memo","label","useGetTranslatedLabels","i18nLabel","i18nValue","renderSystemParams","systemParams","map","systemParam","key","DynamicParams","useState","params","updateParams","cardsLabels","mbitLabel","useEffect","timerId","setInterval","activeParamTypes","param","paramType","updateParamsMock","updateActiveParamsInterval","clearInterval","getConnectionModifier","isHome","OnlineDeviceComponent","onlineDevice","countOfConnections","connectionTypes","wifi","wifiConnectionTypeMessageLabel","wiredConnectionTypeMessageLabel","deviseTypeLabel","useGetTranslatedLabel","to","alwaysActiveConnectionActionTypes","connectionActionTypes","addLogoType","printType","setIsActiveActionStatus","connectionStatus","actionType","isActive","useButtonToOpenModal","connectionInfo","name","range","setModal","useContext","ModalContext","useCallback","actions","WPS","main","action","includes","getConnectionModalInfo","ConnectionComponent","connection","channel","connectionId","setLoader","LoaderContext","setConnectionStatus","isWaiting","setWaitingStatus","triggerCheckbox","a","Promise","res","setTimeout","useTriggerCheckbox","setModalContext","channelLabel","showConnectionInfoButtonLabel","isDisable","buttonName","buttonHandler","ConnectionImg","xmlns","viewBox","fill","width","height","id","x","y","d","clipRule","fillRule","PortRenderer","isNetwork","portSpeed","portType","portUnit","index","connectionImgRenderer","portIconRenderer","internetState","sAtom","download","unit","kbitsLabel","upload","received","sent","speedTrafficState","sSelector","get","InternetConnectionDuration","useRecoilValue","connectedLabel","ProviderRenderer","providerLabel","providerType","connectionDuration","providerHeaderLabel","i18nProviderLabel","getModifier","isUpload","getRange","mbitsLabel","indexOf","mModifier","bModifier","emptyWrapper","cb","callRenderGraph","nodesRef","maxRef","withTimer","selector","modifier","dataset","parent","d3","selectAll","remove","node","getBoundingClientRect","xScale","domain","length","yScale","line","i","curve","svg","append","attr","datum","hAxis","ticks","tickSize","call","g","select","renderGraph","current","max","maxRange","currentLength","arrayLength","countOfDisplayedNodes","emptyNodes","Array","filledNodes","getDataset","navBarToggleTime","TrafficGraph","useRef","trafficValues","trafficValue","updatedTrafficValues","getLimitedCountOfNodes","isNavBarExpanded","toggleNavBarState","clearTimeout","TrafficTiming","trafficTimeFormat","getTrafficValue","getTrafficModifier","TrafficRenderer","trafficType","trafficTypeLabel","configuration","internetDetailsType","reboot","connectionEstablishedLabel","adGuardIsEnabledLabel","rebootLabel","configureLabel","dynamicActionHandlers","console","log","DefaultDetailRenderer","DetailsRendererWithTranslatedValues","detail","i18nUnit","TrafficDetailRenderer","state","ConfigurableDetailRenderer","isConfigurationType","valueLabel","buttonLabel","getDynamicDetailData","i18ButtonLabel","navActionLinks","detailRenderers","default","renderDetails","details","DetailRenderer","renderDetail","DetailsRenderer","useToggleButtonWithI18n","moreDetailsLabel","hiddenDetailsLabel","isHidden","i18nLabels","toggleDetailsVisibility","sentReceivedUnits","generateUpDownLoadTraffic","getValue","find","Number","useUpdateInternetState","updateInternetState","sentReceivedRef","sentReceivedTraffic","internetRequestDelay","RecoilInternetUpdater","trafficInfo","useRecoilState","useInitInternetState","InternetCardRenderer","cardContent","provider","cardsComponents","cardTypes","applicationType","applications","hasNoApplicationsMessage","hasNoApplicationsMessageLabel","systemType","useMemo","reduce","push","staticSystemParams","dynamicSystemParams","splitSystemParams","wifiType","connections","onlineDevices","onlineDeviceTitle","onlineDeviceTitleLabel","ports","networkPortId","port","portId","internetType","Card","card","CardComponent","title","Cards","leftCards","rightCards","cardId","cardLoaderInstance","history","isLoading","defaultCards","setCards","preloadedCards","location","replace","dashboardPath","undefined","fetchCards","finally","cardsMocks","DashboardPage","useHistory","useLoadCards","setCheckboxClassName","setCheckboxBarClassName","setCheckboxClassNameDisabled","Checkbox","onClick","SimpleCheckBox","checked","onChange","labels"],"mappings":"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","file":"static/js/3.f0c4e850.chunk.js","sourcesContent":["import React from 'react';\nimport { Message } from '../../common/message';\n\nexport type UnknownCardProps = {\n    type: string;\n};\nexport const UnknownCard = ({ type }: UnknownCardProps) => (\n    <section className=\"unknown-card\">\n        <Message\n            message={`card with type: ${type} is not found`}\n            type=\"error\"\n            onClose={() => {}}\n            shouldHideCloseButton\n        />\n    </section>\n);\n","import moment from 'moment';\n\nimport {\n    paramTypes,\n    SystemParam,\n    SystemParams,\n    SystemParamValue,\n    UpdateParams,\n} from '../models/dashboard.model';\n\nexport type ParamHandlerArguments = {\n    value: SystemParamValue;\n    startedTime: string;\n    daysLabel?: string;\n    units?: string;\n};\nexport type ParamHandlers = {\n    [key in paramTypes]: (paramHandlerArguments: ParamHandlerArguments) => SystemParamValue;\n};\n\nexport const updateRAMValue = ({ value, units }: ParamHandlerArguments): SystemParamValue => {\n    const allMemory = parseFloat((value as string).split('/')[1]);\n    const usedRAMinPercentage = Math.random();\n    const usedRAMinUnits = Math.round(usedRAMinPercentage * allMemory);\n\n    return `${Math.floor(usedRAMinPercentage * 100)}% (${usedRAMinUnits}/${allMemory} ${units})`;\n};\n\nexport const updateCPUValue = (): SystemParamValue => {\n    return `${Math.floor(Math.random() * 100)}%`;\n};\n\nexport const updateUptime = ({\n    startedTime,\n    daysLabel,\n}: ParamHandlerArguments): SystemParamValue => {\n    const diff = moment(moment().diff(moment(startedTime, 'MM-DD-YYYY')));\n\n    return `${diff.format('D')} ${daysLabel} ${diff.format('H:mm:ss')}`;\n};\n\nexport const getCurrentTime = (): SystemParamValue => {\n    const now = moment();\n    return now.format('M/DD/YYYY H:mm:ss');\n};\n\nexport const inactive = (): SystemParamValue => '';\n\nconst paramHandlers: ParamHandlers = {\n    [paramTypes.ramUsage]: updateRAMValue,\n    [paramTypes.cpuUsage]: updateCPUValue,\n    [paramTypes.uptime]: updateUptime,\n    [paramTypes.currentTime]: getCurrentTime,\n    [paramTypes.inactive]: inactive,\n};\n\nexport const updateParamsMock = (\n    activeParamTypes: SystemParams,\n    updateParams: UpdateParams,\n    startedTime: string = '',\n    daysLabel: string = '',\n    units: string = ''\n): void =>\n    updateParams(\n        activeParamTypes.map(\n            (param: SystemParam): SystemParam => ({\n                ...param,\n                value: paramHandlers[param.paramType]({\n                    value: param.value,\n                    startedTime,\n                    daysLabel,\n                    units,\n                }),\n            })\n        )\n    );\n","import React, { useEffect, useMemo, useState } from 'react';\n\nimport { splitSystemParams } from '../../../services/system-card.service';\nimport { updateParamsMock } from '../../../services/system-params.service';\nimport { useGetTranslatedLabels } from '../../../services/i18n.service';\n\nimport { updateActiveParamsInterval } from '../../../constants/cards.constants';\n\nimport { cardsLabels } from '../../../models/cards.model';\nimport {\n    CardContent,\n    DynamicParamProps,\n    SystemCardContent,\n    SystemParam,\n    SystemParams,\n} from '../../../models/dashboard.model';\n\nexport const ParamRenderer = React.memo(({ label, value }: SystemParam) => {\n    const [i18nLabel, i18nValue] = useGetTranslatedLabels([label, value as cardsLabels]);\n    return (\n        <section className=\"param-pair\">\n            <p className=\"param-pair__label\">{i18nLabel}</p>\n            <p className=\"param-pair__value\">{i18nValue || value}</p>\n        </section>\n    );\n});\n\nexport const renderSystemParams = (systemParams: SystemParams) =>\n    systemParams.map((systemParam: SystemParam) => (\n        <ParamRenderer key={systemParam.label} {...systemParam} />\n    ));\n\nexport const DynamicParams = ({ systemParams, startedTime }: DynamicParamProps) => {\n    const [params, updateParams] = useState(systemParams);\n    const [daysLabel, mbitLabel] = useGetTranslatedLabels([\n        cardsLabels.daysLabel,\n        cardsLabels.mbitLabel,\n    ]);\n\n    useEffect(() => {\n        const timerId = setInterval(() => {\n            updateParamsMock(params, updateParams, startedTime, daysLabel, mbitLabel);\n        }, updateActiveParamsInterval);\n        return () => clearInterval(timerId);\n    }, [updateParams, params, startedTime, daysLabel, mbitLabel]);\n\n    return <>{renderSystemParams(params)}</>;\n};\n\nexport const SystemCardComponent = (cardContent: CardContent) => {\n    const { systemParams, startedTime } = cardContent as SystemCardContent;\n\n    const { staticSystemParams, dynamicSystemParams } = useMemo(\n        () => splitSystemParams(systemParams),\n        [systemParams]\n    );\n    return (\n        <section className=\"card-content\">\n            {renderSystemParams(staticSystemParams)}\n            <DynamicParams systemParams={dynamicSystemParams} startedTime={startedTime} />\n        </section>\n    );\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useGetTranslatedLabel } from '../../../services/i18n.service';\nimport { connectionTypes } from '../../../constants/cards.constants';\n\nimport { OnlineDeviceProps } from '../../../models/dashboard.model';\nimport { cardsLabels } from '../../../models/cards.model';\n\nconst getConnectionModifier = (isHome: boolean) =>\n    isHome ? 'connections-count__home' : 'connections-count__guest';\n\nexport const OnlineDeviceComponent = React.memo(\n    ({ onlineDevice: { countOfConnections, type, isHome } }: OnlineDeviceProps) => {\n        const label =\n            type === connectionTypes.wifi\n                ? cardsLabels.wifiConnectionTypeMessageLabel\n                : cardsLabels.wiredConnectionTypeMessageLabel;\n        const deviseTypeLabel = useGetTranslatedLabel(label);\n\n        return (\n            <section className=\"online-device\">\n                <Link\n                    to={'/controlPanel/devicesList'}\n                    className={`connections-count ${getConnectionModifier(isHome)}`}\n                >\n                    {countOfConnections}\n                    {countOfConnections ? (\n                        <span className=\"connections-count__hint\">{countOfConnections}</span>\n                    ) : null}\n                </Link>\n                <p className=\"device-type\">{deviseTypeLabel}</p>\n            </section>\n        );\n    }\n);\n","import { ConnectionAction, ConnectionInfo } from '../models/dashboard.model';\nimport { ModalInfo } from '../models/modals.model';\nimport { connectionActionTypes } from '../constants/modal.constants';\n\nconst alwaysActiveConnectionActionTypes = [\n    connectionActionTypes.addLogoType,\n    connectionActionTypes.printType,\n];\n\nexport const setIsActiveActionStatus = (\n    { actionType, isActive }: ConnectionAction,\n    connectionStatus: boolean\n): ConnectionAction => ({\n    actionType,\n    isActive: connectionStatus ? isActive : false,\n});\n\nexport const getConnectionModalInfo = (\n    connectionInfo: ConnectionInfo,\n    name: string,\n    range: string,\n    connectionStatus: boolean\n): ModalInfo => ({\n    ...connectionInfo,\n    name,\n    range,\n    actions: {\n        WPS: setIsActiveActionStatus(connectionInfo.actions.WPS, connectionStatus),\n        main: connectionInfo.actions.main.map((action) =>\n            alwaysActiveConnectionActionTypes.includes(action.actionType)\n                ? action\n                : setIsActiveActionStatus(action, connectionStatus)\n        ),\n    },\n});\n","import { useCallback, useContext, useState } from 'react';\n\nimport { LoaderContext } from '../context/loader.context';\nimport { ModalContext } from '../context/modal.context';\n\nimport { getConnectionModalInfo } from '../context/modal.connection.actions.transformer';\n\nimport { ConnectionInfo } from '../models/dashboard.model';\n\nexport const useTriggerCheckbox = (connectionId: string, isActive: boolean) => {\n    const { setLoader } = useContext(LoaderContext);\n    const [connectionStatus, setConnectionStatus] = useState(isActive);\n    const [isWaiting, setWaitingStatus] = useState(false);\n\n    const triggerCheckbox = useCallback(\n        async (connectionStatus: boolean) => {\n            setConnectionStatus(connectionStatus);\n\n            setWaitingStatus(true);\n            setLoader(true);\n            try {\n                await new Promise((res) => setTimeout(() => res(connectionId), 2000));\n                setConnectionStatus(connectionStatus);\n            } catch {\n                setConnectionStatus(!connectionStatus);\n            } finally {\n                setWaitingStatus(false);\n                setLoader(false);\n            }\n        },\n        [connectionId, setLoader, setWaitingStatus]\n    );\n\n    return {\n        triggerCheckbox,\n        connectionStatus,\n        isWaiting,\n    };\n};\n\nexport const useButtonToOpenModal = (\n    connectionInfo: ConnectionInfo,\n    name: string,\n    range: string,\n    connectionStatus: boolean\n) => {\n    const { setModal } = useContext(ModalContext);\n\n    return useCallback(\n        () => setModal(getConnectionModalInfo(connectionInfo, name, range, connectionStatus)),\n        [connectionStatus, connectionInfo, name, range, setModal]\n    );\n};\n","import React from 'react';\n\nimport { Button } from '../../common/button';\nimport { Checkbox } from '../../common/checkbox';\n\nimport { useGetTranslatedLabels } from '../../../services/i18n.service';\nimport { useButtonToOpenModal, useTriggerCheckbox } from '../../../hooks/connection.hook';\n\nimport { ConnectionProps } from '../../../models/dashboard.model';\nimport { cardsLabels } from '../../../models/cards.model';\n\nexport const ConnectionComponent = ({\n    connection: { channel, connectionInfo, isActive, name, range, connectionId },\n}: ConnectionProps) => {\n    const { triggerCheckbox, isWaiting, connectionStatus } = useTriggerCheckbox(\n        connectionId,\n        isActive\n    );\n\n    const setModalContext = useButtonToOpenModal(connectionInfo, name, range, connectionStatus);\n\n    const [channelLabel, showConnectionInfoButtonLabel] = useGetTranslatedLabels([\n        cardsLabels.channelLabel,\n        cardsLabels.showConnectionInfoButtonLabel,\n    ]);\n\n    return (\n        <section className=\"connection\">\n            <section className=\"connection-main\">\n                <section className=\"connection-main__status\">\n                    <Checkbox\n                        isDisable={isWaiting}\n                        isActive={connectionStatus}\n                        triggerCheckbox={() => triggerCheckbox(!connectionStatus)}\n                    />\n                </section>\n                <section className=\"details\">\n                    <p className=\"details__name\">{name}</p>\n                    <section className=\"details--minor\">\n                        <p className=\"details--minor__range\">{range},</p>\n                        <p className=\"details--minor__channel\">\n                            {channelLabel} {channel}\n                        </p>\n                    </section>\n                </section>\n            </section>\n            <section className=\"connection-info\">\n                <Button\n                    className=\"show-more-button\"\n                    buttonName={showConnectionInfoButtonLabel}\n                    buttonHandler={setModalContext}\n                />\n            </section>\n        </section>\n    );\n};\n","import React from 'react';\n\nexport const ConnectionImg = () => (\n    <svg\n        className=\"port_img__svg\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"-10 -10 68 60\"\n        fill=\"none\"\n        width=\"68\"\n        height=\"60\"\n        id=\"blue-socket\"\n        x=\"442.6\"\n        y=\"444\"\n    >\n        <path\n            d=\"M0 38a2 2 0 0 0 2 2h44a2 2 0 0 0 2-2V14a2 2 0 0 0-2-2h-7V6h-4V0H13v6H9v6H2a2 2 0 0 0-2 2z\"\n            clipRule=\"evenodd\"\n            fill=\"#0098d9\"\n            fillRule=\"evenodd\"\n        ></path>\n        <path\n            d=\"M1 38a1 1 0 0 0 1 1h44a1 1 0 0 0 1-1V14a1 1 0 0 0-1-1h-8V7h-4V1H14v6h-4v6H2a1 1 0 0 0-1 1z\"\n            clipRule=\"evenodd\"\n            fill=\"#e2f1fa\"\n            fillRule=\"evenodd\"\n        ></path>\n    </svg>\n);\n","import React from 'react';\n\nimport { ConnectionImg } from '../../common/connection-image';\n\nimport { CardContent, NetworkPortsCardContent, Port } from '../../../models/dashboard.model';\n\nexport type PortProps = Port & {\n    isNetwork: boolean;\n    index: number;\n};\n\nexport const portIconRenderer = (index: number) => <p className=\"port_icon\">{index}</p>;\nexport const connectionImgRenderer = (index: number) => (\n    <p className=\"port_img\">\n        <span className=\"port_img__index\">{index}</span>\n        <ConnectionImg />\n    </p>\n);\n\nexport const PortRenderer = ({\n    isActive,\n    isNetwork,\n    portSpeed,\n    portType,\n    portUnit,\n    index,\n}: PortProps) => (\n    <section className={`port ${isNetwork ? 'port_network' : ''}`}>\n        {isNetwork ? connectionImgRenderer(index) : portIconRenderer(index)}\n        <section className=\"port-info\">\n            <p className=\"port-info_type\">{isActive ? portType : '-'}</p>\n            {isActive ? <p className=\"port-info_speed\">{`${portSpeed} ${portUnit}`}</p> : null}\n        </section>\n    </section>\n);\n\nexport const NetworkPortsCardComponent = (cardContent: CardContent) => {\n    const { ports, networkPortId } = cardContent as NetworkPortsCardContent;\n\n    return (\n        <section className=\"card-content card-content_port\">\n            {ports.map((port: Port, index: number) => (\n                <PortRenderer\n                    key={port.portId}\n                    {...port}\n                    index={index}\n                    isNetwork={port.portId === networkPortId}\n                />\n            ))}\n        </section>\n    );\n};\n","import { sAtom, sSelector } from '../utils/simple-recoil.util';\n\nimport { InternetState, SpeedTrafficState } from '../models/internet.model';\nimport { cardsLabels } from '../models/cards.model';\n\nexport const internetState = sAtom<InternetState>({\n    download: {\n        value: 0,\n        unit: cardsLabels.kbitsLabel,\n    },\n    upload: {\n        value: 0,\n        unit: cardsLabels.kbitsLabel,\n    },\n    received: {\n        value: 0,\n        unit: cardsLabels.mbitLabel,\n    },\n    sent: {\n        value: 0,\n        unit: cardsLabels.mbitLabel,\n    },\n});\n\nexport const speedTrafficState = sSelector<SpeedTrafficState>(({ get }) => ({\n    upload: get<InternetState>(internetState).upload,\n    download: get<InternetState>(internetState).download,\n}));\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport './provider.scss';\n\nimport { internetState } from '../../../recoil-state/internet.state';\n\nimport { ParamHandlerArguments, updateUptime } from '../../../services/system-params.service';\nimport { useGetTranslatedLabels } from '../../../services/i18n.service';\n\nimport { InternetProvider } from '../../../models/dashboard.model';\nimport { cardsLabels } from '../../../models/cards.model';\n\nexport type ProviderProps = InternetProvider & {\n    connectionDuration: string;\n};\n\nexport const InternetConnectionDuration = React.memo(\n    ({ startedTime, value }: ParamHandlerArguments) => {\n        useRecoilValue(internetState); // to sync with state update\n        const [connectedLabel, daysLabel] = useGetTranslatedLabels([\n            cardsLabels.connectedLabel,\n            cardsLabels.daysLabel,\n        ]);\n        return (\n            <section className=\"provider-connection-duration\">\n                {`${connectedLabel}: ${updateUptime({ startedTime, value, daysLabel })}`}\n            </section>\n        );\n    }\n);\nexport const ProviderRenderer = ({\n    providerLabel,\n    providerType,\n    connectionDuration,\n}: ProviderProps) => {\n    const [providerHeaderLabel, i18nProviderLabel] = useGetTranslatedLabels([\n        cardsLabels.providerHeaderLabel,\n        providerLabel,\n    ]);\n\n    return (\n        <section className=\"provider\">\n            <h3 className=\"provider-label\">{providerHeaderLabel}</h3>\n            <section className=\"provider-info\">\n                <span className=\"provider-info_label\">{i18nProviderLabel}</span>\n                {' / '}\n                <span className=\"provider-info_type\">{providerType}</span>\n            </section>\n            <InternetConnectionDuration value=\"\" startedTime={connectionDuration} />\n        </section>\n    );\n};\n","import { MutableRefObject } from 'react';\n\nimport { renderGraph } from '../utils/d3-graph';\n\nimport { bModifier, countOfDisplayedNodes, mModifier } from '../constants/cards.constants';\nimport { navBarToggleTime } from '../constants/common.constants';\n\nimport { TrafficValue, TrafficValues } from '../models/dashboard.model';\nimport { cardsLabels } from '../models/cards.model';\n\nexport const getModifier = (isUpload: boolean) => (isUpload ? 'upload' : 'download');\n\nconst getRange = (unit: cardsLabels) =>\n    [cardsLabels.kbitsLabel, cardsLabels.mbitsLabel].indexOf(unit) ? mModifier : bModifier;\n\nexport const getDataset = (current: TrafficValues, max: TrafficValue) => {\n    const maxRange = max.value * mModifier;\n    const currentLength = current.length;\n    const arrayLength =\n        countOfDisplayedNodes - currentLength > 0 ? countOfDisplayedNodes - currentLength : 0;\n\n    const emptyNodes = new Array(arrayLength).fill('').map(() => ({ y: 0 }));\n\n    const filledNodes = current.map(({ value, unit }: TrafficValue) => ({\n        y: (value * getRange(unit)) / maxRange,\n    }));\n\n    return [{ y: 0 }, ...emptyNodes, ...filledNodes, { y: 0 }];\n};\n\nexport const getLimitedCountOfNodes = (\n    trafficValues: TrafficValues,\n    trafficValue: TrafficValue\n): TrafficValues => {\n    let updatedTrafficValues = [...trafficValues, trafficValue];\n\n    if (updatedTrafficValues.length > countOfDisplayedNodes) {\n        const [, ...updatedTrafficValuesWithoutFirstValues] = updatedTrafficValues;\n        updatedTrafficValues = updatedTrafficValuesWithoutFirstValues;\n    }\n\n    return updatedTrafficValues;\n};\n\nconst emptyWrapper = (cb: () => void) => cb();\nexport const callRenderGraph = (\n    nodesRef: MutableRefObject<TrafficValues>,\n    maxRef: MutableRefObject<TrafficValue>,\n    isUpload: boolean,\n    withTimer: boolean\n): void | NodeJS.Timeout => {\n    const wrapper = withTimer ? setTimeout : emptyWrapper;\n    return wrapper(() => {\n        renderGraph(\n            'traffic-graph',\n            getModifier(isUpload),\n            getDataset(nodesRef.current, maxRef.current)\n        );\n    }, navBarToggleTime);\n};\n","import * as d3 from 'd3';\n\nconst offsetTop = 0;\nconst offsetRight = 0;\nconst offsetBottom = 10;\nconst offsetLeft = 0;\n\nexport const renderGraph = (selector: string, modifier: string, dataset: Array<{ y: number }>) => {\n    const parent = d3.select(`.${selector}__${modifier}`);\n    parent.selectAll('*').remove();\n\n    const {\n        width: parentWidth,\n        height: parentHeight,\n    } = (parent.node() as HTMLElement).getBoundingClientRect();\n\n    const width = parentWidth - offsetLeft - offsetRight;\n    const height = parentHeight - offsetTop - offsetBottom;\n\n    const xScale = d3\n        .scaleLinear()\n        .domain([0, dataset.length - 1])\n        .range([0, width]);\n\n    const yScale = d3.scaleLinear().domain([0, 1]).range([0, height]);\n\n    const line = d3\n        .line()\n        .x((d, i) => xScale(i))\n        .y((d: any) => height - yScale(d.y))\n        .curve(d3.curveMonotoneX);\n\n    const svg = parent\n        .append('svg')\n        .attr('width', width + offsetLeft + offsetRight)\n        .attr('height', height + offsetTop + offsetBottom);\n\n    svg.append('g')\n        .attr('transform', `translate(${offsetLeft}, ${offsetTop})`)\n        .append('path')\n        .datum(dataset)\n        .attr('class', `line__${modifier}`)\n        .attr('d', line as any);\n\n    const hAxis = d3\n        .axisRight(d3.scaleLinear().range([height, 0])) // to set base border as he first item to simple remove it\n        .ticks(6)\n        .tickSize(width);\n\n    svg.append('g')\n        .attr('class', 'h-oriented-borders')\n        .call(hAxis)\n        .call((g) => g.select('.domain').remove()) // to remove domain\n        .call((g) => g.select('.tick').remove()); // to remove the base border\n};\n","import React, { useEffect, useRef } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport './traffic-graph.scss';\n\nimport {\n    callRenderGraph,\n    getLimitedCountOfNodes,\n    getModifier,\n} from '../../../services/traffic-graph.service';\nimport { toggleNavBarState } from '../../../recoil-state/navigation.state';\n\nimport { TrafficValue, TrafficValues } from '../../../models/dashboard.model';\nimport { TrafficGraphProps } from '../../../models/internet.model';\n\nexport const TrafficGraph = ({ isUpload, current, max }: TrafficGraphProps) => {\n    const maxRef = useRef<TrafficValue>(max);\n    const nodesRef = useRef<TrafficValues>([]);\n\n    useEffect(() => {\n        nodesRef.current = getLimitedCountOfNodes(nodesRef.current, current);\n        callRenderGraph(nodesRef, maxRef, isUpload, false);\n    }, [current, isUpload]);\n\n    const isNavBarExpanded = useRecoilValue(toggleNavBarState);\n    useEffect(() => {\n        const timerId = callRenderGraph(nodesRef, maxRef, isUpload, true) as NodeJS.Timeout;\n        return () => clearTimeout(timerId);\n    }, [isNavBarExpanded, isUpload]);\n\n    return <section className={`traffic-graph traffic-graph__${getModifier(isUpload)}`}></section>;\n};\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport './traffic-timing.scss';\n\nimport { speedTrafficState } from '../../../recoil-state/internet.state';\nimport { getCurrentTiming, getStartTiming } from '../../../services/traffic.time.service';\n\nexport const TrafficTiming = React.memo(() => {\n    useRecoilValue(speedTrafficState);\n\n    return (\n        <section className=\"timing\">\n            <span className=\"timing_start\">{getStartTiming()}</span>\n            <span className=\"timing_current\">{getCurrentTiming()}</span>\n        </section>\n    );\n});\n","import moment from 'moment';\n\nimport { countOfDisplayedNodes, trafficTimeFormat } from '../constants/cards.constants';\n\nconst msModifier = 1000;\n\nexport const getCurrentTiming = (): string => moment().format(trafficTimeFormat);\nexport const getStartTiming = (): string =>\n    moment(moment().diff(countOfDisplayedNodes * msModifier)).format(trafficTimeFormat);\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport './traffic.scss';\n\nimport { TrafficGraph } from './traffic-graph';\nimport { TrafficTiming } from './traffic-timing';\n\nimport { speedTrafficState } from '../../../recoil-state/internet.state';\nimport { useGetTranslatedLabels } from '../../../services/i18n.service';\n\nimport { trafficType } from '../../../constants/cards.constants';\n\nimport { Traffic } from '../../../models/dashboard.model';\nimport { cardsLabels } from '../../../models/cards.model';\n\nexport const getTrafficValue = ({ unit, value }: { unit: string; value: any }) =>\n    `${value} ${unit}`;\nexport const getTrafficModifier = (type: trafficType) => `traffic__${type}`;\n\nexport const TrafficRenderer = React.memo(({ type, max }: Traffic) => {\n    // https://github.com/facebookexperimental/Recoil/issues/12\n    const { upload, download } = useRecoilValue(speedTrafficState);\n    const trafficValue = type === trafficType.upload ? upload : download;\n    const [trafficTypeLabel, unit] = useGetTranslatedLabels([\n        type === trafficType.upload ? cardsLabels.upload : cardsLabels.download,\n        trafficValue.unit,\n    ]);\n\n    return (\n        <section className={`traffic ${getTrafficModifier(type)}`}>\n            <section className=\"traffic-info\">\n                <section className=\"traffic-info_actual\">\n                    <span className=\"traffic-info_actual-type\">{trafficTypeLabel}: </span>\n                    <span className=\"traffic-info_actual-value\">\n                        {getTrafficValue({ unit, value: trafficValue.value })}\n                    </span>\n                </section>\n                <section className=\"traffic-info_max-speed\">\n                    {getTrafficValue({ unit, value: max.value })}\n                </section>\n            </section>\n            <TrafficGraph max={max} current={trafficValue} isUpload={type === trafficType.upload} />\n            <TrafficTiming />\n        </section>\n    );\n});\n","import { internetDetailsType } from '../constants/cards.constants';\nimport { cardsLabels } from '../models/cards.model';\n\nconst { configuration, reboot } = internetDetailsType;\nconst {\n    connectionEstablishedLabel,\n    adGuardIsEnabledLabel,\n    rebootLabel,\n    configureLabel,\n} = cardsLabels;\n\nexport type DynamicActionHandlers = {\n    configuration: () => void;\n    reboot: () => void;\n};\n\nconst dynamicActionHandlers: DynamicActionHandlers = {\n    configuration: () => console.log(123),\n    reboot: () => console.log(321),\n};\n\nexport const getDynamicDetailData = (type: internetDetailsType) => {\n    const isConfigurationType = type === configuration;\n    const valueLabel = isConfigurationType ? adGuardIsEnabledLabel : connectionEstablishedLabel;\n    const buttonLabel = isConfigurationType ? configureLabel : rebootLabel;\n    const buttonHandler = isConfigurationType\n        ? dynamicActionHandlers.configuration\n        : type === reboot\n        ? dynamicActionHandlers.reboot\n        : () => {};\n\n    return {\n        isConfigurationType,\n        valueLabel,\n        buttonLabel,\n        buttonHandler,\n    };\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useRecoilValue } from 'recoil';\n\nimport { Button } from '../../common/button';\n\nimport { useGetTranslatedLabel, useGetTranslatedLabels } from '../../../services/i18n.service';\nimport { internetState } from '../../../recoil-state/internet.state';\n\nimport { internetDetailsType } from '../../../constants/cards.constants';\n\nimport { InternetDetail, TrafficValue } from '../../../models/dashboard.model';\nimport { cardsLabels } from '../../../models/cards.model';\nimport { InternetState } from '../../../models/internet.model';\nimport { getDynamicDetailData } from '../../../services/dynamic-detail.service';\nimport { navActionLinks } from '../../../constants/nav.constants';\n\nexport const DefaultDetailRenderer = ({ label, value }: InternetDetail) => {\n    const [i18nLabel, i18nValue] = useGetTranslatedLabels([label, value as cardsLabels]);\n    return (\n        <section className=\"detail-pair\">\n            <section className=\"detail-pair-label\">{i18nLabel}</section>\n            <section className=\"detail-pair-value\">{i18nValue || value}</section>\n        </section>\n    );\n};\n\nconst DetailsRendererWithTranslatedValues = ({ detail, trafficValue }: any) => {\n    const i18nUnit = useGetTranslatedLabel(trafficValue.unit);\n    return <DefaultDetailRenderer {...detail} value={`${trafficValue.value} ${i18nUnit}`} />;\n};\n\nexport const getTrafficValue = (type: internetDetailsType, state: InternetState): TrafficValue => {\n    const trafficValues: any = {\n        [internetDetailsType.upload]: state.upload,\n        [internetDetailsType.download]: state.download,\n        [internetDetailsType.sent]: state.sent,\n        [internetDetailsType.received]: state.received,\n    };\n\n    return trafficValues[type];\n};\n\nexport const TrafficDetailRenderer = (detail: InternetDetail) => {\n    // https:github.com/facebookexperimental/Recoil/issues/12\n    const state = useRecoilValue(internetState);\n    const trafficValue = getTrafficValue(detail.type, state);\n\n    return <DetailsRendererWithTranslatedValues detail={detail} trafficValue={trafficValue} />;\n};\n\nexport const ConfigurableDetailRenderer = (detail: InternetDetail) => {\n    const { valueLabel, buttonLabel, buttonHandler, isConfigurationType } = getDynamicDetailData(\n        detail.type\n    );\n\n    const [i18nLabel, i18nValue, i18ButtonLabel] = useGetTranslatedLabels([\n        detail.label,\n        valueLabel,\n        buttonLabel,\n    ]);\n\n    return (\n        <section className=\"detail-pair\">\n            <section className=\"detail-pair-label\">{i18nLabel}</section>\n            <section className=\"detail-pair-value\">\n                <span className=\"detail-pair-value-message\">{i18nValue || detail.value} </span>\n                {isConfigurationType ? (\n                    <Link className=\"detail-pair-value-link\" to={navActionLinks['internetSafety']}>\n                        {i18ButtonLabel}\n                    </Link>\n                ) : (\n                    <Button\n                        buttonName={i18ButtonLabel}\n                        className=\"detail-pair-value-button\"\n                        buttonHandler={buttonHandler}\n                    />\n                )}\n            </section>\n        </section>\n    );\n};\n","import React from 'react';\nimport './details.scss';\n\nimport { Button } from '../../common/button';\nimport { ConfigurableDetailRenderer, DefaultDetailRenderer, TrafficDetailRenderer } from './detail';\n\nimport { useToggleButtonWithI18n } from '../../../hooks/toggle-button-with-i18n';\nimport { internetDetailsType } from '../../../constants/cards.constants';\n\nimport { InternetDetail, InternetDetails } from '../../../models/dashboard.model';\nimport { cardsLabels } from '../../../models/cards.model';\n\nconst { download, upload, received, sent, reboot, configuration } = internetDetailsType;\n\nexport type InternetDetailsProps = {\n    details: InternetDetails;\n};\n\nexport const detailRenderers: {\n    [renderer in internetDetailsType]: (detail: InternetDetail) => JSX.Element;\n} = {\n    [configuration]: ConfigurableDetailRenderer,\n    [reboot]: ConfigurableDetailRenderer,\n    [sent]: TrafficDetailRenderer,\n    [received]: TrafficDetailRenderer,\n    [download]: TrafficDetailRenderer,\n    [upload]: TrafficDetailRenderer,\n    [internetDetailsType.default]: DefaultDetailRenderer,\n};\n\nexport const renderDetail = (detail: InternetDetail, index: number) => {\n    const DetailRenderer = detailRenderers[detail.type];\n    return <DetailRenderer key={index} {...detail} />;\n};\n\nexport const renderDetails = (details: InternetDetails) =>\n    details.map((detail: InternetDetail, index: number) => renderDetail(detail, index));\n\nexport const DetailsRenderer = ({ details }: InternetDetailsProps) => {\n    const { isHidden, i18nLabels, toggleDetailsVisibility } = useToggleButtonWithI18n([\n        cardsLabels.moreDetailsLabel,\n        cardsLabels.hiddenDetailsLabel,\n    ]);\n    const [moreDetailsLabel, hiddenDetailsLabel] = i18nLabels;\n\n    return (\n        <section className=\"details\">\n            <Button\n                className=\"details-button\"\n                buttonHandler={toggleDetailsVisibility}\n                buttonName={isHidden ? moreDetailsLabel : hiddenDetailsLabel}\n            />\n            {isHidden ? null : <section className=\"details-info\">{renderDetails(details)}</section>}\n        </section>\n    );\n};\n","import { TrafficValue } from '../models/dashboard.model';\nimport { SentReceivedTraffic } from '../models/internet.model';\nimport { cardsLabels } from '../models/cards.model';\n\nconst sentReceivedUnits = [cardsLabels.mbitLabel, cardsLabels.mbitLabel];\nexport const getSentReceivedTraffic = (): SentReceivedTraffic => ({\n    sent: generateUpDownLoadTraffic(sentReceivedUnits),\n    received: generateUpDownLoadTraffic(sentReceivedUnits),\n});\n\nexport const generateUpDownLoadTraffic = (sentReceivedUnits?: Array<cardsLabels>): TrafficValue => {\n    const unitsLabels = sentReceivedUnits\n        ? sentReceivedUnits\n        : [cardsLabels.mbitsLabel, cardsLabels.mbitsLabel];\n    return {\n        unit: unitsLabels[Math.round(Math.random())],\n        value: Math.round(Math.random() * 500) / 10,\n    };\n};\n","import React, { MutableRefObject, useEffect, useRef } from 'react';\nimport { SetterOrUpdater, useRecoilState } from 'recoil';\n\nimport { internetState } from '../../../recoil-state/internet.state';\n\nimport { internetDetailsType, internetRequestDelay } from '../../../constants/cards.constants';\nimport {\n    generateUpDownLoadTraffic,\n    getSentReceivedTraffic,\n} from '../../../services/internet-card.service';\n\nimport { InternetState, SentReceivedTraffic } from '../../../models/internet.model';\nimport { cardsLabels } from '../../../models/cards.model';\nimport {\n    InternetDetail,\n    InternetDetails,\n    TrafficInfo,\n    TrafficValue,\n} from '../../../models/dashboard.model';\n\nexport type ContextUpdaterProps = {\n    details: InternetDetails;\n    trafficInfo: TrafficInfo;\n};\n\nexport const getValue = (details: InternetDetails, type: internetDetailsType): TrafficValue => {\n    const { value } = details.find((detail: InternetDetail) => detail.type === type) || {\n        value: '',\n    };\n\n    return {\n        value: Number(value),\n        unit: cardsLabels.mbitLabel,\n    };\n};\n\nconst useInitInternetState = (\n    updateInternetState: SetterOrUpdater<InternetState>,\n    trafficInfo: TrafficInfo,\n    details: InternetDetails\n) => {\n    useEffect(() => {\n        updateInternetState({\n            ...{ upload: trafficInfo.upload.current, download: trafficInfo.download.current },\n            received: getValue(details, internetDetailsType.received),\n            sent: getValue(details, internetDetailsType.sent),\n        });\n    }, [trafficInfo, details, updateInternetState]);\n};\n\nconst useUpdateInternetState = (\n    updateInternetState: SetterOrUpdater<InternetState>,\n    sentReceivedRef: MutableRefObject<SentReceivedTraffic>\n) => {\n    useEffect(() => {\n        const timerId = setInterval(() => {\n            const sentReceivedTraffic = getSentReceivedTraffic();\n            sentReceivedRef.current = sentReceivedTraffic;\n\n            updateInternetState({\n                ...sentReceivedTraffic,\n                upload: generateUpDownLoadTraffic(),\n                download: generateUpDownLoadTraffic(),\n            });\n        }, internetRequestDelay);\n        return () => clearInterval(timerId);\n    }, [updateInternetState, sentReceivedRef]);\n};\n\nexport const RecoilInternetUpdater = React.memo(({ details, trafficInfo }: ContextUpdaterProps) => {\n    const [{ received, sent }, updateInternetState] = useRecoilState(internetState);\n    const sentReceivedRef = useRef({ received, sent });\n\n    useInitInternetState(updateInternetState, trafficInfo, details);\n    useUpdateInternetState(updateInternetState, sentReceivedRef);\n\n    return null;\n});\n","import React from 'react';\n\nimport { ProviderRenderer } from '../internet/provider';\nimport { TrafficRenderer } from '../internet/traffic';\nimport { DetailsRenderer } from '../internet/details';\n\nimport { CardContent, InternetCardContent } from '../../../models/dashboard.model';\nimport { RecoilInternetUpdater } from '../internet/recoil-internet-updater';\n\nexport const InternetCardRenderer = (cardContent: InternetCardContent) => {\n    const { main, details } = cardContent;\n    const { trafficInfo, startedTime, provider } = main;\n    const { upload, download } = trafficInfo;\n\n    return (\n        <section className=\"card-content\">\n            <ProviderRenderer {...provider} connectionDuration={startedTime} />\n            <section className=\"traffics\">\n                <TrafficRenderer {...download} />\n                <TrafficRenderer {...upload} />\n            </section>\n            <DetailsRenderer details={details} />\n        </section>\n    );\n};\nexport const InternetCardComponent = (cardContent: CardContent) => {\n    return (\n        <>\n            <RecoilInternetUpdater\n                details={(cardContent as InternetCardContent).details}\n                trafficInfo={(cardContent as InternetCardContent).main.trafficInfo}\n            />\n            <InternetCardRenderer {...(cardContent as InternetCardContent)} />\n        </>\n    );\n};\n","import React from 'react';\nimport './cards.scss';\n\nimport * as models from '../../../models/dashboard.model';\nimport { cardTypes } from '../../../constants/cards.constants';\nimport { UnknownCard } from './unknown-card';\nimport { ApplicationsCardComponent } from './applications-card';\nimport { SystemCardComponent } from './system-card';\nimport { WifiCardComponent } from './wifi-card';\nimport { NetworkPortsCardComponent } from './network-ports-card';\nimport { InternetCardComponent } from './internet-card';\nimport { useGetTranslatedLabel } from '../../../services/i18n.service';\n\nconst cardsComponents: models.CardsComponents = {\n    [cardTypes.applicationType]: ApplicationsCardComponent,\n    [cardTypes.systemType]: SystemCardComponent,\n    [cardTypes.wifiType]: WifiCardComponent,\n    [cardTypes.portType]: NetworkPortsCardComponent,\n    [cardTypes.internetType]: InternetCardComponent,\n};\n\nexport const Card = React.memo(({ card }: models.CardProps) => {\n    const CardComponent = cardsComponents[card.type];\n    const title = useGetTranslatedLabel(card.title);\n    return (\n        <section className=\"card\">\n            <section className=\"application-card\">\n                <h3 className=\"card__title\">{title}</h3>\n                {CardComponent ? (\n                    <CardComponent {...card.cardContent} />\n                ) : (\n                    <UnknownCard type={card.type} />\n                )}\n            </section>\n        </section>\n    );\n});\n\nexport const Cards = ({ leftCards, rightCards }: models.CardsProps) => (\n    <section className=\"cards\">\n        <section className=\"cards-left\">\n            {leftCards.map((card: models.Card) => (\n                <Card key={card.cardId} card={card} />\n            ))}\n        </section>\n\n        <section className=\"cards-right\">\n            {rightCards.map((card: models.Card) => (\n                <Card key={card.cardId} card={card} />\n            ))}\n        </section>\n    </section>\n);\n","import React from 'react';\nimport { ApplicationsCardContent, CardContent } from '../../../models/dashboard.model';\nimport { useGetTranslatedLabel } from '../../../services/i18n.service';\nimport { cardsLabels } from '../../../models/cards.model';\n\nexport const ApplicationsCardComponent = (cardContent: CardContent) => {\n    const { applications } = cardContent as ApplicationsCardContent;\n    const hasNoApplicationsMessage = useGetTranslatedLabel(\n        cardsLabels.hasNoApplicationsMessageLabel\n    );\n    return (\n        <section className=\"card-content\">\n            {applications.length ? 'Applications' : hasNoApplicationsMessage}\n        </section>\n    );\n};\n","import { SplitParams, SystemParam } from '../models/dashboard.model';\n\nexport const splitSystemParams = (systemParams: Array<SystemParam>) =>\n    systemParams.reduce(\n        (params: SplitParams, param: SystemParam): SplitParams => {\n            const field = param.isActive ? 'dynamicSystemParams' : 'staticSystemParams';\n            params[field].push(param);\n\n            return params;\n        },\n        {\n            staticSystemParams: [],\n            dynamicSystemParams: [],\n        }\n    );\n","import React from 'react';\n\nimport { OnlineDeviceComponent } from '../online-device/online-device';\nimport { ConnectionComponent } from '../connection/connection';\n\nimport { useGetTranslatedLabel } from '../../../services/i18n.service';\n\nimport { cardsLabels } from '../../../models/cards.model';\nimport {\n    CardContent,\n    Connection,\n    OnlineDevice,\n    WiFiCardContent,\n} from '../../../models/dashboard.model';\n\nexport const WifiCardComponent = (cardContent: CardContent) => {\n    const { connections, onlineDevices } = cardContent as WiFiCardContent;\n    const onlineDeviceTitle = useGetTranslatedLabel(cardsLabels.onlineDeviceTitleLabel);\n\n    return (\n        <section className=\"card-content\">\n            <section className=\"connections\">\n                {connections.map((connection: Connection) => (\n                    <ConnectionComponent key={connection.connectionId} connection={connection} />\n                ))}\n            </section>\n            {onlineDevices.length ? (\n                <section className=\"devices\">\n                    <h3 className=\"devices--title\">{onlineDeviceTitle}</h3>\n                    <section className=\"devices-content\">\n                        {onlineDevices.map((onlineDevice: OnlineDevice) => (\n                            <OnlineDeviceComponent\n                                key={onlineDevice.key}\n                                onlineDevice={onlineDevice}\n                            />\n                        ))}\n                    </section>\n                </section>\n            ) : null}\n        </section>\n    );\n};\n","import { useContext, useEffect, useState } from 'react';\nimport { History } from 'history';\n\nimport { LoaderContext } from '../context/loader.context';\n\nimport { defaultCards } from '../constants/cards.constants';\nimport { dashboardPath } from '../constants/router.constants';\nimport { cardsMocks } from '../mock/cards.mock';\n\nimport { Cards, CardsResponse } from '../models/dashboard.model';\n\nexport type SetCards = (cards: Cards) => void;\n\nexport class CardLoaderService {\n    public useLoadCards(history: History<Cards>): CardsResponse {\n        const { isLoading, setLoader } = useContext(LoaderContext);\n        const [{ leftCards, rightCards }, setCards] = useState(defaultCards);\n\n        useEffect(() => {\n            const preloadedCards = history.location.state;\n\n            if (preloadedCards) {\n                history.replace(dashboardPath, undefined);\n                return setCards(preloadedCards);\n            }\n\n            setLoader(true);\n            this.fetchCards(setCards).finally(() => setLoader(false));\n        }, [history, setLoader]);\n\n        return { isLoading, leftCards, rightCards };\n    }\n\n    private async fetchCards(setCards: SetCards): Promise<void> {\n        return new Promise((res) => {\n            setTimeout(() => {\n                setCards(cardsMocks);\n                res();\n            }, 1000);\n        });\n    }\n}\n\nexport const cardLoaderInstance = new CardLoaderService();\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport { Cards as CardsComponent } from '../../components/dashboard/cards/cards';\n\nimport { cardLoaderInstance } from '../../services/card-loader.service';\n\nimport { Cards } from '../../models/dashboard.model';\n\nexport const DashboardPage = () => {\n    const history = useHistory<Cards>();\n    const { leftCards, rightCards } = cardLoaderInstance.useLoadCards(history);\n\n    return <CardsComponent leftCards={leftCards} rightCards={rightCards} />;\n};\n\nexport default DashboardPage;\n","import React from 'react';\nimport './checkbox.scss';\n\nexport type CheckboxProps = {\n    isDisable: boolean;\n    isActive: boolean;\n    triggerCheckbox: (isActive: boolean) => void;\n};\n\nexport type SimpleCheckBoxProps = {\n    name: string;\n    checked: boolean;\n    onChange: any;\n};\n\nconst setCheckboxClassName = (isActive: boolean) =>\n    isActive ? 'checkbox__active' : 'checkbox__inactive';\nconst setCheckboxBarClassName = (isActive: boolean) =>\n    isActive ? 'checkbox--bar__active' : 'checkbox--bar__inactive';\n\nconst setCheckboxClassNameDisabled = (isDisable: boolean) =>\n    isDisable ? 'checkbox__disabled' : 'checkbox__enabled';\n\nexport const Checkbox = React.memo(({ isActive, triggerCheckbox, isDisable }: CheckboxProps) => (\n    <section\n        className={`checkbox ${setCheckboxClassName(isActive)} ${setCheckboxClassNameDisabled(\n            isDisable\n        )}`}\n    >\n        <span\n            onClick={() => !isDisable && triggerCheckbox(!isActive)}\n            className={`checkbox--bar ${setCheckboxBarClassName(isActive)}`}\n        ></span>\n    </section>\n));\n\nexport const SimpleCheckBox = React.memo(({ name, checked, onChange }: SimpleCheckBoxProps) => {\n    return (\n        <input\n            type=\"checkbox\"\n            className=\"simple-checkbox\"\n            name={name}\n            checked={checked}\n            onChange={onChange}\n        ></input>\n    );\n});\n","import { useCallback, useState } from 'react';\n\nimport { useGetTranslatedLabels } from '../services/i18n.service';\n\nimport { Labels } from '../models/i18n.model';\n\nexport const useToggleButtonWithI18n = (labels: Array<Labels>) => {\n    const [isHidden, toggleDetailsVisibility] = useState(true);\n    const i18nLabels = useGetTranslatedLabels(labels);\n\n    return {\n        isHidden,\n        i18nLabels,\n        toggleDetailsVisibility: useCallback(\n            () => toggleDetailsVisibility((isHidden) => !isHidden),\n            [toggleDetailsVisibility]\n        ),\n    };\n};\n"],"sourceRoot":""}