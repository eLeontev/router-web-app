{"version":3,"sources":["constants/login.constants.ts","components/common/input.tsx","components/common/button.tsx","components/common/message.tsx","concurency/suspence-fetch.ts","constants/cards.constants.ts","context/loader.context.tsx","components/common/loader.tsx","models/dashboard.model.ts","constants/modal.constants.ts","mock/cards.mock.ts","services/login-and-load-dashboard.ts","components/concurrency/concurrency-login-handler.tsx","constants/router.constants.ts","reducers/login.reducer.ts","pages/login/login.tsx","components/common/search-bar.tsx","components/dashboard/header/header.tsx","components/dashboard/nvagation-bar/navigation-bar.tsx","components/dashboard/cards/unknown-card.tsx","services/system-params.service.ts","components/dashboard/cards/system-card.tsx","components/common/checkbox.tsx","context/modal.context.tsx","context/modal.connection.actions.transformer.ts","components/dashboard/connection/connection.hooks.ts","components/dashboard/connection/connection.tsx","components/dashboard/online-device/online-device.tsx","components/dashboard/cards/network-ports-card.tsx","recoil-state/internet/internet.atom.ts","constants/recoil.constants.ts","components/dashboard/internet/provider.tsx","services/traffic-graph.service.ts","components/dashboard/internet/traffic-graph.tsx","utils/d3-graph.ts","recoil-state/internet/speed.traffic.selector.ts","components/dashboard/internet/traffic-timing.tsx","services/traffic.time.service.ts","components/dashboard/internet/traffic.tsx","recoil-state/internet/sent-received.traffic.selector.ts","components/dashboard/internet/details.tsx","services/internet-card.service.ts","components/dashboard/internet/recoil-internet-updater.tsx","components/dashboard/cards/internet-card.tsx","components/dashboard/cards/cards.tsx","components/dashboard/cards/applications-card.tsx","services/system-card.service.ts","components/dashboard/cards/wifi-card.tsx","services/card-loader.service.ts","components/common/logo.tsx","constants/actions.constants.ts","actions/copy-paste.action.ts","actions/add-logo.action.ts","actions/print.action.ts","actions/wps.action.ts","actions/actions.ts","components/common/timer.tsx","components/modal-content/wps.action.tsx","components/modal-content/actions.tsx","services/qr-code-generator.service.ts","components/modal-content/credentials.tsx","components/modal-content/connection.content.tsx","components/common/modal.tsx","pages/dashboard/dashboard.tsx","pages/router.tsx","serviceWorker.ts","index.tsx"],"names":["loginActionTypes","Input","React","memo","value","onChange","name","type","placeholder","className","e","target","Button","buttonName","buttonHandler","onClick","getSuccessStatus","isSuccess","ButtonWithPostHandler","props","isActive","useState","setPostHandlerResult","useEffect","timerId","setTimeout","clearTimeout","Promise","resolve","then","Message","message","onClose","shouldHideCloseButton","initialCredentials","login","password","defaultCredentials","initialState","shouldLogin","errorMessage","cardTypes","connectionTypes","wrapPromise","promise","result","status","suspender","r","read","LoaderContext","createContext","WithLoaderContext","children","isLoading","setLoader","Provider","ContextLoader","useContext","SuspenseLoader","defaultCards","leftCards","rightCards","trafficType","connectionTypeMessages","wifi","wired","internetDetailsType","trafficTypeLabel","download","upload","paramTypes","modalContentTypes","connectionActionTypes","units","applicationsCatrd","cardId","applicationType","title","cardContent","applications","systemCatrd","systemType","startedTime","systemParams","label","paramType","inactive","uptime","currentTime","cpuUsage","ramUsage","homeWiFiCard","wifiType","connections","connectionId","range","channel","connectionInfo","connectionContentType","url","credentials","networkId","actions","WPS","actionType","wpsType","main","copyType","printType","addLogoType","onlineDevices","key","countOfConnections","isHome","guestWiFiCard","networkPortsCard","portType","networkPortId","ports","portId","portSpeed","portUnit","cardsMocks","internetType","provider","providerLabel","providerType","trafficInfo","current","unit","max","details","reboot","configuration","default","received","sent","fetchDashboard","userToken","reject","loadDashboard","loginValues","errorHandler","catch","DashboardLoader","dashboardRequest","history","useHistory","cards","push","pathname","state","ConcurrencyLoginHandler","getDashboardRequest","fallback","ReactDOM","createPortal","document","getElementById","cleanup","cleanuperror","cleanuplogin","setdefault","validate","actionHandlers","v","trim","length","loginReducer","actionHandler","LoginPage","useReducer","dispatch","id","SearchBar","console","log","Header","NavigationBar","isCollapsed","UnknownCard","updateUptime","diff","moment","format","paramHandlers","allMemory","parseFloat","split","usedRAMinPercentage","Math","random","usedRAMinUnits","round","floor","ParamRenderer","renderSystemParams","map","systemParam","DynamicParams","params","updateParams","setInterval","activeParamTypes","param","updateParamsMock","clearInterval","setCheckboxClassName","setCheckboxBarClassName","setCheckboxClassNameDisabled","isDisable","Checkbox","triggerCheckbox","ModalContext","WithModalContext","modalInfo","setModal","alwaysActiveConnectionActionTypes","setIsActiveActionStatus","connectionStatus","useButtonToOpenModal","useCallback","action","includes","getConnectionModalInfo","ConnectionComponent","connection","setConnectionStatus","isWaiting","setWaitingStatus","a","res","useTriggerCheckbox","setModalContext","getConnectionModifier","OnlineDeviceComponent","onlineDevice","to","PortRenderer","isNetwork","index","internetState","atom","InternetConnectionDuration","useRecoilValue","ProviderRenderer","connectionDuration","getRange","indexOf","getModifier","isUpload","TrafficGraph","maxRef","useRef","nodesRef","trafficValues","trafficValue","updatedTrafficValues","getLimitedCountOfNodes","selector","modifier","dataset","parent","d3","selectAll","remove","node","getBoundingClientRect","width","height","xScale","domain","yScale","line","x","d","i","y","curve","svg","append","attr","datum","hAxis","ticks","tickSize","call","g","select","renderGraph","maxRange","currentLength","emptyNodes","Array","fill","filledNodes","getDataset","speedTrafficState","get","TrafficTiming","countOfDisplayedNodes","getTrafficValue","getTrafficModifier","TrafficRenderer","sentReceivedTrafficState","DefaultDetailRenderer","SentReceivedDetailRenderer","detail","SpeedTrafficDetailRenderer","detailRenderers","renderDetails","DetailRenderer","renderDetail","DetailsRenderer","isHidden","toggleDetailsVisibility","generateTrafficValue","strValue","Number","generateUpDownLoadTraffic","getValue","find","useUpdateInternetState","updateInternetState","sentReceivedRef","sentReceived","sentReceivedTraffic","RecoilInternetUpdater","useRecoilState","useInitInternetState","InternetCardRenderer","cardsComponents","useMemo","reduce","staticSystemParams","dynamicSystemParams","splitSystemParams","port","Card","card","CardComponent","Cards","cardLoaderInstance","setCards","preloadedCards","location","replace","undefined","fetchCards","finally","Logo","src","alt","actionNames","activatedWpsType","copyPasteActionHandler","navigator","clipboard","writeText","getCreatedFileInput","fileInput","createElement","style","display","accept","setImageFile","imageFile","setLogo","fr","FileReader","onload","readAsDataURL","fileInputUploadHandler","files","item","removeChild","addLogoActionHandler","addEventListener","click","printActionHandler","window","print","wpsActionHanlder","modalActionHandlers","getDurationModifier","duration","Timer","restTime","setRestTime","formattedRestTime","resTime","min","sec","getFormattedRestTime","WPSAction","isWPSActivated","activateWPS","actionName","getActionStatus","Actions","connectionInfoPropsWithSetters","getActionButton","generateQR","QRCode","toDataURL","Credentials","ConnectionModalContent","connectionInfoProps","qrCodeBase64","setQRCode","logoSrc","getTitle","modalContentComponents","ModalComponent","Modal","ModalContent","DashboardPage","cardLoader","useLoadCards","process","NODE_ENV","PUBLIC_URL","basename","AppRouter","path","Boolean","hostname","match","unstable_createRoot","render","StrictMode","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.635c747c.chunk.js","sourcesContent":["import { LoginValues, LoginState } from '../models/login.model';\n\nexport const noErrorMessage = '';\nexport const invalidCredentionalsMessage = 'The credentials are invalid';\n\nexport const initialCredentials: LoginValues = {\n    login: '',\n    password: '',\n};\n\nexport const defaultCredentials: LoginValues = {\n    login: 'admin',\n    password: 'root',\n};\n\nexport const initialState: LoginState = {\n    ...initialCredentials,\n    shouldLogin: false,\n    errorMessage: '',\n};\n\nexport const minCountOfLoginSymbols = 3;\nexport const minCountOfPasswordSymbols = 3;\n\nexport enum loginActionTypes {\n    login = 'login',\n    password = 'password',\n    cleanup = 'cleanup',\n    setdefault = 'setdefault',\n    cleanuperror = 'cleanuperror',\n    cleanuplogin = 'cleanuplogin',\n    validate = 'validate',\n}\n","import React from 'react';\nimport './input.scss';\n\nexport type InputProps = {\n    value: string | number;\n    name: string;\n    onChange: (value: string) => void;\n    type?: string;\n    placeholder?: string;\n    className?: string;\n};\n\nexport const searchPlaceholder = 'Search for settings';\n\nexport const Input = React.memo(\n    ({ value, onChange, name, type = 'text', placeholder = '', className = '' }: InputProps) => (\n        <input\n            name={name}\n            type={type}\n            value={value}\n            className={className}\n            placeholder={placeholder}\n            onChange={(e) => onChange(e.target.value)}\n        ></input>\n    )\n);\n","import React, { useEffect, useState } from 'react';\nimport './button.scss';\n\nexport type ButtonProps = {\n    className?: string;\n    buttonName: string;\n    buttonHandler: () => void;\n};\nexport const Button = React.memo(({ className, buttonName, buttonHandler }: ButtonProps) => (\n    <button className={className} onClick={buttonHandler}>\n        {buttonName}\n    </button>\n));\n\nconst getSuccessStatus = (isSuccess: boolean) => (isSuccess ? `success` : '');\n\nexport const ButtonWithPostHandler = (props: ButtonProps & { isActive: boolean }) => {\n    const { className = '', isActive } = props;\n    const [isSuccess, setPostHandlerResult] = useState(false);\n\n    useEffect(() => {\n        let timerId: NodeJS.Timeout;\n\n        if (isSuccess) {\n            timerId = setTimeout(() => {\n                setPostHandlerResult(false);\n            }, 2000);\n        }\n        return () => timerId && clearTimeout(timerId);\n    }, [isSuccess]);\n\n    return (\n        <Button\n            {...props}\n            className={`${className} ${getSuccessStatus(isSuccess)}`}\n            buttonHandler={() =>\n                isSuccess || !isActive\n                    ? null\n                    : Promise.resolve(props.buttonHandler()).then(() => setPostHandlerResult(true))\n            }\n        />\n    );\n};\n","import React from 'react';\nimport './message.scss';\n\nimport { Button } from './button';\n\nexport type MessageProps = {\n    message: string;\n    type: string;\n    onClose: () => void;\n    shouldHideCloseButton?: boolean;\n};\n\nexport const Message = React.memo(\n    ({ message, type, onClose, shouldHideCloseButton = false }: MessageProps) =>\n        message ? (\n            <section className=\"message\">\n                <p className={type}>\n                    {message}\n                    {shouldHideCloseButton ? null : (\n                        <Button\n                            className=\"close-message-button\"\n                            buttonName=\"x\"\n                            buttonHandler={onClose}\n                        />\n                    )}\n                </p>\n            </section>\n        ) : null\n);\n","export type SuspenseResource<R> = {\n    read(): R;\n};\n\nexport const suspenseFetch = <R>(promise: Promise<R>): SuspenseResource<R | undefined> => {\n    return wrapPromise<R>(promise);\n};\n\nconst wrapPromise = <R>(promise: Promise<R>) => {\n    let status = 'pending';\n    let result: R;\n\n    const suspender = promise.then(\n        (r) => {\n            status = 'success';\n            result = r;\n        },\n        (e) => {\n            status = 'error';\n            result = e;\n        }\n    );\n    return {\n        read(): R | undefined {\n            if (status === 'pending') {\n                throw suspender;\n            } else if (status === 'error') {\n                throw result;\n            } else if (status === 'success') {\n                return result;\n            }\n        },\n    };\n};\n","import { Cards } from '../models/dashboard.model';\n\nexport const invalidCardsMessage = 'The cards loading was failed';\n\nexport const defaultCards: Cards = {\n    leftCards: [],\n    rightCards: [],\n};\n\nexport const applicationsCardTitle = 'Applications';\nexport const systemCardTitle = 'About the system';\nexport const homeWiFiCardTitle = 'Home segment';\nexport const guestWiFiCardTitle = 'Guest segment';\nexport const networkPortsCardTitle = 'Network ports';\nexport const internetCardTitle = 'Internet';\n\nexport enum cardTypes {\n    applicationType = 'applicationType',\n    systemType = 'systemType',\n    wifiType = 'wifiType',\n    portType = 'portType',\n    internetType = 'internetType',\n}\nexport enum connectionTypes {\n    wired = 'wired',\n    wifi = 'wifi',\n}\n\nexport const wifiConnectionTypeMessage = 'Wi-Fi';\nexport const wiredConnectionTypeMessage = 'Wired';\n\nexport const connectionTypeMessages = {\n    [connectionTypes.wifi]: wifiConnectionTypeMessage,\n    [connectionTypes.wired]: wiredConnectionTypeMessage,\n};\n\nexport const channelLabel = 'Channel';\nexport const showConnectionInfoButtonLabel = 'Show connection info';\nexport const onlineDeviceTitle = 'Online devices';\n\nexport const updateActiveParamsInterval = 1000;\nexport const internetRequestDelay = 3000;\n\nexport enum trafficType {\n    upload = 'upload',\n    download = 'download',\n}\n\nexport const trafficTimeFormat = 'HH:mm';\n\nexport const trafficTypeLabel: { [label in trafficType]: string } = {\n    [trafficType.download]: 'Download',\n    [trafficType.upload]: 'Upload',\n};\n\nexport enum internetDetailsType {\n    default = 'default',\n    reboot = 'reboot',\n    configuration = 'configuration',\n    download = 'download',\n    upload = 'upload',\n    sent = 'sent',\n    received = 'received',\n}\n\nexport const providerHeaderLabel = 'Provider';\n\nexport const moreDetailsLabel = 'More details';\nexport const hiddenDetailsLabel = 'Hide details';\n\nexport const units = ['kbit/s', 'Mbit/s'];\nexport const mModifier = 1000;\nexport const bModifier = 1;\n\nexport const countOfDisplayedNodes = 100;\n","import React, { useState, PropsWithChildren } from 'react';\n\nimport { LoaderInfoContext } from '../models/login.model';\n\nexport const LoaderContext = React.createContext<LoaderInfoContext>(\n    (null as unknown) as LoaderInfoContext\n);\n\nexport const WithLoaderContext = ({ children }: PropsWithChildren<{}>) => {\n    const [isLoading, setLoader] = useState(false);\n\n    return (\n        <LoaderContext.Provider value={{ isLoading, setLoader }}>{children}</LoaderContext.Provider>\n    );\n};\n","import React, { useContext } from 'react';\nimport './loader.scss';\n\nimport { LoaderContext } from '../../context/loader.context';\n\nexport const ContextLoader = React.memo(() => {\n    const { isLoading } = useContext(LoaderContext);\n\n    return isLoading ? <section className=\"loader\"></section> : null;\n});\n\nexport const SuspenseLoader = () => <section className=\"loader\"></section>;\n","import { CardLoaderService } from '../services/card-loader.service';\nimport {\n    cardTypes,\n    connectionTypes,\n    internetDetailsType,\n    trafficType,\n} from '../constants/cards.constants';\nimport { connectionActionTypes, modalContentTypes } from '../constants/modal.constants';\n\nexport type DashboardProps = {\n    cardLoader?: CardLoaderService;\n};\nexport type BaseCard = {\n    cardId: string;\n    type: cardTypes;\n    title: string;\n};\n\nexport enum paramTypes {\n    inactive = 'inactive',\n    uptime = 'uptime',\n    currentTime = 'currentTime',\n    cpuUsage = 'cpuUsage',\n    ramUsage = 'ramUsage',\n}\n\nexport type SystemParamValue = string | number | Date;\nexport type SystemParam = {\n    label: string;\n    value: SystemParamValue;\n    isActive: boolean;\n    paramType: paramTypes;\n};\n\nexport type SystemParams = Array<SystemParam>;\nexport type UpdateParams = (systemParams: SystemParams) => void;\n\nexport type SystemCardContent = {\n    startedTime: string;\n    systemParams: SystemParams;\n};\n\nexport type SystemCard = BaseCard & {\n    cardContent: SystemCardContent;\n};\n\nexport type DynamicParamProps = {\n    systemParams: SystemParams;\n    startedTime: string;\n};\n\nexport type SplitParams = {\n    staticSystemParams: SystemParams;\n    dynamicSystemParams: SystemParams;\n};\n\nexport type ApplicationsCardContent = {\n    applications: Array<any>;\n};\n\nexport type ApplicationsCard = BaseCard & {\n    cardContent: ApplicationsCardContent;\n};\n\nexport type ConnectionAction = {\n    isActive: boolean;\n    actionType: connectionActionTypes;\n};\n\nexport type ConnectionInfo = {\n    type: modalContentTypes;\n    url: string;\n    credentials: {\n        networkId: string;\n        password: string | null;\n    };\n    actions: {\n        main: Array<ConnectionAction>;\n        WPS: ConnectionAction;\n    };\n};\n\nexport type Connection = {\n    connectionId: string;\n    name: string;\n    isActive: boolean;\n    range: string;\n    channel: number;\n    connectionInfo: ConnectionInfo;\n};\nexport type ConnectionProps = {\n    connection: Connection;\n};\n\nexport type OnlineDevice = {\n    key: string;\n    type: connectionTypes;\n    countOfConnections: number;\n    isHome: boolean;\n};\nexport type OnlineDeviceProps = {\n    onlineDevice: OnlineDevice;\n};\n\nexport type WiFiCardContent = {\n    connections: Array<Connection>;\n    onlineDevices: Array<OnlineDevice>;\n};\n\nexport type WiFiCard = BaseCard & {\n    cardContent: WiFiCardContent;\n};\n\nexport type Port = {\n    portId: string;\n    portType: string;\n    portSpeed: number;\n    portUnit: string;\n    isActive: boolean;\n};\n\nexport type Ports = Array<Port>;\n\nexport type NetworkPortsCardContent = {\n    networkPortId: string;\n    ports: Ports;\n};\n\nexport type NetworkPortsCard = BaseCard & {\n    cardContent: NetworkPortsCardContent;\n};\n\nexport type InternetProvider = {\n    providerLabel: string;\n    providerType: string;\n};\n\nexport type TrafficValue = {\n    value: number;\n    unit: string;\n};\nexport type TrafficValues = Array<TrafficValue>;\n\nexport type Traffic = {\n    type: trafficType;\n    max: TrafficValue;\n    current: TrafficValue;\n};\n\nexport type TrafficInfo = {\n    download: Traffic;\n    upload: Traffic;\n};\n\nexport type InternetDetail = {\n    label: string;\n    value: string;\n    type: internetDetailsType;\n};\nexport type InternetDetails = Array<InternetDetail>;\n\nexport type InternetCardContent = {\n    main: {\n        provider: InternetProvider;\n        trafficInfo: TrafficInfo;\n        startedTime: string;\n    };\n    details: InternetDetails;\n};\n\nexport type InternetCard = BaseCard & {\n    cardContent: InternetCardContent;\n};\n\nexport type Card = SystemCard | ApplicationsCard | WiFiCard | NetworkPortsCard | InternetCard;\nexport type CardContent =\n    | SystemCardContent\n    | ApplicationsCardContent\n    | WiFiCardContent\n    | NetworkPortsCardContent\n    | InternetCardContent;\n\nexport type CardsResponse = {\n    isLoading: boolean;\n    leftCards: Array<Card>;\n    rightCards: Array<Card>;\n};\n\nexport type Cards = {\n    leftCards: Array<Card>;\n    rightCards: Array<Card>;\n};\n\nexport type CardsProps = Cards;\nexport type CardProps = {\n    card: Card;\n};\n\nexport type CardsComponents = {\n    [cardType in cardTypes]: (card: CardContent) => JSX.Element;\n};\n","export enum modalContentTypes {\n    connectionContentType = 'connectionContentType',\n}\n\nexport enum connectionActionTypes {\n    copyType = 'copyType',\n    printType = 'printType',\n    addLogoType = 'addLogoType',\n    wpsType = 'wpsType',\n}\n\nexport const networkNameLablel = 'Network name (SSID)';\nexport const passwordLablel = 'Password';\n","import {\n    applicationsCardTitle,\n    cardTypes,\n    connectionTypes,\n    guestWiFiCardTitle,\n    homeWiFiCardTitle,\n    internetCardTitle,\n    internetDetailsType,\n    networkPortsCardTitle,\n    systemCardTitle,\n    trafficType,\n} from '../constants/cards.constants';\nimport {\n    ApplicationsCard,\n    Cards,\n    InternetCard,\n    NetworkPortsCard,\n    paramTypes,\n    SystemCard,\n    WiFiCard,\n} from '../models/dashboard.model';\nimport { connectionActionTypes, modalContentTypes } from '../constants/modal.constants';\n\nexport const applicationsCatrd: ApplicationsCard = {\n    cardId: 'applicationsCatrd_1',\n    type: cardTypes.applicationType,\n    title: applicationsCardTitle,\n    cardContent: {\n        applications: [],\n    },\n};\n\nconst startedTime = '7/2/2020';\nexport const systemCatrd: SystemCard = {\n    cardId: 'systemCatrd_1',\n    type: cardTypes.systemType,\n    title: systemCardTitle,\n    cardContent: {\n        startedTime,\n        systemParams: [\n            {\n                label: 'Model',\n                value: 'Speedster (KN-3010)',\n                isActive: false,\n                paramType: paramTypes.inactive,\n            },\n            {\n                label: 'Service tag',\n                value: '067-483-550-015-477',\n                isActive: false,\n                paramType: paramTypes.inactive,\n            },\n            {\n                label: 'OS version',\n                value: '3.4.6',\n                isActive: false,\n                paramType: paramTypes.inactive,\n            },\n            {\n                label: 'Auto-update',\n                value: 'Enabled',\n                isActive: false,\n                paramType: paramTypes.inactive,\n            },\n            {\n                label: 'Uptime',\n                value: '',\n                isActive: true,\n                paramType: paramTypes.uptime,\n            },\n            {\n                label: 'Current time',\n                value: '',\n                isActive: true,\n                paramType: paramTypes.currentTime,\n            },\n            {\n                label: 'CPU usage',\n                value: '4%',\n                isActive: true,\n                paramType: paramTypes.cpuUsage,\n            },\n            {\n                label: 'RAM usage',\n                value: '40% (51/128 Mbytes)',\n                isActive: true,\n                paramType: paramTypes.ramUsage,\n            },\n        ],\n    },\n};\n\nexport const homeWiFiCard: WiFiCard = {\n    cardId: 'homeWiFiCard_ 1',\n    type: cardTypes.wifiType,\n    title: homeWiFiCardTitle,\n    cardContent: {\n        connections: [\n            {\n                connectionId: 'connection_1',\n                name: 'Keenetic-9672',\n                isActive: true,\n                range: '2.4 GHz',\n                channel: 9,\n                connectionInfo: {\n                    type: modalContentTypes.connectionContentType,\n                    url: 'https://url.com/123',\n                    credentials: {\n                        networkId: 'N ET WO R K iD',\n                        password: 'network password',\n                    },\n                    actions: {\n                        WPS: {\n                            actionType: connectionActionTypes.wpsType,\n                            isActive: true,\n                        },\n                        main: [\n                            {\n                                actionType: connectionActionTypes.copyType,\n                                isActive: true,\n                            },\n                            {\n                                actionType: connectionActionTypes.printType,\n                                isActive: true,\n                            },\n                            {\n                                actionType: connectionActionTypes.addLogoType,\n                                isActive: true,\n                            },\n                        ],\n                    },\n                },\n            },\n            {\n                connectionId: 'connection_2',\n                name: 'Keenetic-9672',\n                isActive: true,\n                range: '5 GHz',\n                channel: 149,\n                connectionInfo: {\n                    type: modalContentTypes.connectionContentType,\n                    url: 'https://url.com/1321',\n                    credentials: {\n                        networkId: 'N ET WO R K iD 321',\n                        password: 'network password 321',\n                    },\n                    actions: {\n                        WPS: {\n                            actionType: connectionActionTypes.wpsType,\n                            isActive: true,\n                        },\n                        main: [\n                            {\n                                actionType: connectionActionTypes.copyType,\n                                isActive: true,\n                            },\n                            {\n                                actionType: connectionActionTypes.printType,\n                                isActive: true,\n                            },\n                            {\n                                actionType: connectionActionTypes.addLogoType,\n                                isActive: true,\n                            },\n                        ],\n                    },\n                },\n            },\n        ],\n        onlineDevices: [\n            {\n                key: 'device_1',\n                type: connectionTypes.wired,\n                countOfConnections: 0,\n                isHome: true,\n            },\n            {\n                key: 'device_2',\n                type: connectionTypes.wifi,\n                countOfConnections: 6,\n                isHome: true,\n            },\n        ],\n    },\n};\n\nexport const guestWiFiCard: WiFiCard = {\n    cardId: 'guestWiFiCard_ 1',\n    type: cardTypes.wifiType,\n    title: guestWiFiCardTitle,\n    cardContent: {\n        connections: [\n            {\n                connectionId: 'connection_1',\n                name: 'Guest',\n                isActive: false,\n                range: '2.4 GHz',\n                channel: 9,\n                connectionInfo: {\n                    type: modalContentTypes.connectionContentType,\n                    url: 'https://url.com/1321123123',\n                    credentials: {\n                        networkId: 'N ET WO R K iD 1231231',\n                        password: 'network password 123123123',\n                    },\n                    actions: {\n                        WPS: {\n                            actionType: connectionActionTypes.wpsType,\n                            isActive: false,\n                        },\n                        main: [\n                            {\n                                actionType: connectionActionTypes.copyType,\n                                isActive: false,\n                            },\n                            {\n                                actionType: connectionActionTypes.printType,\n                                isActive: true,\n                            },\n                            {\n                                actionType: connectionActionTypes.addLogoType,\n                                isActive: true,\n                            },\n                        ],\n                    },\n                },\n            },\n            {\n                connectionId: 'connection_2',\n                name: 'Guest',\n                isActive: false,\n                range: '5 GHz',\n                channel: 149,\n                connectionInfo: {\n                    type: modalContentTypes.connectionContentType,\n                    url: 'https://url.com/1321123123',\n                    credentials: {\n                        networkId: 'N ET 6423',\n                        password: 'network password 00123',\n                    },\n                    actions: {\n                        WPS: {\n                            actionType: connectionActionTypes.wpsType,\n                            isActive: false,\n                        },\n                        main: [\n                            {\n                                actionType: connectionActionTypes.copyType,\n                                isActive: false,\n                            },\n                            {\n                                actionType: connectionActionTypes.printType,\n                                isActive: true,\n                            },\n                            {\n                                actionType: connectionActionTypes.addLogoType,\n                                isActive: true,\n                            },\n                        ],\n                    },\n                },\n            },\n        ],\n        onlineDevices: [\n            {\n                key: 'device_1',\n                type: connectionTypes.wired,\n                countOfConnections: 0,\n                isHome: false,\n            },\n            {\n                key: 'device_2',\n                type: connectionTypes.wifi,\n                countOfConnections: 0,\n                isHome: false,\n            },\n        ],\n    },\n};\n\nexport const networkPortsCard: NetworkPortsCard = {\n    cardId: 'networkPorts-1',\n    type: cardTypes.portType,\n    title: networkPortsCardTitle,\n    cardContent: {\n        networkPortId: 'port-id_0',\n        ports: [\n            {\n                isActive: true,\n                portId: 'port-id_0',\n                portSpeed: 100,\n                portType: 'FDX',\n                portUnit: 'M',\n            },\n            {\n                isActive: true,\n                portId: 'port-id_1',\n                portSpeed: 100,\n                portType: 'FDX',\n                portUnit: 'M',\n            },\n            {\n                isActive: false,\n                portId: 'port-id_2',\n                portSpeed: 0,\n                portType: '',\n                portUnit: '',\n            },\n            {\n                isActive: false,\n                portId: 'port-id_3',\n                portSpeed: 0,\n                portType: '',\n                portUnit: '',\n            },\n            {\n                isActive: false,\n                portId: 'port-id_4',\n                portSpeed: 0,\n                portType: '',\n                portUnit: '',\n            },\n        ],\n    },\n};\n\nexport const internetCard: InternetCard = {\n    cardId: 'internetCard_ 1',\n    type: cardTypes.internetType,\n    title: internetCardTitle,\n    cardContent: {\n        main: {\n            startedTime,\n            provider: {\n                providerLabel: 'Using Ethernet',\n                providerType: 'PPPoE',\n            },\n            trafficInfo: {\n                download: {\n                    current: {\n                        unit: '',\n                        value: 0,\n                    },\n                    max: {\n                        unit: 'Mbit/s',\n                        value: 100,\n                    },\n                    type: trafficType.download,\n                },\n                upload: {\n                    current: {\n                        unit: '',\n                        value: 0,\n                    },\n                    max: {\n                        unit: 'Mbit/s',\n                        value: 50,\n                    },\n                    type: trafficType.upload,\n                },\n            },\n        },\n        details: [\n            {\n                label: 'Status',\n                type: internetDetailsType.reboot,\n                value: 'Connection established',\n            },\n            {\n                label: 'Internet safety',\n                type: internetDetailsType.configuration,\n                value: 'AdGuard DNS is enabled',\n            },\n            {\n                label: 'Authentication type',\n                type: internetDetailsType.default,\n                value: 'PPPoE',\n            },\n            {\n                label: 'IP address',\n                type: internetDetailsType.default,\n                value: '192.168.1.1',\n            },\n            {\n                label: 'Subnet mask',\n                type: internetDetailsType.default,\n                value: '125.125.125.125',\n            },\n            {\n                label: 'MAC Address',\n                type: internetDetailsType.default,\n                value: '13:ld:78:c1:5d:09',\n            },\n            {\n                label: 'Download',\n                type: internetDetailsType.download,\n                value: '',\n            },\n            {\n                label: 'Upload',\n                type: internetDetailsType.upload,\n                value: '',\n            },\n            {\n                label: 'Received',\n                type: internetDetailsType.received,\n                value: '',\n            },\n            {\n                label: 'Sent',\n                type: internetDetailsType.sent,\n                value: '',\n            },\n            {\n                label: 'DNS servers',\n                type: internetDetailsType.default,\n                value: '543.217.093.5',\n            },\n        ],\n    },\n};\nexport const cardsMocks: Cards = {\n    leftCards: [internetCard, applicationsCatrd, systemCatrd],\n    rightCards: [homeWiFiCard, guestWiFiCard, networkPortsCard],\n};\n","import { defaultCredentials, invalidCredentionalsMessage } from '../constants/login.constants';\nimport { invalidCardsMessage } from '../constants/cards.constants';\n\nimport { cardsMocks } from '../mock/cards.mock';\n\nimport { LoginValues } from '../models/login.model';\nimport { Cards } from '../models/dashboard.model';\nimport { ErrorHandler } from '../models/concurency.model';\n\nexport const login = ({ login, password }: LoginValues): Promise<string> => {\n    return new Promise((resolve, reject) =>\n        setTimeout(() => {\n            if (login === defaultCredentials.login && password === defaultCredentials.password) {\n                resolve('userToken');\n            } else {\n                reject(invalidCredentionalsMessage);\n            }\n        }, 1000)\n    );\n};\n\nexport const fetchDashboard = (userToken: string): Promise<Cards> =>\n    new Promise((resolve, reject) =>\n        setTimeout(() => {\n            if (userToken) {\n                return resolve(cardsMocks);\n            }\n\n            reject(invalidCardsMessage);\n        }, 2000)\n    );\n\nexport const loadDashboard = (\n    loginValues: LoginValues,\n    errorHandler: ErrorHandler\n): Promise<Cards | undefined> => login(loginValues).then(fetchDashboard).catch(errorHandler);\n","import React, { Suspense, useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { useHistory } from 'react-router-dom';\n\nimport { suspenseFetch } from '../../concurency/suspence-fetch';\nimport { SuspenseLoader } from '../common/loader';\nimport { loadDashboard } from '../../services/login-and-load-dashboard';\nimport { dashboardPath } from '../../constants/router.constants';\n\nimport { Cards } from '../../models/dashboard.model';\nimport { DashboardLoaderProps, ConcurencyLoginHandlerProps } from '../../models/concurency.model';\n\nexport const DashboardLoader = ({ dashboardRequest }: DashboardLoaderProps) => {\n    const history = useHistory();\n\n    const cards = dashboardRequest.read();\n\n    useEffect(() => {\n        history.push({ pathname: dashboardPath, state: cards });\n    }, [history, cards]);\n\n    return null;\n};\n\nexport const ConcurrencyLoginHandler = ({\n    loginValues,\n    errorHandler,\n    getDashboardRequest = loadDashboard,\n}: ConcurencyLoginHandlerProps) => {\n    const [dashboardRequest] = useState(\n        suspenseFetch<Cards | undefined>(getDashboardRequest(loginValues, errorHandler))\n    );\n\n    return (\n        <Suspense\n            fallback={ReactDOM.createPortal(\n                <SuspenseLoader />,\n                document.getElementById('root-portal-modal') as HTMLElement\n            )}\n        >\n            <DashboardLoader dashboardRequest={dashboardRequest} />\n        </Suspense>\n    );\n};\n","export const dashboardPath = '/dashboard';\n","import {\n    initialCredentials,\n    defaultCredentials,\n    minCountOfLoginSymbols,\n    minCountOfPasswordSymbols,\n    invalidCredentionalsMessage,\n    loginActionTypes,\n} from '../constants/login.constants';\nimport { LoginReducer, LoginState, Action, ActionHandlers } from '../models/login.model';\n\nconst {\n    cleanup,\n    cleanuperror,\n    cleanuplogin,\n    login,\n    password,\n    setdefault,\n    validate,\n} = loginActionTypes;\n\nexport const actionHandlers: ActionHandlers = {\n    [login]: (login: string) => ({ login }),\n    [password]: (password: string) => ({ password }),\n    [cleanup]: () => ({\n        ...initialCredentials,\n        errorMessage: '',\n    }),\n    [setdefault]: () => ({\n        ...defaultCredentials,\n        errorMessage: '',\n    }),\n    [cleanuperror]: () => ({ errorMessage: '' }),\n    [cleanuplogin]: (errorMessage: string) => ({\n        shouldLogin: false,\n        errorMessage,\n    }),\n    [validate]: (v: null, { login, password }: LoginState) => {\n        if (\n            login.trim().length > minCountOfLoginSymbols &&\n            password.trim().length > minCountOfPasswordSymbols\n        ) {\n            return {\n                shouldLogin: true,\n                errorMessage: '',\n            };\n        }\n\n        return {\n            shouldLogin: false,\n            errorMessage: invalidCredentionalsMessage,\n        };\n    },\n};\n\nexport const loginReducer: LoginReducer = (\n    state: LoginState,\n    { type, value }: Action\n): LoginState => {\n    const actionHandler = actionHandlers[type];\n    if (actionHandler) {\n        return {\n            ...state,\n            ...actionHandler(value, state),\n        };\n    }\n\n    return state;\n};\n","import React, { useReducer } from 'react';\nimport './login.scss';\n\nimport { Input } from '../../components/common/input';\nimport { Button } from '../../components/common/button';\n\nimport { Message } from '../../components/common/message';\nimport { initialState, loginActionTypes } from '../../constants/login.constants';\nimport { ConcurrencyLoginHandler } from '../../components/concurrency/concurrency-login-handler';\nimport { LoginState, LoginReducer } from '../../models/login.model';\nimport { loginReducer } from '../../reducers/login.reducer';\n\nconst { cleanup, cleanuperror, cleanuplogin, setdefault, validate } = loginActionTypes;\n\nconst loginInputName = 'login';\nconst passwordInputName = 'password';\n\nexport const LoginPage = () => {\n    const [{ login, password, shouldLogin, errorMessage }, dispatch] = useReducer<\n        LoginReducer,\n        LoginState\n    >(loginReducer, initialState, () => initialState);\n\n    return (\n        <>\n            <section id=\"root-portal-modal\"></section>\n            {shouldLogin ? (\n                <ConcurrencyLoginHandler\n                    loginValues={{ login, password }}\n                    errorHandler={(errorMessage: string): undefined => {\n                        dispatch({ type: cleanuplogin, value: errorMessage });\n                        return;\n                    }}\n                />\n            ) : null}\n            <section className=\"login\">\n                <h2 className=\"_aligned\">Login page</h2>\n                <Button\n                    className=\"hint-button hint-button__left\"\n                    buttonName=\"cleanup\"\n                    buttonHandler={() => dispatch({ type: cleanup })}\n                />\n                <Button\n                    className=\"hint-button  hint-button__right\"\n                    buttonName=\"set default\"\n                    buttonHandler={() => dispatch({ type: setdefault })}\n                />\n                <section className=\"login-form\">\n                    <Input\n                        name={loginInputName}\n                        value={login}\n                        onChange={(value: string) =>\n                            dispatch({ type: loginActionTypes.login, value })\n                        }\n                    />\n                    <Input\n                        name={passwordInputName}\n                        value={password}\n                        onChange={(value: string) =>\n                            dispatch({ type: loginActionTypes.password, value })\n                        }\n                        type=\"password\"\n                    />\n                    <Button buttonName=\"Login\" buttonHandler={() => dispatch({ type: validate })} />\n                    <Message\n                        type=\"error\"\n                        message={errorMessage}\n                        onClose={() => dispatch({ type: cleanuperror })}\n                    />\n                </section>\n            </section>\n        </>\n    );\n};\n","import React from 'react';\n\nimport { Input, searchPlaceholder } from './input';\n\nexport const SearchBar = () => (\n    <label className=\"search-content\">\n        <Input\n            value=\"\"\n            name=\"search\"\n            type=\"search\"\n            className=\"search-input\"\n            placeholder={searchPlaceholder}\n            onChange={(value: string) => console.log(value)}\n        />\n    </label>\n);\n","import React from 'react';\nimport './header.scss';\n\nimport { SearchBar } from '../../common/search-bar';\n\nexport const Header = () => (\n    <header>\n        <h1>\n            Keenetic <span>Router</span>\n        </h1>\n        <SearchBar />\n    </header>\n);\n","import React from 'react';\nimport './navigation-bar.scss';\n\nexport type NavigationBarProps = {\n    isCollapsed: boolean;\n};\n\nexport const NavigationBar = ({ isCollapsed }: NavigationBarProps) => {\n    return (\n        <section className=\"navbar-container\">\n            <section\n                className={`navbar navbar__${isCollapsed ? 'collapsed' : 'expanded'}`}\n            ></section>\n        </section>\n    );\n};\n","import React from 'react';\nimport { Message } from '../../common/message';\n\nexport type UnknownCardProps = {\n    type: string;\n};\nexport const UnknownCard = ({ type }: UnknownCardProps) => (\n    <section className=\"unknown-card\">\n        <Message\n            message={`card with type: ${type} is not found`}\n            type=\"error\"\n            onClose={() => {}}\n            shouldHideCloseButton\n        />\n    </section>\n);\n","import moment from 'moment';\n\nimport {\n    paramTypes,\n    SystemParam,\n    SystemParams,\n    SystemParamValue,\n    UpdateParams,\n} from '../models/dashboard.model';\n\nexport type ParamHandlerArguments = {\n    value: SystemParamValue;\n    startedTime: string;\n};\nexport type ParamHandlers = {\n    [key in paramTypes]: (paramHandlerArguments: ParamHandlerArguments) => SystemParamValue;\n};\n\nconst RAMUnits = 'Mbytes';\nexport const updateRAMValue = ({ value }: ParamHandlerArguments): SystemParamValue => {\n    const allMemory = parseFloat((value as string).split('/')[1]);\n    const usedRAMinPercentage = Math.random();\n    const usedRAMinUnits = Math.round(usedRAMinPercentage * allMemory);\n\n    return `${Math.floor(usedRAMinPercentage * 100)}% (${usedRAMinUnits}/${allMemory} ${RAMUnits})`;\n};\n\nexport const updateCPUValue = (): SystemParamValue => {\n    return `${Math.floor(Math.random() * 100)}%`;\n};\n\nexport const updateUptime = ({ startedTime }: ParamHandlerArguments): SystemParamValue => {\n    const diff = moment(moment().diff(startedTime));\n\n    return `${diff.format('D')} days ${diff.format('H:mm:ss')}`;\n};\n\nexport const getCurrentTime = (): SystemParamValue => {\n    const now = moment();\n    return now.format('M/DD/YYYY H:mm:ss');\n};\n\nexport const inactive = (): SystemParamValue => '';\n\nconst paramHandlers: ParamHandlers = {\n    [paramTypes.ramUsage]: updateRAMValue,\n    [paramTypes.cpuUsage]: updateCPUValue,\n    [paramTypes.uptime]: updateUptime,\n    [paramTypes.currentTime]: getCurrentTime,\n    [paramTypes.inactive]: inactive,\n};\n\nexport const updateParamsMock = (\n    activeParamTypes: SystemParams,\n    updateParams: UpdateParams,\n    startedTime: string\n): void =>\n    updateParams(\n        activeParamTypes.map(\n            (param: SystemParam): SystemParam => ({\n                ...param,\n                value: paramHandlers[param.paramType]({ value: param.value, startedTime }),\n            })\n        )\n    );\n","import React, { useEffect, useMemo, useState } from 'react';\nimport {\n    CardContent,\n    DynamicParamProps,\n    SystemCardContent,\n    SystemParam,\n    SystemParams,\n} from '../../../models/dashboard.model';\nimport { splitSystemParams } from '../../../services/system-card.service';\nimport { updateParamsMock } from '../../../services/system-params.service';\nimport { updateActiveParamsInterval } from '../../../constants/cards.constants';\n\nexport const ParamRenderer = ({ label, value }: SystemParam) => (\n    <section className=\"param-pair\">\n        <p className=\"param-pair__label\">{label}</p>\n        <p className=\"param-pair__value\">{value}</p>\n    </section>\n);\n\nexport const renderSystemParams = (systemParams: SystemParams) =>\n    systemParams.map((systemParam: SystemParam) => (\n        <ParamRenderer key={systemParam.label} {...systemParam} />\n    ));\n\nexport const DynamicParams = ({ systemParams, startedTime }: DynamicParamProps) => {\n    const [params, updateParams] = useState(systemParams);\n\n    useEffect(() => {\n        const timerId = setInterval(() => {\n            updateParamsMock(params, updateParams, startedTime);\n        }, updateActiveParamsInterval);\n        return () => clearInterval(timerId);\n    }, [updateParams, params, startedTime]);\n\n    return <>{renderSystemParams(params)}</>;\n};\n\nexport const SystemCardComponent = (cardContent: CardContent) => {\n    const { systemParams, startedTime } = cardContent as SystemCardContent;\n\n    const { staticSystemParams, dynamicSystemParams } = useMemo(\n        () => splitSystemParams(systemParams),\n        [systemParams]\n    );\n    return (\n        <section className=\"card-content\">\n            {renderSystemParams(staticSystemParams)}\n            <DynamicParams systemParams={dynamicSystemParams} startedTime={startedTime} />\n        </section>\n    );\n};\n","import React from 'react';\nimport './checkbox.scss';\n\nexport type CheckboxProps = {\n    isDisable: boolean;\n    isActive: boolean;\n    triggerCheckbox: (isActive: boolean) => void;\n};\n\nconst setCheckboxClassName = (isActive: boolean) =>\n    isActive ? 'checkbox__active' : 'checkbox__inactive';\nconst setCheckboxBarClassName = (isActive: boolean) =>\n    isActive ? 'checkbox--bar__active' : 'checkbox--bar__inactive';\n\nconst setCheckboxClassNameDisabled = (isDisable: boolean) =>\n    isDisable ? 'checkbox__disabled' : 'checkbox__enabled';\nexport const Checkbox = React.memo(({ isActive, triggerCheckbox, isDisable }: CheckboxProps) => (\n    <section\n        className={`checkbox ${setCheckboxClassName(isActive)} ${setCheckboxClassNameDisabled(\n            isDisable\n        )}`}\n    >\n        <span\n            onClick={() => !isDisable && triggerCheckbox(!isActive)}\n            className={`checkbox--bar ${setCheckboxBarClassName(isActive)}`}\n        ></span>\n    </section>\n));\n","import React, { useState, PropsWithChildren } from 'react';\nimport { ModalInfoContext, ModalInfo } from '../models/modals.model';\n\nexport const ModalContext = React.createContext<ModalInfoContext>(\n    (null as unknown) as ModalInfoContext\n);\n\nexport const WithModalContext = ({ children }: PropsWithChildren<{}>) => {\n    const [modalInfo, setModal] = useState(null as ModalInfo);\n\n    return (\n        <ModalContext.Provider value={{ modalInfo, setModal }}>{children}</ModalContext.Provider>\n    );\n};\n","import { ConnectionAction, ConnectionInfo } from '../models/dashboard.model';\nimport { ModalInfo } from '../models/modals.model';\nimport { connectionActionTypes } from '../constants/modal.constants';\n\nconst alwaysActiveConnectionActionTypes = [\n    connectionActionTypes.addLogoType,\n    connectionActionTypes.printType,\n];\n\nexport const setIsActiveActionStatus = (\n    { actionType, isActive }: ConnectionAction,\n    connectionStatus: boolean\n): ConnectionAction => ({\n    actionType,\n    isActive: connectionStatus ? isActive : false,\n});\n\nexport const getConnectionModalInfo = (\n    connectionInfo: ConnectionInfo,\n    name: string,\n    range: string,\n    connectionStatus: boolean\n): ModalInfo => ({\n    ...connectionInfo,\n    name,\n    range,\n    actions: {\n        WPS: setIsActiveActionStatus(connectionInfo.actions.WPS, connectionStatus),\n        main: connectionInfo.actions.main.map((action) =>\n            alwaysActiveConnectionActionTypes.includes(action.actionType)\n                ? action\n                : setIsActiveActionStatus(action, connectionStatus)\n        ),\n    },\n});\n","import { useCallback, useContext, useState } from 'react';\n\nimport { LoaderContext } from '../../../context/loader.context';\nimport { ModalContext } from '../../../context/modal.context';\n\nimport { getConnectionModalInfo } from '../../../context/modal.connection.actions.transformer';\n\nimport { ConnectionInfo } from '../../../models/dashboard.model';\n\nexport const useTriggerCheckbox = (connectionId: string, isActive: boolean) => {\n    const { setLoader } = useContext(LoaderContext);\n    const [connectionStatus, setConnectionStatus] = useState(isActive);\n    const [isWaiting, setWaitingStatus] = useState(false);\n\n    const triggerCheckbox = useCallback(\n        async (connectionStatus: boolean) => {\n            setConnectionStatus(connectionStatus);\n\n            setWaitingStatus(true);\n            setLoader(true);\n            try {\n                await new Promise((res) => setTimeout(() => res(connectionId), 2000));\n                setConnectionStatus(connectionStatus);\n            } catch {\n                setConnectionStatus(!connectionStatus);\n            } finally {\n                setWaitingStatus(false);\n                setLoader(false);\n            }\n        },\n        [connectionId, setLoader, setWaitingStatus]\n    );\n\n    return {\n        triggerCheckbox,\n        connectionStatus,\n        isWaiting,\n    };\n};\n\nexport const useButtonToOpenModal = (\n    connectionInfo: ConnectionInfo,\n    name: string,\n    range: string,\n    connectionStatus: boolean\n) => {\n    const { setModal } = useContext(ModalContext);\n\n    return useCallback(\n        () => setModal(getConnectionModalInfo(connectionInfo, name, range, connectionStatus)),\n        [connectionStatus, connectionInfo, name, range, setModal]\n    );\n};\n","import React from 'react';\nimport { Button } from '../../common/button';\nimport { Checkbox } from '../../common/checkbox';\n\nimport { useButtonToOpenModal, useTriggerCheckbox } from './connection.hooks';\nimport { channelLabel, showConnectionInfoButtonLabel } from '../../../constants/cards.constants';\n\nimport { ConnectionProps } from '../../../models/dashboard.model';\n\nexport const ConnectionComponent = ({\n    connection: { channel, connectionInfo, isActive, name, range, connectionId },\n}: ConnectionProps) => {\n    const { triggerCheckbox, isWaiting, connectionStatus } = useTriggerCheckbox(\n        connectionId,\n        isActive\n    );\n\n    const setModalContext = useButtonToOpenModal(connectionInfo, name, range, connectionStatus);\n\n    return (\n        <section className=\"connection\">\n            <section className=\"connection-main\">\n                <section className=\"connection-main__status\">\n                    <Checkbox\n                        isDisable={isWaiting}\n                        isActive={connectionStatus}\n                        triggerCheckbox={() => triggerCheckbox(!connectionStatus)}\n                    />\n                </section>\n                <section className=\"details\">\n                    <p className=\"details__name\">{name}</p>\n                    <section className=\"details--minor\">\n                        <p className=\"details--minor__range\">{range}, </p>\n                        <p className=\"details--minor__channel\">\n                            {channelLabel} {channel}\n                        </p>\n                    </section>\n                </section>\n            </section>\n            <section className=\"connection-info\">\n                <Button\n                    className=\"show-more-button\"\n                    buttonName={showConnectionInfoButtonLabel}\n                    buttonHandler={setModalContext}\n                />\n            </section>\n        </section>\n    );\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { OnlineDeviceProps } from '../../../models/dashboard.model';\nimport { connectionTypeMessages } from '../../../constants/cards.constants';\n\nconst getConnectionModifier = (isHome: boolean) =>\n    isHome ? 'connections-count__home' : 'connections-count__guest';\n\nexport const OnlineDeviceComponent = ({\n    onlineDevice: { countOfConnections, type, isHome },\n}: OnlineDeviceProps) => (\n    <section className=\"online-device\">\n        <Link\n            to={'/controlPanel/devicesList'}\n            className={`connections-count ${getConnectionModifier(isHome)}`}\n        >\n            {countOfConnections}\n            {countOfConnections ? (\n                <span className=\"connections-count__hint\">{countOfConnections}</span>\n            ) : null}\n        </Link>\n        <p className=\"device-type\">{connectionTypeMessages[type]}</p>\n    </section>\n);\n","import React from 'react';\n\nimport { CardContent, NetworkPortsCardContent, Port } from '../../../models/dashboard.model';\n\nexport type PortProps = Port & {\n    isNetwork: boolean;\n    index: number;\n};\nexport const PortRenderer = ({\n    isActive,\n    isNetwork,\n    portSpeed,\n    portType,\n    portUnit,\n    index,\n}: PortProps) => (\n    <section className={`port ${isNetwork ? 'port_network' : ''}`}>\n        <p className=\"port_icon\">\n            {index}\n            {isNetwork ? <span className=\"port_icon__network\"></span> : null}\n        </p>\n        <section className=\"port-info\">\n            <p className=\"port-info_type\">{isActive ? portType : '-'}</p>\n            {isActive ? <p className=\"port-info_speed\">{`${portSpeed} ${portUnit}`}</p> : null}\n        </section>\n    </section>\n);\n\nexport const NetworkPortsCardComponent = (cardContent: CardContent) => {\n    const { ports, networkPortId } = cardContent as NetworkPortsCardContent;\n\n    return (\n        <section className=\"card-content card-content_port\">\n            {ports.map((port: Port, index: number) => (\n                <PortRenderer\n                    key={port.portId}\n                    {...port}\n                    index={index}\n                    isNetwork={port.portId === networkPortId}\n                />\n            ))}\n        </section>\n    );\n};\n","import { atom } from 'recoil';\n\nimport { internetStateKey } from '../../constants/recoil.constants';\nimport { InternetState } from '../../models/internet.model';\n\nexport const internetState = atom<InternetState>({\n    key: internetStateKey,\n    default: {\n        download: {\n            value: 0,\n            unit: '',\n        },\n        upload: {\n            value: 0,\n            unit: '',\n        },\n        received: '',\n        sent: '',\n    },\n});\n","export const internetStateKey = 'internetState';\nexport const speedTrafficStateKey = 'speedTrafficState';\nexport const sentReceivedTrafficStateKey = 'sentReceivedTrafficState';\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport './provider.scss';\n\nimport { internetState } from '../../../recoil-state/internet/internet.atom';\n\nimport { providerHeaderLabel } from '../../../constants/cards.constants';\n\nimport { InternetProvider } from '../../../models/dashboard.model';\nimport { ParamHandlerArguments, updateUptime } from '../../../services/system-params.service';\n\nexport type ProviderProps = InternetProvider & {\n    connectionDuration: string;\n};\n\nexport const InternetConnectionDuration = React.memo(\n    ({ startedTime, value }: ParamHandlerArguments) => {\n        useRecoilValue(internetState); // to sync with state update\n\n        return (\n            <section className=\"provider-connection-duration\">\n                Connected: {updateUptime({ startedTime, value })}\n            </section>\n        );\n    }\n);\nexport const ProviderRenderer = ({\n    providerLabel,\n    providerType,\n    connectionDuration,\n}: ProviderProps) => (\n    <section className=\"provider\">\n        <h3 className=\"provider-label\">{providerHeaderLabel}</h3>\n        <section className=\"provider-info\">\n            <span className=\"provider-info_label\">{providerLabel}</span>\n            {' / '}\n            <span className=\"provider-info_type\">{providerType}</span>\n        </section>\n        <InternetConnectionDuration value=\"\" startedTime={connectionDuration} />\n    </section>\n);\n","import { bModifier, countOfDisplayedNodes, mModifier, units } from '../constants/cards.constants';\n\nimport { TrafficValue, TrafficValues } from '../models/dashboard.model';\n\nconst getRange = (unit: string) => (units.indexOf(unit) ? mModifier : bModifier);\n\nexport const getDataset = (current: TrafficValues, max: TrafficValue) => {\n    const maxRange = max.value * mModifier;\n    const currentLength = current.length;\n    const arrayLength =\n        countOfDisplayedNodes - currentLength > 0 ? countOfDisplayedNodes - currentLength : 0;\n\n    const emptyNodes = new Array(arrayLength).fill('').map(() => ({ y: 0 }));\n\n    const filledNodes = current.map(({ value, unit }: TrafficValue) => ({\n        y: (value * getRange(unit)) / maxRange,\n    }));\n\n    return [{ y: 0 }, ...emptyNodes, ...filledNodes, { y: 0 }];\n};\n\nexport const getLimitedCountOfNodes = (\n    trafficValues: TrafficValues,\n    trafficValue: TrafficValue\n): TrafficValues => {\n    let updatedTrafficValues = [...trafficValues, trafficValue];\n\n    if (updatedTrafficValues.length > countOfDisplayedNodes) {\n        const [, ...updatedTrafficValuesWithoutFirstValues] = updatedTrafficValues;\n        updatedTrafficValues = updatedTrafficValuesWithoutFirstValues;\n    }\n\n    return updatedTrafficValues;\n};\n","import React, { useEffect, useRef } from 'react';\nimport './traffic-graph.scss';\n\nimport { renderGraph } from '../../../utils/d3-graph';\n\nimport { getDataset, getLimitedCountOfNodes } from '../../../services/traffic-graph.service';\n\nimport { TrafficValue } from '../../../models/dashboard.model';\nimport { TrafficGraphProps } from '../../../models/internet.model';\n\nconst getModifier = (isUpload: boolean) => (isUpload ? 'upload' : 'download');\n\nexport const TrafficGraph = ({ isUpload, current, max }: TrafficGraphProps) => {\n    const maxRef = useRef(max);\n    const nodesRef = useRef<Array<TrafficValue>>([]);\n\n    useEffect(() => {\n        nodesRef.current = getLimitedCountOfNodes(nodesRef.current, current);\n        renderGraph(\n            'traffic-graph',\n            getModifier(isUpload),\n            getDataset(nodesRef.current, maxRef.current)\n        );\n    }, [current, isUpload]);\n\n    return <section className={`traffic-graph traffic-graph__${getModifier(isUpload)}`}></section>;\n};\n","import * as d3 from 'd3';\n\nconst offsetTop = 0;\nconst offsetRight = 0;\nconst offsetBottom = 10;\nconst offsetLeft = 0;\n\nexport const renderGraph = (selector: string, modifier: string, dataset: Array<{ y: number }>) => {\n    const parent = d3.select(`.${selector}__${modifier}`);\n    parent.selectAll('*').remove();\n\n    const {\n        width: parentWidth,\n        height: parentHeight,\n    } = (parent.node() as HTMLElement).getBoundingClientRect();\n\n    const width = parentWidth - offsetLeft - offsetRight;\n    const height = parentHeight - offsetTop - offsetBottom;\n\n    const xScale = d3\n        .scaleLinear()\n        .domain([0, dataset.length - 1])\n        .range([0, width]);\n\n    const yScale = d3.scaleLinear().domain([0, 1]).range([0, height]);\n\n    const line = d3\n        .line()\n        .x((d, i) => xScale(i))\n        .y((d: any) => height - yScale(d.y))\n        .curve(d3.curveMonotoneX);\n\n    const svg = parent\n        .append('svg')\n        .attr('width', width + offsetLeft + offsetRight)\n        .attr('height', height + offsetTop + offsetBottom);\n\n    svg.append('g')\n        .attr('transform', `translate(${offsetLeft}, ${offsetTop})`)\n        .append('path')\n        .datum(dataset)\n        .attr('class', `line__${modifier}`)\n        .attr('d', line as any);\n\n    const hAxis = d3\n        .axisRight(d3.scaleLinear().range([height, 0])) // to set base border as he first item to simple remove it\n        .ticks(6)\n        .tickSize(width);\n\n    svg.append('g')\n        .attr('class', 'h-oriented-borders')\n        .call(hAxis)\n        .call((g) => g.select('.domain').remove()) // to remove domain\n        .call((g) => g.select('.tick').remove()); // to remove the base border\n};\n","import { selector } from 'recoil';\n\nimport { internetState } from './internet.atom';\nimport { speedTrafficStateKey } from '../../constants/recoil.constants';\n\nexport const speedTrafficState = selector({\n    key: speedTrafficStateKey,\n    get: ({ get }) => ({\n        upload: get(internetState).upload,\n        download: get(internetState).download,\n    }),\n});\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport './traffic-timing.scss';\n\nimport { speedTrafficState } from '../../../recoil-state/internet/speed.traffic.selector';\nimport { getCurrentTiming, getStartTiming } from '../../../services/traffic.time.service';\n\nexport const TrafficTiming = React.memo(() => {\n    useRecoilValue(speedTrafficState);\n\n    return (\n        <section className=\"timing\">\n            <span className=\"timing_start\">{getStartTiming()}</span>\n            <span className=\"timing_current\">{getCurrentTiming()}</span>\n        </section>\n    );\n});\n","import moment from 'moment';\n\nimport { countOfDisplayedNodes, trafficTimeFormat } from '../constants/cards.constants';\n\nconst msModifier = 1000;\n\nexport const getCurrentTiming = (): string => moment().format(trafficTimeFormat);\nexport const getStartTiming = (): string =>\n    moment(moment().diff(countOfDisplayedNodes * msModifier)).format(trafficTimeFormat);\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport './traffic.scss';\n\nimport { TrafficGraph } from './traffic-graph';\nimport { TrafficTiming } from './traffic-timing';\n\nimport { speedTrafficState } from '../../../recoil-state/internet/speed.traffic.selector';\n\nimport { trafficType, trafficTypeLabel } from '../../../constants/cards.constants';\nimport { Traffic, TrafficValue } from '../../../models/dashboard.model';\n\nexport const getTrafficValue = ({ unit, value }: TrafficValue) => `${value} ${unit}`;\nexport const getTrafficModifier = (type: trafficType) => `traffic__${type}`;\n\nexport const TrafficRenderer = React.memo(({ type, max }: Traffic) => {\n    // https://github.com/facebookexperimental/Recoil/issues/12\n    const { upload, download } = useRecoilValue(speedTrafficState);\n    const trafficValue = type === trafficType.upload ? upload : download;\n\n    return (\n        <section className={`traffic ${getTrafficModifier(type)}`}>\n            <section className=\"traffic-info\">\n                <section className=\"traffic-info_actual\">\n                    <span className=\"traffic-info_actual-type\">{trafficTypeLabel[type]}: </span>\n                    <span className=\"traffic-info_actual-value\">\n                        {getTrafficValue(trafficValue)}\n                    </span>\n                </section>\n                <section className=\"traffic-info_max-speed\">{getTrafficValue(max)}</section>\n            </section>\n            <TrafficGraph max={max} current={trafficValue} isUpload={type === trafficType.upload} />\n            <TrafficTiming />\n        </section>\n    );\n});\n","import { selector } from 'recoil';\n\nimport { internetState } from './internet.atom';\nimport { sentReceivedTrafficStateKey } from '../../constants/recoil.constants';\n\nexport const sentReceivedTrafficState = selector({\n    key: sentReceivedTrafficStateKey,\n    get: ({ get }) => ({\n        sent: get(internetState).sent,\n        received: get(internetState).received,\n    }),\n});\n","import React, { useState } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport './details.scss';\n\nimport { Button } from '../../common/button';\n\nimport { sentReceivedTrafficState } from '../../../recoil-state/internet/sent-received.traffic.selector';\nimport { speedTrafficState } from '../../../recoil-state/internet/speed.traffic.selector';\n\nimport {\n    hiddenDetailsLabel,\n    internetDetailsType,\n    moreDetailsLabel,\n} from '../../../constants/cards.constants';\n\nimport { InternetDetail, InternetDetails } from '../../../models/dashboard.model';\n\nconst { download, upload, received, sent, reboot, configuration } = internetDetailsType;\n\nexport type InternetDetailsProps = {\n    details: InternetDetails;\n};\n\nexport const DefaultDetailRenderer = ({ label, value }: InternetDetail) => (\n    <section className=\"detail-pair\">\n        <section className=\"detail-pair-label\">{label}</section>\n        <section className=\"detail-pair-value\">{value}</section>\n    </section>\n);\n\nexport const SentReceivedDetailRenderer = (detail: InternetDetail) => {\n    // https:github.com/facebookexperimental/Recoil/issues/12\n    const { received, sent } = useRecoilValue(sentReceivedTrafficState);\n    const value = detail.type === internetDetailsType.sent ? sent : received;\n\n    return <DefaultDetailRenderer {...detail} value={value} />;\n};\n\nexport const SpeedTrafficDetailRenderer = (detail: InternetDetail) => {\n    // https:github.com/facebookexperimental/Recoil/issues/12\n    const { upload, download } = useRecoilValue(speedTrafficState);\n    let { value, unit } = detail.type === internetDetailsType.upload ? upload : download;\n\n    return <DefaultDetailRenderer {...detail} value={`${value} ${unit}`} />;\n};\n\nexport const detailRenderers: {\n    [renderer in internetDetailsType]: (detail: InternetDetail) => JSX.Element;\n} = {\n    [configuration]: DefaultDetailRenderer,\n    [reboot]: DefaultDetailRenderer,\n    [sent]: SentReceivedDetailRenderer,\n    [received]: SentReceivedDetailRenderer,\n    [download]: SpeedTrafficDetailRenderer,\n    [upload]: SpeedTrafficDetailRenderer,\n    [internetDetailsType.default]: DefaultDetailRenderer,\n};\n\nexport const renderDetail = (detail: InternetDetail, index: number) => {\n    const DetailRenderer = detailRenderers[detail.type];\n    return <DetailRenderer key={index} {...detail} />;\n};\n\nexport const renderDetails = (details: InternetDetails) =>\n    details.map((detail: InternetDetail, index: number) => renderDetail(detail, index));\n\nexport const DetailsRenderer = ({ details }: InternetDetailsProps) => {\n    const [isHidden, toggleDetailsVisibility] = useState(true);\n\n    return (\n        <section className=\"details\">\n            <Button\n                className=\"details-button\"\n                buttonHandler={() => toggleDetailsVisibility(!isHidden)}\n                buttonName={isHidden ? moreDetailsLabel : hiddenDetailsLabel}\n            />\n            {isHidden ? null : <section className=\"details-info\">{renderDetails(details)}</section>}\n        </section>\n    );\n};\n","import { TrafficValue } from '../models/dashboard.model';\nimport { units } from '../constants/cards.constants';\nimport { SentReceivedTraffic } from '../models/internet.model';\n\nexport const generateTrafficValue = (value: string) => {\n    const [strValue, units] = value.split(' ');\n    return `${Number(strValue) + 1} ${units}`;\n};\n\nexport const getSentReceivedTraffic = (sentReceived: SentReceivedTraffic): SentReceivedTraffic => ({\n    sent: generateTrafficValue(sentReceived.sent || '54 Mbytes'),\n    received: generateTrafficValue(sentReceived.received || '11 Mbytes'),\n});\n\nexport const generateUpDownLoadTraffic = (): TrafficValue => ({\n    unit: units[Math.round(Math.random())],\n    value: Math.round(Math.random() * 500) / 10,\n});\n","import React, { MutableRefObject, useEffect, useRef } from 'react';\nimport { SetterOrUpdater, useRecoilState } from 'recoil';\n\nimport { internetState } from '../../../recoil-state/internet/internet.atom';\n\nimport { internetDetailsType, internetRequestDelay } from '../../../constants/cards.constants';\nimport {\n    generateUpDownLoadTraffic,\n    getSentReceivedTraffic,\n} from '../../../services/internet-card.service';\n\nimport { InternetDetail, InternetDetails, TrafficInfo } from '../../../models/dashboard.model';\nimport { InternetState, SentReceivedTraffic } from '../../../models/internet.model';\n\nexport type ContextUpdaterProps = {\n    details: InternetDetails;\n    trafficInfo: TrafficInfo;\n};\n\nexport const getValue = (details: InternetDetails, type: internetDetailsType): string =>\n    (details.find((detail: InternetDetail) => detail.type === type) || { value: '' }).value;\n\nconst useInitInternetState = (\n    updateInternetState: SetterOrUpdater<InternetState>,\n    trafficInfo: TrafficInfo,\n    details: InternetDetails\n) => {\n    useEffect(() => {\n        updateInternetState({\n            ...{ upload: trafficInfo.upload.current, download: trafficInfo.download.current },\n            received: getValue(details, internetDetailsType.received),\n            sent: getValue(details, internetDetailsType.sent),\n        });\n    }, [trafficInfo, details, updateInternetState]);\n};\n\nconst useUpdateInternetState = (\n    updateInternetState: SetterOrUpdater<InternetState>,\n    sentReceivedRef: MutableRefObject<SentReceivedTraffic>\n) => {\n    useEffect(() => {\n        const timerId = setInterval(() => {\n            const sentReceivedTraffic = getSentReceivedTraffic(sentReceivedRef.current);\n            sentReceivedRef.current = sentReceivedTraffic;\n\n            updateInternetState({\n                ...sentReceivedTraffic,\n                upload: generateUpDownLoadTraffic(),\n                download: generateUpDownLoadTraffic(),\n            });\n        }, internetRequestDelay);\n        return () => clearInterval(timerId);\n    }, [updateInternetState, sentReceivedRef]);\n};\n\nexport const RecoilInternetUpdater = React.memo(({ details, trafficInfo }: ContextUpdaterProps) => {\n    const [{ received, sent }, updateInternetState] = useRecoilState(internetState);\n    const sentReceivedRef = useRef({ received, sent });\n\n    useInitInternetState(updateInternetState, trafficInfo, details);\n    useUpdateInternetState(updateInternetState, sentReceivedRef);\n\n    return null;\n});\n","import React from 'react';\nimport { RecoilRoot } from 'recoil';\n\nimport { ProviderRenderer } from '../internet/provider';\nimport { TrafficRenderer } from '../internet/traffic';\nimport { DetailsRenderer } from '../internet/details';\n\nimport { CardContent, InternetCardContent } from '../../../models/dashboard.model';\nimport { RecoilInternetUpdater } from '../internet/recoil-internet-updater';\n\nexport const InternetCardRenderer = (cardContent: InternetCardContent) => {\n    const { main, details } = cardContent;\n    const { trafficInfo, startedTime, provider } = main;\n    const { upload, download } = trafficInfo;\n\n    return (\n        <section className=\"card-content\">\n            <ProviderRenderer {...provider} connectionDuration={startedTime} />\n            <section className=\"traffics\">\n                <TrafficRenderer {...download} />\n                <TrafficRenderer {...upload} />\n            </section>\n            <DetailsRenderer details={details} />\n        </section>\n    );\n};\nexport const InternetCardComponent = (cardContent: CardContent) => {\n    return (\n        <RecoilRoot>\n            <RecoilInternetUpdater\n                details={(cardContent as InternetCardContent).details}\n                trafficInfo={(cardContent as InternetCardContent).main.trafficInfo}\n            />\n            <InternetCardRenderer {...(cardContent as InternetCardContent)} />\n        </RecoilRoot>\n    );\n};\n","import React from 'react';\nimport './cards.scss';\n\nimport * as models from '../../../models/dashboard.model';\nimport { cardTypes } from '../../../constants/cards.constants';\nimport { UnknownCard } from './unknown-card';\nimport { ApplicationsCardComponent } from './applications-card';\nimport { SystemCardComponent } from './system-card';\nimport { WifiCardComponent } from './wifi-card';\nimport { NetworkPortsCardComponent } from './network-ports-card';\nimport { InternetCardComponent } from './internet-card';\n\nconst cardsComponents: models.CardsComponents = {\n    [cardTypes.applicationType]: ApplicationsCardComponent,\n    [cardTypes.systemType]: SystemCardComponent,\n    [cardTypes.wifiType]: WifiCardComponent,\n    [cardTypes.portType]: NetworkPortsCardComponent,\n    [cardTypes.internetType]: InternetCardComponent,\n};\n\nexport const Card = React.memo(({ card }: models.CardProps) => {\n    const CardComponent = cardsComponents[card.type];\n    const title = card.title;\n    return (\n        <section className=\"card\">\n            <section className=\"application-card\">\n                <h3 className=\"card__title\">{title}</h3>\n                {CardComponent ? (\n                    <CardComponent {...card.cardContent} />\n                ) : (\n                    <UnknownCard type={card.type} />\n                )}\n            </section>\n        </section>\n    );\n});\n\nexport const Cards = ({ leftCards, rightCards }: models.CardsProps) => (\n    <section className=\"cards\">\n        <section className=\"cards-left\">\n            {leftCards.map((card: models.Card) => (\n                <Card key={card.cardId} card={card} />\n            ))}\n        </section>\n\n        <section className=\"cards-right\">\n            {rightCards.map((card: models.Card) => (\n                <Card key={card.cardId} card={card} />\n            ))}\n        </section>\n    </section>\n);\n","import React from 'react';\nimport { CardContent, ApplicationsCardContent } from '../../../models/dashboard.model';\n\nexport const hasNoApplicationsMessage = 'Applications not installed';\n\nexport const ApplicationsCardComponent = (cardContent: CardContent) => {\n    const { applications } = cardContent as ApplicationsCardContent;\n\n    return (\n        <section className=\"card-content\">\n            {applications.length ? 'Applications' : hasNoApplicationsMessage}\n        </section>\n    );\n};\n","import { SplitParams, SystemParam } from '../models/dashboard.model';\n\nexport const splitSystemParams = (systemParams: Array<SystemParam>) =>\n    systemParams.reduce(\n        (params: SplitParams, param: SystemParam): SplitParams => {\n            const field = param.isActive ? 'dynamicSystemParams' : 'staticSystemParams';\n            params[field].push(param);\n\n            return params;\n        },\n        {\n            staticSystemParams: [],\n            dynamicSystemParams: [],\n        }\n    );\n","import React from 'react';\nimport {\n    Connection,\n    OnlineDevice,\n    CardContent,\n    WiFiCardContent,\n} from '../../../models/dashboard.model';\nimport { onlineDeviceTitle } from '../../../constants/cards.constants';\nimport { ConnectionComponent } from '../connection/connection';\nimport { OnlineDeviceComponent } from '../online-device/online-device';\n\nexport const WifiCardComponent = (cardContent: CardContent) => {\n    const { connections, onlineDevices } = cardContent as WiFiCardContent;\n    return (\n        <section className=\"card-content\">\n            <section className=\"connections\">\n                {connections.map((connection: Connection) => (\n                    <ConnectionComponent key={connection.connectionId} connection={connection} />\n                ))}\n            </section>\n            {onlineDevices.length ? (\n                <section className=\"devices\">\n                    <h3 className=\"devices--title\">{onlineDeviceTitle}</h3>\n                    <section className=\"devices-content\">\n                        {onlineDevices.map((onlineDevice: OnlineDevice) => (\n                            <OnlineDeviceComponent\n                                key={onlineDevice.key}\n                                onlineDevice={onlineDevice}\n                            />\n                        ))}\n                    </section>\n                </section>\n            ) : null}\n        </section>\n    );\n};\n","import { useEffect, useState } from 'react';\nimport { History } from 'history';\n\nimport { defaultCards } from '../constants/cards.constants';\nimport { cardsMocks } from '../mock/cards.mock';\nimport { dashboardPath } from '../constants/router.constants';\n\nimport { Cards, CardsResponse } from '../models/dashboard.model';\n\nexport type SetCards = (cards: Cards) => void;\n\nexport class CardLoaderService {\n    public useLoadCards(history: History<Cards>): CardsResponse {\n        const [isLoading, setLoader] = useState(false);\n        const [{ leftCards, rightCards }, setCards] = useState(defaultCards);\n\n        useEffect(() => {\n            const preloadedCards = history.location.state;\n\n            if (preloadedCards) {\n                history.replace(dashboardPath, undefined);\n                return setCards(preloadedCards);\n            }\n\n            setLoader(true);\n            this.fetchCards(setCards).finally(() => setLoader(false));\n        }, [history]);\n\n        return { isLoading, leftCards, rightCards };\n    }\n\n    private async fetchCards(setCards: SetCards): Promise<void> {\n        return new Promise((res) => {\n            setTimeout(() => {\n                setCards(cardsMocks);\n                res();\n            }, 1000);\n        });\n    }\n}\n\nexport const cardLoaderInstance = new CardLoaderService();\n","import React from 'react';\n\nexport type LogoProps = {\n    src: string;\n    className: string;\n};\n\nexport const Logo = ({ src, className }: LogoProps) => (\n    <img className={className} src={src} alt=\"loading\"></img>\n);\n","import { ActionNames } from '../models/actions.model';\n\nexport const actionNames: ActionNames = {\n    addLogoType: 'Add logo',\n    copyType: 'Copy password',\n    printType: 'Print',\n    wpsType: 'WPS',\n    activatedWpsType: 'Stop WPS session',\n};\n\nexport const wpsActivationDuration = 120; // 2min in sec\n","import { ConnectionInfoPropsWithSetters } from '../models/modals.model';\n\nexport const copyPasteActionHandler = async ({\n    credentials: { password },\n}: ConnectionInfoPropsWithSetters) => {\n    if (password && navigator.clipboard) {\n        return await navigator.clipboard.writeText(password);\n    }\n};\n","import { ConnectionInfoPropsWithSetters, SetLogo } from '../models/modals.model';\n\nexport const getCreatedFileInput = () => {\n    const fileInput = document.createElement('input') as HTMLInputElement;\n\n    fileInput.style.display = 'none';\n    fileInput.type = 'file';\n    fileInput.accept = '.png, .jpg, .jpeg, .svg';\n\n    return fileInput;\n};\nexport type SetImageFile = (imageFile: File, setLogo: SetLogo) => void;\n\nexport const setImageFile = (imageFile: File, setLogo: SetLogo) => {\n    const fr = new FileReader();\n\n    fr.onload = () => setLogo(fr.result as string);\n    fr.readAsDataURL(imageFile);\n};\n\nexport const fileInputUploadHandler = (\n    fileInput: HTMLInputElement,\n    parent: HTMLElement,\n    setImageFile: SetImageFile,\n    setLogo: SetLogo\n) => {\n    const imageFile = fileInput.files?.item(0);\n\n    if (imageFile && imageFile.type.includes('image/')) {\n        setImageFile(imageFile, setLogo);\n    }\n\n    parent.removeChild(fileInput);\n};\nexport const addLogoActionHandler = async ({ setLogo }: ConnectionInfoPropsWithSetters) => {\n    const fileInput = getCreatedFileInput();\n\n    const parent = document.getElementById('root') as HTMLElement;\n    parent.append(fileInput);\n\n    fileInput.addEventListener('change', () =>\n        fileInputUploadHandler(fileInput, parent, setImageFile, setLogo)\n    );\n    fileInput.click();\n};\n","export const printActionHandler = async () => window.print();\n","import { ConnectionInfoPropsWithSetters } from '../models/modals.model';\n\nexport const wpsActionHanlder = async ({\n    credentials: { networkId },\n}: ConnectionInfoPropsWithSetters) => {\n    await Promise.resolve(networkId);\n};\n","import { connectionActionTypes } from '../constants/modal.constants';\nimport { ModalActionHandlers } from '../models/actions.model';\nimport { copyPasteActionHandler } from './copy-paste.action';\nimport { addLogoActionHandler } from './add-logo.action';\nimport { printActionHandler } from './print.action';\nimport { wpsActionHanlder } from './wps.action';\n\nexport const modalActionHandlers: ModalActionHandlers = {\n    [connectionActionTypes.copyType]: copyPasteActionHandler,\n    [connectionActionTypes.addLogoType]: addLogoActionHandler,\n    [connectionActionTypes.printType]: printActionHandler,\n    [connectionActionTypes.wpsType]: wpsActionHanlder,\n};\n","import React, { useEffect, useState, useMemo } from 'react';\nimport './timer.scss';\n\nexport type TimerProps = {\n    duration: number;\n    fallback: () => void;\n};\n\nconst tickDuration = 1000;\n\nconst getFormattedRestTime = (resTime: number): string => {\n    const min = Math.floor(resTime / 60);\n    const sec = resTime % 60;\n\n    return `0${min}: ${sec > 9 ? sec : `0${sec}`}`;\n};\n\nconst getDurationModifier = (duration: number) => `progress-bar_rest--${duration}`;\n\nexport const Timer = ({ duration, fallback }: TimerProps) => {\n    const [restTime, setRestTime] = useState(duration);\n\n    useEffect(() => {\n        const timerId = setTimeout(fallback, duration * tickDuration);\n        return () => clearTimeout(timerId);\n    }, [fallback, duration]);\n\n    useEffect(() => {\n        const timerId = setInterval(() => {\n            setRestTime((restTime) => restTime - 1);\n        }, tickDuration);\n        return () => clearInterval(timerId);\n    }, []);\n\n    const formattedRestTime = useMemo(() => getFormattedRestTime(restTime), [restTime]);\n\n    return (\n        <section className=\"timer\">\n            <h3 className=\"duration\">{formattedRestTime}</h3>\n            <section className=\"progress-bar\">\n                <p className={`progress-bar_rest ${getDurationModifier(duration)}`}></p>\n            </section>\n        </section>\n    );\n};\n","import React, { useCallback, useState } from 'react';\n\nimport { Button } from '../common/button';\n\nimport { getActionStatus } from './actions';\nimport { actionNames, wpsActivationDuration } from '../../constants/actions.constants';\nimport { modalActionHandlers } from '../../actions/actions';\nimport { connectionActionTypes } from '../../constants/modal.constants';\nimport { ConnectionInfoPropsWithSetters } from '../../models/modals.model';\nimport { Timer } from '../common/timer';\n\nconst actionHandler = modalActionHandlers[connectionActionTypes.wpsType];\nconst { wpsType, activatedWpsType } = actionNames;\n\nexport type WPSActionProps = {\n    isActive: boolean;\n    connectionInfoPropsWithSetters: ConnectionInfoPropsWithSetters;\n};\n\nexport const WPSAction = (props: ConnectionInfoPropsWithSetters) => {\n    const { isActive } = props.actions.WPS;\n\n    const [isWPSActivated, activateWPS] = useState(false);\n    const buttonHandler = useCallback(() => {\n        activateWPS((isWPSActivated: boolean) => !isWPSActivated);\n        actionHandler(props).catch(() => activateWPS(false));\n    }, [props]);\n\n    const actionName = isWPSActivated ? activatedWpsType : wpsType;\n\n    return (\n        <section className=\"acitons-wps\">\n            <Button\n                className={`modal-action-button ${getActionStatus(isActive)} wps`}\n                buttonName={actionName}\n                buttonHandler={isActive ? buttonHandler : () => {}}\n            />\n            {isWPSActivated ? (\n                <Timer duration={wpsActivationDuration} fallback={() => activateWPS(false)} />\n            ) : null}\n        </section>\n    );\n};\n","import React from 'react';\n\nimport { ButtonWithPostHandler } from '../common/button';\n\nimport { actionNames } from '../../constants/actions.constants';\nimport { modalActionHandlers } from '../../actions/actions';\n\nimport { ConnectionAction } from '../../models/dashboard.model';\nimport { ConnectionInfoPropsWithSetters } from '../../models/modals.model';\nimport { WPSAction } from './wps.action';\n\nexport const getActionStatus = (isActive: boolean) =>\n    `modal-action-button__${isActive ? 'active' : 'inactive'}`;\n\nexport const getActionButton = (\n    { actionType, isActive }: ConnectionAction,\n    connectionInfoPropsWithSetters: ConnectionInfoPropsWithSetters\n) => (\n    <ButtonWithPostHandler\n        key={actionType}\n        isActive={isActive}\n        className={`modal-action-button ${getActionStatus(isActive)}`}\n        buttonName={actionNames[actionType]}\n        buttonHandler={\n            isActive\n                ? () => modalActionHandlers[actionType](connectionInfoPropsWithSetters)\n                : () => {}\n        }\n    />\n);\n\nexport const Actions = (props: ConnectionInfoPropsWithSetters) => (\n    <section className=\"actions\">\n        <section className=\"actions-main\">\n            {props.actions.main.map((action: ConnectionAction) => getActionButton(action, props))}\n        </section>\n        <WPSAction {...props} />\n    </section>\n);\n","import QRCode from 'qrcode';\n\nexport const generateQR = async (url: string): Promise<string> => await QRCode.toDataURL(url);\n","import React from 'react';\n\nimport { networkNameLablel, passwordLablel } from '../../constants/modal.constants';\n\nexport type CredentialsProps = {\n    password: string | null;\n    networkId: string;\n};\n\nexport const Credentials = ({ password, networkId }: CredentialsProps) => (\n    <section className=\"modal-connection-credentials\">\n        <section className=\"modal-connection-credentials-pair\">\n            <span className=\"modal-connection-credentials-pair_label\">{networkNameLablel}:</span>\n            <b className=\"modal-connection-credentials-pair_value\">{` ${networkId}`}</b>\n        </section>\n        <section className=\"modal-connection-credentials_pair\">\n            <span className=\"modal-connection-credentials-pair_label\">{passwordLablel}:</span>\n            <b className=\"modal-connection-credentials-pair_value\">{` ${password}`}</b>\n        </section>\n    </section>\n);\n","import React, { useEffect, useState } from 'react';\nimport './connection.content.scss';\n\nimport { Logo } from '../common/logo';\nimport { Actions } from './actions';\n\nimport { generateQR } from '../../services/qr-code-generator.service';\n\nimport { ConnectionInfoProps } from '../../models/modals.model';\nimport { Credentials } from './credentials';\n\nconst description = `Scan this QR code with your phone's camera to connect to the Wi-Fi network.`;\n\nconst getTitle = (name: string, range: string) =>\n    `Connection information for the '${name}' ${range} Wi-Fi network`;\n\nexport const ConnectionModalContent = React.memo((connectionInfoProps: ConnectionInfoProps) => {\n    const {\n        credentials: { networkId, password },\n        url,\n        name,\n        range,\n    } = connectionInfoProps;\n\n    const [qrCodeBase64, setQRCode] = useState('');\n    const [logoSrc, setLogo] = useState('');\n\n    useEffect(() => {\n        generateQR(url).then(setQRCode).catch(setQRCode);\n    }, [url, setQRCode]);\n\n    return (\n        <section className=\"modal-connection\">\n            <h1 className=\"modal-connection_print-title\">KEENETIC</h1>\n            <h3 className=\"modal-connection_title\">{getTitle(name, range)}</h3>\n            {logoSrc ? <Logo src={logoSrc} className=\"connection-logo\" /> : null}\n            <p className=\"modal-connection_description\">{description}</p>\n            <Logo src={qrCodeBase64} className=\"modal-connection_qr-code\" />\n            <Credentials password={password} networkId={networkId} />\n            <Actions\n                {...{\n                    ...connectionInfoProps,\n                    setLogo,\n                }}\n            />\n        </section>\n    );\n});\n","import React, { useContext, PropsWithChildren } from 'react';\n\nimport './modal.scss';\n\nimport { Button } from './button';\n\nimport { ModalContext } from '../../context/modal.context';\nimport { ModalContentComponents } from '../../models/modals.model';\nimport { modalContentTypes } from '../../constants/modal.constants';\nimport { ConnectionModalContent } from '../modal-content/connection.content';\n\nexport type ModalComponent = PropsWithChildren<{\n    setModal: (value: null) => void;\n}>;\n\nconst modalContentComponents: ModalContentComponents = {\n    [modalContentTypes.connectionContentType]: ConnectionModalContent,\n};\n\nexport const ModalComponent = React.memo(({ children, setModal }: ModalComponent) => (\n    <section\n        className=\"modal-background\"\n        onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) =>\n            (e.target as HTMLElement).className === 'modal-background' && setModal(null)\n        }\n    >\n        <section className=\"modal-content\">\n            <Button\n                className=\"close-modal-button\"\n                buttonName=\"x\"\n                buttonHandler={() => setModal(null)}\n            />\n            {children}\n        </section>\n    </section>\n));\n\nexport const Modal = React.memo(() => {\n    const { modalInfo, setModal } = useContext(ModalContext);\n    const ModalContent = modalInfo ? modalContentComponents[modalInfo.type] : null;\n\n    return ModalContent && modalInfo ? (\n        <ModalComponent setModal={setModal}>\n            <ModalContent {...modalInfo} />\n        </ModalComponent>\n    ) : null;\n});\n","import React from 'react';\nimport './dashboard.scss';\n\nimport { Header } from '../../components/dashboard/header/header';\nimport { ContextLoader } from '../../components/common/loader';\nimport { NavigationBar } from '../../components/dashboard/nvagation-bar/navigation-bar';\nimport { Cards as CardsComponent } from '../../components/dashboard/cards/cards';\nimport { cardLoaderInstance } from '../../services/card-loader.service';\nimport { Modal } from '../../components/common/modal';\nimport { useHistory } from 'react-router-dom';\nimport { DashboardProps, Cards } from '../../models/dashboard.model';\n\nexport const DashboardPage = ({ cardLoader = cardLoaderInstance }: DashboardProps) => {\n    const history = useHistory<Cards>();\n    const { leftCards, rightCards } = cardLoader.useLoadCards(history);\n\n    return (\n        <>\n            <Modal />\n            <ContextLoader />\n            <Header />\n            <main>\n                <NavigationBar isCollapsed={true} />\n                <section className=\"content\">\n                    <CardsComponent leftCards={leftCards} rightCards={rightCards} />\n                </section>\n            </main>\n        </>\n    );\n};\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport { LoginPage } from './login/login';\nimport { DashboardPage } from './dashboard/dashboard';\nimport { dashboardPath } from '../constants/router.constants';\nimport { WithLoaderContext } from '../context/loader.context';\nimport { WithModalContext } from '../context/modal.context';\n\nconst { NODE_ENV, PUBLIC_URL } = process.env;\nconst basename = NODE_ENV === 'development' ? '/' : PUBLIC_URL;\n\nexport const AppRouter = () => (\n    <Router basename={basename}>\n        <Switch>\n            <Route path={dashboardPath}>\n                <WithLoaderContext>\n                    <WithModalContext>\n                        <DashboardPage />\n                    </WithModalContext>\n                </WithLoaderContext>\n            </Route>\n            <Route path=\"/\">\n                <WithLoaderContext>\n                    <LoginPage />\n                </WithLoaderContext>\n            </Route>\n        </Switch>\n    </Router>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { AppRouter } from './pages/router';\n\nimport './index.scss';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.unstable_createRoot(document.getElementById('root') as Element).render(\n    <React.StrictMode>\n        <AppRouter />\n    </React.StrictMode>\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}