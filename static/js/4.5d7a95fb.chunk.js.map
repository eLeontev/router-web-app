{"version":3,"sources":["components/common/page-content.tsx","hooks/scroll-page.hook.ts","mock/devices-list.mock.ts","recoil-state/devices-list.settings.state.ts","components/common/dropdown.tsx","hooks/prepare-settings-pair-data.hook.ts","services/devices-list.service.ts","components/devices-list/devices-settings-pair.tsx","components/devices-list/devices-settings.tsx","hooks/toggle-dirty.hook.ts","pages/devices-list/devices-list.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","components/common/checkbox.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toArray.js","hooks/toggle-button-with-i18n.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["getClassNames","classModifier","withScroll","PageContent","React","memo","children","useState","setWithScroll","useEffect","listener","Boolean","window","pageYOffset","addEventListener","removeEventListener","useScrollPageListener","className","deviceSettings","common","value","unitId","upload","download","isAsymmetric","filterId","defaultFilterState","sAtom","filterState","defaultSpeedStates","speedKeys","speedStates","defaultAsymmetricState","asymmetricState","settingsDirtyState","sSelector","get","filter","default","input","asymmetric","deviceDirtyState","isDirtyFilters","isDirtyAsymmetric","isDirtySpeed","some","v","getSpeedValidatorState","key","speedRange","min","max","speedValidatorState","validatorState","isCommonValid","isUploadValid","isDownloadValid","Dropdown","dropdownOptions","onChange","id","useMemo","find","isSelected","onChangeHandler","useCallback","optionId","target","map","label","DropdownWithInput","classNameModifier","onInputChange","preparedValue","trim","parseFloat","onDropdownChange","Number","name","useGetSettingPairData","state","options","getSelectedOptionId","useRecoilState","setState","optionLabels","useGetTranslatedLabels","i18nLabel","i18nOptionLabels","selectedOptionId","i","getDropdownOptions","SettingsValue","isAligned","getSelectedFilterId","FilterPair","pairData","filterOptions","speedValueRangeErrorLabel","devicesDynamicListLabels","getSelectedSpeedId","SpeedPair","speedStateKey","speedOptions","isValid","useRecoilValue","i18nErrorMessage","useGetDynamicTranslatedLabel","AsymmetricPair","checked","Settings","settingsDescriptionLabel","useGetTranslatedLabel","devicesListLabels","navActionTypes","internetSafety","cardsLabels","speedLimitLabel","asymmetricLabel","DevicesSettings","useToggleButtonWithI18n","displayDeviceSettingsLabel","hideDeviceSettingsLabel","i18nLabels","isHidden","toggleDetailsVisibility","buttonName","buttonHandler","setDeviceValues","devicesSettings","forEach","set","DevicesList","isDirty","DFState","setDFState","FState","setFState","DAState","setDAState","AState","setAState","DCState","setDCState","CState","setCState","DDState","setDDState","DState","setDState","DUState","setDUState","UState","setUState","onSave","cb","onCancel","useDirty","setModal","useContext","ModalContext","useGetTranslatedLabelsObject","titleLabel","descriptionLabel","unregisteredDevicesTitleLabel","unregisteredDevicesDescriptionLabel","registeredDevicesTitleLabel","blockedDevicesDescriptionLabel","blockedDevicesTitleLabel","addDeviceButtonLabel","commonLabels","saveButtonLabel","cancelButtonLabel","type","modalContentTypes","registerDeviceType","console","log","_iterableToArray","iter","Symbol","iterator","Object","Array","from","setCheckboxClassName","isActive","setCheckboxBarClassName","setCheckboxClassNameDisabled","isDisable","Checkbox","triggerCheckbox","onClick","SimpleCheckBox","_toArray","arr","labels","_toConsumableArray","isArray","arrayLikeToArray","iterableToArray","unsupportedIterableToArray","TypeError"],"mappings":"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","file":"static/js/4.5d7a95fb.chunk.js","sourcesContent":["import React, { PropsWithChildren } from 'react';\n\nimport { useScrollPageListener } from '../../hooks/scroll-page.hook';\n\nexport type PageContentProps = {\n    classModifier?: string;\n};\n\nexport const getClassNames = (classModifier: string, withScroll: boolean) =>\n    `page-content ${classModifier} ${withScroll ? 'page-content__with-scroll' : ''}`;\n\nexport const PageContent = React.memo(\n    ({ children, classModifier = '' }: PropsWithChildren<PageContentProps>) => {\n        const withScroll = useScrollPageListener();\n        return <section className={getClassNames(classModifier, withScroll)}>{children}</section>;\n    }\n);\n","import { useEffect, useState } from 'react';\n\nconst scrollEventName = 'scroll';\n\nexport const useScrollPageListener = () => {\n    const [withScroll, setWithScroll] = useState(false);\n    useEffect(() => {\n        const listener = () => setWithScroll(Boolean(window.pageYOffset));\n\n        window.addEventListener(scrollEventName, listener);\n        return () => window.removeEventListener(scrollEventName, listener);\n    }, [setWithScroll]);\n\n    return withScroll;\n};\n","import { DeviceSettings } from '../models/devices-list.model';\n\nexport const deviceSettings: DeviceSettings = {\n    isAsymmetric: false,\n    filterId: '431',\n    speedLimits: {\n        common: {\n            value: 0,\n            unitId: '123',\n        },\n        upload: {\n            value: 0,\n            unitId: '123',\n        },\n        download: {\n            value: 0,\n            unitId: '123',\n        },\n    },\n};\n","import { sAtom, sSelector } from '../utils/simple-recoil.util';\n\nimport { deviceSettings } from '../mock/devices-list.mock';\nimport { speedKeys, SpeedValue } from '../models/devices-list.model';\nimport { speedRange } from '../constants/devices-list.constants';\n\nconst {\n    isAsymmetric,\n    filterId,\n    speedLimits: { common, download, upload },\n} = deviceSettings;\n\nexport const defaultFilterState = sAtom<string>(filterId);\nexport const filterState = sAtom<string>(filterId);\n\nexport const defaultSpeedStates = {\n    [speedKeys.common]: sAtom<SpeedValue>({ ...common }),\n    [speedKeys.upload]: sAtom<SpeedValue>({ ...upload }),\n    [speedKeys.download]: sAtom<SpeedValue>({ ...download }),\n};\n\nexport const speedStates = {\n    [speedKeys.common]: sAtom<SpeedValue>({ ...common }),\n    [speedKeys.upload]: sAtom<SpeedValue>({ ...upload }),\n    [speedKeys.download]: sAtom<SpeedValue>({ ...download }),\n};\n\nexport const defaultAsymmetricState = sAtom<boolean>(isAsymmetric);\nexport const asymmetricState = sAtom<boolean>(isAsymmetric);\n\nexport const settingsDirtyState = sSelector(({ get }) => ({\n    filter: {\n        default: get(defaultFilterState),\n        input: get(filterState),\n    },\n    asymmetric: {\n        default: get(defaultAsymmetricState),\n        input: get(asymmetricState),\n    },\n    common: {\n        default: get(defaultSpeedStates.common),\n        input: get(speedStates.common),\n    },\n    upload: {\n        default: get(defaultSpeedStates.upload),\n        input: get(speedStates.upload),\n    },\n    download: {\n        default: get(defaultSpeedStates.download),\n        input: get(speedStates.download),\n    },\n}));\n\nexport const deviceDirtyState = sSelector<boolean>(({ get }) => {\n    const { filter, asymmetric, common, download, upload } = get(settingsDirtyState);\n    const isDirtyFilters = filter.default !== filter.input;\n    const isDirtyAsymmetric = asymmetric.default !== asymmetric.input;\n    const isDirtySpeed = [common, download, upload].some(\n        (v) => v.default.value !== v.input.value || v.default.unitId !== v.input.unitId\n    );\n\n    return isDirtyFilters || isDirtyAsymmetric || isDirtySpeed;\n});\n\nexport const getSpeedValidatorState = (key: speedKeys) =>\n    sSelector(({ get }) => {\n        const { value }: SpeedValue = get(speedStates[key]);\n        const [min, max] = speedRange;\n\n        return value === 0 || (value >= min && value <= max);\n    });\n\nexport const speedValidatorState = {\n    common: getSpeedValidatorState(speedKeys.common),\n    upload: getSpeedValidatorState(speedKeys.upload),\n    download: getSpeedValidatorState(speedKeys.download),\n};\n\nexport const validatorState = sSelector<boolean>(({ get }) => {\n    const isAsymmetric = get(asymmetricState);\n    const isCommonValid = get(speedValidatorState.common);\n    const isUploadValid = get(speedValidatorState.upload);\n    const isDownloadValid = get(speedValidatorState.download);\n\n    return isAsymmetric ? isUploadValid && isDownloadValid : isCommonValid;\n});\n","import React, { useCallback, useMemo } from 'react';\nimport './dropdown.scss';\n\nimport { Input } from './input';\n\nimport { DropdownOptions } from '../../models/common.model';\nimport { SpeedValue } from '../../models/devices-list.model';\n\nexport type DropdownProps = {\n    onChange: (value: string) => void;\n    dropdownOptions: DropdownOptions<string>;\n};\n\nexport type DropdownWithInput = {\n    value: string | number;\n    dropdownOptions: DropdownOptions<string>;\n    onChange: (speedValue: SpeedValue) => void;\n    classNameModifier?: string;\n};\n\nexport const Dropdown = React.memo(({ dropdownOptions, onChange }: DropdownProps) => {\n    const id = useMemo(\n        () => (dropdownOptions.find(({ isSelected }) => isSelected) || dropdownOptions[0]).id,\n        [dropdownOptions]\n    );\n\n    const onChangeHandler = useCallback(\n        ({ target: { value: optionId } }) => {\n            onChange(optionId);\n        },\n        [onChange]\n    );\n\n    return (\n        <select className=\"dropdown\" value={id} onChange={onChangeHandler}>\n            {dropdownOptions.map(({ id, label }) => (\n                <option key={id} value={id}>\n                    {label}\n                </option>\n            ))}\n        </select>\n    );\n});\n\nexport const DropdownWithInput = React.memo(\n    ({ dropdownOptions, onChange, value, classNameModifier }: DropdownWithInput) => {\n        const unitId = useMemo(\n            () => (dropdownOptions.find(({ isSelected }) => isSelected) || dropdownOptions[0]).id,\n            [dropdownOptions]\n        );\n\n        const onInputChange = useCallback(\n            (value: string) => {\n                const preparedValue = value.trim();\n                onChange({ value: parseFloat(preparedValue) || 0, unitId });\n            },\n            [onChange, unitId]\n        );\n\n        const onDropdownChange = useCallback(\n            (unitId: string) => {\n                onChange({ value: Number(value), unitId });\n            },\n            [value, onChange]\n        );\n\n        return (\n            <section className={`dropdown-with-input ${classNameModifier}`}>\n                <Input\n                    value={value}\n                    onChange={onInputChange}\n                    name=\"dropdowm-input\"\n                    className=\"dropdown-with-input__input\"\n                />\n                <label className=\"dropdown-wrapper\">\n                    <Dropdown dropdownOptions={dropdownOptions} onChange={onDropdownChange} />\n                </label>\n            </section>\n        );\n    }\n);\n","import { useMemo } from 'react';\nimport { RecoilState, useRecoilState } from 'recoil';\n\nimport { getDropdownOptions } from '../services/devices-list.service';\nimport { useGetTranslatedLabels } from '../services/i18n.service';\n\nimport { Options } from '../models/common.model';\nimport { Labels } from '../models/i18n.model';\n\nexport const useGetSettingPairData = <S>(\n    state: RecoilState<S>,\n    options: Options<Labels>,\n    label: Labels,\n    getSelectedOptionId: (value: S) => string\n) => {\n    const [value, setState] = useRecoilState<S>(state);\n    const optionLabels = useMemo(() => options.map(({ label }) => label), [options]);\n    const [i18nLabel, ...i18nOptionLabels] = useGetTranslatedLabels([label, ...optionLabels]);\n\n    const selectedOptionId = getSelectedOptionId(value);\n    const dropdownOptions = useMemo(\n        () => getDropdownOptions(options, i18nOptionLabels, selectedOptionId),\n        [options, i18nOptionLabels, selectedOptionId]\n    );\n\n    return {\n        value,\n        setState,\n        dropdownOptions,\n        i18nLabel,\n    };\n};\n","import { DropdownOptions, Option, Options } from '../models/common.model';\nimport { Labels } from '../models/i18n.model';\n\nexport const getDropdownOptions = (\n    options: Options<Labels>,\n    i18nOptionLabels: Array<string>,\n    filterId: string\n): DropdownOptions<string> =>\n    options.map(({ id }: Option<Labels>, i: number) => ({\n        id,\n        label: i18nOptionLabels[i],\n        isSelected: id === filterId,\n    }));\n","import React, { PropsWithChildren } from 'react';\nimport './devices-settings-pair.scss';\n\nimport { Dropdown, DropdownWithInput } from '../common/dropdown';\nimport { SimpleCheckBox } from '../common/checkbox';\n\nimport { Labels } from '../../models/i18n.model';\n\nimport {\n    asymmetricState,\n    filterState,\n    speedStates,\n    speedValidatorState,\n} from '../../recoil-state/devices-list.settings.state';\n\nimport { devicesDynamicListLabels, speedKeys, SpeedValue } from '../../models/devices-list.model';\nimport { filterOptions, speedOptions, speedRange } from '../../constants/devices-list.constants';\nimport { useGetSettingPairData } from '../../hooks/prepare-settings-pair-data.hook';\nimport { useRecoilValue } from 'recoil';\nimport { useGetDynamicTranslatedLabel } from '../../services/i18n.service';\n\nexport type DeviceSettingsPairProps = {\n    label: Labels;\n};\n\nexport type SpeedPairProps = DeviceSettingsPairProps & {\n    speedStateKey: speedKeys;\n};\n\nexport type AsymmetricPairProps = DeviceSettingsPairProps & {\n    name: string;\n};\n\nexport type SettingsValueProps = {\n    i18nLabel: string;\n    isAligned?: boolean;\n};\nexport const SettingsValue = ({\n    children,\n    i18nLabel,\n    isAligned,\n}: PropsWithChildren<SettingsValueProps>) => (\n    <section className={`setting-pair ${isAligned ? ' setting-pair__aligned' : ''}`}>\n        <p className=\"page-text\">{i18nLabel}</p>\n        {children}\n    </section>\n);\n\nexport const getSelectedFilterId = (filterId: string): string => filterId;\nexport const FilterPair = React.memo(({ label }: DeviceSettingsPairProps) => {\n    const pairData = useGetSettingPairData(filterState, filterOptions, label, getSelectedFilterId);\n    const { i18nLabel, setState, dropdownOptions } = pairData;\n\n    return (\n        <SettingsValue i18nLabel={i18nLabel}>\n            <Dropdown onChange={setState} dropdownOptions={dropdownOptions} />\n        </SettingsValue>\n    );\n});\n\nconst { speedValueRangeErrorLabel } = devicesDynamicListLabels;\nexport const getSelectedSpeedId = ({ unitId }: SpeedValue) => unitId;\nexport const SpeedPair = React.memo(({ speedStateKey, label }: SpeedPairProps) => {\n    const state = speedStates[speedStateKey];\n    const pairData = useGetSettingPairData(state, speedOptions, label, getSelectedSpeedId);\n    const { i18nLabel, setState, dropdownOptions, value } = pairData;\n\n    const isValid = useRecoilValue(speedValidatorState[speedStateKey]);\n    const i18nErrorMessage = useGetDynamicTranslatedLabel(speedValueRangeErrorLabel, speedRange);\n\n    return (\n        <SettingsValue i18nLabel={i18nLabel}>\n            <DropdownWithInput\n                value={value.value || ''}\n                onChange={setState}\n                dropdownOptions={dropdownOptions}\n                classNameModifier={isValid ? '' : 'invalid'}\n            />\n            {isValid ? null : <p className=\"page-text__error-inline\">{i18nErrorMessage}</p>}\n        </SettingsValue>\n    );\n});\n\nexport const AsymmetricPair = React.memo(({ name, label }: AsymmetricPairProps) => {\n    const pairData = useGetSettingPairData(asymmetricState, [], label, () => '');\n    const { setState, i18nLabel, value: checked } = pairData;\n\n    const onChangeHandler = () => setState((checked: boolean) => !checked);\n\n    return (\n        <SettingsValue i18nLabel={i18nLabel} isAligned>\n            <SimpleCheckBox name={name} checked={checked} onChange={onChangeHandler} />\n        </SettingsValue>\n    );\n});\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\n\nimport { asymmetricState } from '../../recoil-state/devices-list.settings.state';\n\nimport { Button } from '../common/button';\nimport { FilterPair, SpeedPair, AsymmetricPair } from './devices-settings-pair';\n\nimport { useToggleButtonWithI18n } from '../../hooks/toggle-button-with-i18n';\nimport { useGetTranslatedLabel } from '../../services/i18n.service';\n\nimport { devicesListLabels, speedKeys } from '../../models/devices-list.model';\nimport { cardsLabels } from '../../models/cards.model';\nimport { navActionTypes } from '../../models/nav.model';\n\nexport const Settings = React.memo(() => {\n    const isAsymmetric = useRecoilValue(asymmetricState);\n\n    const settingsDescriptionLabel = useGetTranslatedLabel(\n        devicesListLabels.settingsDescriptionLabel\n    );\n\n    return (\n        <section className=\"settings\">\n            <p className=\"page-text\">{settingsDescriptionLabel}</p>\n            <section className=\"page-section\">\n                <FilterPair label={navActionTypes.internetSafety} />\n                <SpeedPair\n                    speedStateKey={isAsymmetric ? speedKeys.download : speedKeys.common}\n                    label={isAsymmetric ? cardsLabels.download : devicesListLabels.speedLimitLabel}\n                />\n                <AsymmetricPair name=\"asymmetric\" label={devicesListLabels.asymmetricLabel} />\n                {isAsymmetric ? (\n                    <SpeedPair speedStateKey={speedKeys.upload} label={cardsLabels.upload} />\n                ) : null}\n            </section>\n        </section>\n    );\n});\n\nexport const DevicesSettings = React.memo(() => {\n    const { i18nLabels, isHidden, toggleDetailsVisibility } = useToggleButtonWithI18n([\n        devicesListLabels.displayDeviceSettingsLabel,\n        devicesListLabels.hideDeviceSettingsLabel,\n    ]);\n    const [displayDeviceSettingsLabel, hideDeviceSettingsLabel] = i18nLabels;\n\n    return (\n        <section className=\"devices-settings\">\n            <Button\n                buttonName={isHidden ? displayDeviceSettingsLabel : hideDeviceSettingsLabel}\n                buttonHandler={toggleDetailsVisibility}\n                className=\"details-button\"\n            />\n            {isHidden ? null : <Settings />}\n        </section>\n    );\n});\n","import { RecoilValueReadOnly, SetterOrUpdater, useRecoilState, useRecoilValue } from 'recoil';\nimport {\n    asymmetricState,\n    defaultAsymmetricState,\n    defaultFilterState,\n    defaultSpeedStates,\n    filterState,\n    speedStates,\n} from '../recoil-state/devices-list.settings.state';\nimport { DeviceSettingsStates, DevicesSettings } from '../models/devices-list.model';\n\n// TODO clarify how to fix casting\nconst setDeviceValues = (devicesSettings: DevicesSettings) =>\n    devicesSettings.forEach(({ state, set }: DeviceSettingsStates) =>\n        (set as SetterOrUpdater<boolean>)(state as boolean)\n    );\n\nexport const useDirty = (validatorState: RecoilValueReadOnly<boolean>) => {\n    const isDirty = useRecoilValue(validatorState);\n\n    const [DFState, setDFState] = useRecoilState(defaultFilterState);\n    const [FState, setFState] = useRecoilState(filterState);\n\n    const [DAState, setDAState] = useRecoilState(defaultAsymmetricState);\n    const [AState, setAState] = useRecoilState(asymmetricState);\n\n    const [DCState, setDCState] = useRecoilState(defaultSpeedStates.common);\n    const [CState, setCState] = useRecoilState(speedStates.common);\n    const [DDState, setDDState] = useRecoilState(defaultSpeedStates.download);\n    const [DState, setDState] = useRecoilState(speedStates.download);\n    const [DUState, setDUState] = useRecoilState(defaultSpeedStates.upload);\n    const [UState, setUState] = useRecoilState(speedStates.upload);\n\n    return {\n        isDirty,\n        onSave: (cb: any) => () => {\n            cb();\n            setDeviceValues([\n                {\n                    set: setDFState,\n                    state: FState,\n                },\n                {\n                    set: setDAState,\n                    state: AState,\n                },\n                {\n                    set: setDCState,\n                    state: CState,\n                },\n                {\n                    set: setDDState,\n                    state: DState,\n                },\n                {\n                    set: setDUState,\n                    state: UState,\n                },\n            ]);\n        },\n        onCancel: () =>\n            setDeviceValues([\n                {\n                    set: setFState,\n                    state: DFState,\n                },\n                {\n                    set: setAState,\n                    state: DAState,\n                },\n                {\n                    set: setCState,\n                    state: DCState,\n                },\n                {\n                    set: setDState,\n                    state: DDState,\n                },\n                {\n                    set: setUState,\n                    state: DUState,\n                },\n            ]),\n    };\n};\n","import React, { useContext } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport '../../styles/typography.page.scss';\n\nimport { Button } from '../../components/common/button';\nimport { PageContent } from '../../components/common/page-content';\nimport { Dirty } from '../../components/common/dirty';\n\nimport { DevicesSettings } from '../../components/devices-list/devices-settings';\nimport { ModalContext } from '../../context/modal.context';\n\nimport { deviceDirtyState, validatorState } from '../../recoil-state/devices-list.settings.state';\nimport { useGetTranslatedLabelsObject } from '../../services/i18n.service';\nimport { useDirty } from '../../hooks/toggle-dirty.hook';\n\nimport { devicesListLabels } from '../../models/devices-list.model';\nimport { modalContentTypes } from '../../constants/modal.constants';\nimport { commonLabels } from '../../models/common.model';\n\nexport const DevicesList = () => {\n    const isValid = useRecoilValue(validatorState);\n    const { isDirty, onCancel, onSave } = useDirty(deviceDirtyState);\n    const { setModal } = useContext(ModalContext);\n\n    const i18nLabels = useGetTranslatedLabelsObject([\n        devicesListLabels.titleLabel,\n        devicesListLabels.descriptionLabel,\n        devicesListLabels.unregisteredDevicesTitleLabel,\n        devicesListLabels.unregisteredDevicesDescriptionLabel,\n        devicesListLabels.registeredDevicesTitleLabel,\n        devicesListLabels.blockedDevicesDescriptionLabel,\n        devicesListLabels.blockedDevicesTitleLabel,\n        devicesListLabels.addDeviceButtonLabel,\n        commonLabels.saveButtonLabel,\n        commonLabels.cancelButtonLabel,\n    ]);\n\n    return (\n        <PageContent classModifier=\"devices\">\n            <h1 className=\"page-title\">{i18nLabels.titleLabel}</h1>\n            <section className=\"page-content-wrapper\">\n                <p className=\"page-text\">{i18nLabels.descriptionLabel}</p>\n                <h2 className=\"page-sub-title\">{i18nLabels.unregisteredDevicesTitleLabel}</h2>\n                <p className=\"page-text\">{i18nLabels.unregisteredDevicesDescriptionLabel}</p>\n                <hr />\n                <DevicesSettings />\n                <h2 className=\"page-sub-title\">{i18nLabels.registeredDevicesTitleLabel}</h2>\n                <hr />\n                <h2 className=\"page-sub-title\">{i18nLabels.blockedDevicesTitleLabel}</h2>\n                <p className=\"page-text\">{i18nLabels.blockedDevicesDescriptionLabel}</p>\n                <hr />\n                <Button\n                    className=\"show-more-button\"\n                    buttonHandler={() => setModal({ type: modalContentTypes.registerDeviceType })}\n                    buttonName={i18nLabels.addDeviceButtonLabel}\n                ></Button>\n            </section>\n            <Dirty\n                onCancel={onCancel}\n                onSave={onSave(() => console.log('saved'))}\n                isDirty={isDirty}\n                isValid={isValid}\n                cancelButtonLabel={i18nLabels.cancelButtonLabel}\n                saveButtonLabel={i18nLabels.saveButtonLabel}\n            />\n        </PageContent>\n    );\n};\n\nexport default DevicesList;\n","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","import React from 'react';\nimport './checkbox.scss';\n\nexport type CheckboxProps = {\n    isDisable: boolean;\n    isActive: boolean;\n    triggerCheckbox: (isActive: boolean) => void;\n};\n\nexport type SimpleCheckBoxProps = {\n    name: string;\n    checked: boolean;\n    onChange: any;\n};\n\nconst setCheckboxClassName = (isActive: boolean) =>\n    isActive ? 'checkbox__active' : 'checkbox__inactive';\nconst setCheckboxBarClassName = (isActive: boolean) =>\n    isActive ? 'checkbox--bar__active' : 'checkbox--bar__inactive';\n\nconst setCheckboxClassNameDisabled = (isDisable: boolean) =>\n    isDisable ? 'checkbox__disabled' : 'checkbox__enabled';\n\nexport const Checkbox = React.memo(({ isActive, triggerCheckbox, isDisable }: CheckboxProps) => (\n    <section\n        className={`checkbox ${setCheckboxClassName(isActive)} ${setCheckboxClassNameDisabled(\n            isDisable\n        )}`}\n    >\n        <span\n            onClick={() => !isDisable && triggerCheckbox(!isActive)}\n            className={`checkbox--bar ${setCheckboxBarClassName(isActive)}`}\n        ></span>\n    </section>\n));\n\nexport const SimpleCheckBox = React.memo(({ name, checked, onChange }: SimpleCheckBoxProps) => {\n    return (\n        <input\n            type=\"checkbox\"\n            className=\"simple-checkbox\"\n            name={name}\n            checked={checked}\n            onChange={onChange}\n        ></input>\n    );\n});\n","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}","import { useCallback, useState } from 'react';\n\nimport { useGetTranslatedLabels } from '../services/i18n.service';\n\nimport { Labels } from '../models/i18n.model';\n\nexport const useToggleButtonWithI18n = (labels: Array<Labels>) => {\n    const [isHidden, toggleDetailsVisibility] = useState(true);\n    const i18nLabels = useGetTranslatedLabels(labels);\n\n    return {\n        isHidden,\n        i18nLabels,\n        toggleDetailsVisibility: useCallback(\n            () => toggleDetailsVisibility((isHidden) => !isHidden),\n            [toggleDetailsVisibility]\n        ),\n    };\n};\n","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}