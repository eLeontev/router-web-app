{"version":3,"sources":["components/common/page-content.tsx","hooks/scroll-page.hook.ts","mock/devices-list.mock.ts","recoil-state/devices-list.settings.state.ts","hooks/prepare-settings-pair-data.hook.ts","components/devices-list/devices-settings-pair.tsx","components/devices-list/devices-settings.tsx","components/devices-list/devices-list-table/devices-list-table-cell.renderers.tsx","hooks/device-list-cell-data.hook.ts","components/devices-list/devices-list-table/devices-list-table.tsx","hooks/toggle-dirty.hook.ts","pages/devices-list/devices-list.tsx","hooks/device-list-data.hook.ts","components/common/checkbox.tsx","hooks/toggle-button-with-i18n.ts"],"names":["getClassNames","classModifier","withScroll","PageContent","React","memo","children","useState","setWithScroll","useEffect","listener","Boolean","window","pageYOffset","addEventListener","removeEventListener","useScrollPageListener","className","deviceSettings","common","value","unitId","upload","download","commonHostColumnData","columnType","columnTypes","commonWithIndicatorType","columnData","mainValue","additionalValue","deviceTableLabels","viaRouterLabel","isOnline","commonHostColumnWithoutNameData","noNameLabel","commonHostColumnWithoutLabelData","commonAddress1ColumnData","commonType","commonAddress2ColumnData","commonAddress3ColumnData","segment5GHzColumnData","homeSegmentLabel","wiredLabel","segment2GHzColumnData","segment5GHzLabel","segmentWiredColumnData","guestSegmentLabel","segment2GHzLabel","connectionWired2GHzColumnData","connectionType","isWired","speedValue","cardsLabels","mbitsLabel","connectionPower","wirelessUnitLabel","MGzLabel","connectionWirelessColumnData","portLabel","connectionWired5GHzColumnData","limitsWithSymmetricLimitColumnData","limitsType","isLimited","isAsymmetric","unregisteredDeviceListDataMock","kbitsLabel","filterId","defaultFilterState","sAtom","filterState","defaultSpeedStates","speedKeys","speedStates","defaultAsymmetricState","asymmetricState","settingsDirtyState","sSelector","get","filter","default","input","asymmetric","deviceDirtyState","isDirtyFilters","isDirtyAsymmetric","isDirtySpeed","some","v","getSpeedValidatorState","key","speedRange","min","max","speedValidatorState","validatorState","isCommonValid","isUploadValid","isDownloadValid","useGetSettingPairData","state","options","label","getSelectedOptionId","useRecoilState","setState","i18nLabel","useGetTranslatedLabel","dropdownOptions","useGetDropdownOptions","getSelectedFilterId","FilterPair","pairData","filterOptions","onChange","speedValueRangeErrorLabel","devicesDynamicListLabels","getSelectedSpeedId","SpeedPair","speedStateKey","speedOptions","isValid","useRecoilValue","i18nErrorMessage","useGetDynamicTranslatedLabel","classNameModifier","AsymmetricPair","name","checked","isAligned","Settings","settingsDescriptionLabel","devicesListLabels","navActionTypes","internetSafety","speedLimitLabel","asymmetricLabel","DevicesSettings","useToggleButtonWithI18n","displayDeviceSettingsLabel","hideDeviceSettingsLabel","i18nLabels","isHidden","toggleDetailsVisibility","buttonName","buttonHandler","contentRenderer","mainContentClassModifier","CommonCellRender","props","useGetTranslatedLabels","i18nMainValue","i18nAdditionalValue","calculatedMainValue","getCommonClassModifier","getRouterName","useGetCommonValues","cellRenderTypes","getCommonIndicatorClassName","connectionUnitLabel","speedUnitLabel","useGetConnectionValues","additionValue","connectionPowerRenderer","labels","getLabels","useMemo","commonLabel","downloadLabel","uploadLabel","useGetLimitsValues","headCellRenderer","index","DeviceListHeader","columns","i18nHeaders","map","deviceCellRenderer","deviceListRow","cells","DevicesListTable","rows","type","getDeviceTableNoElementLabelByType","length","setDeviceValues","devicesSettings","forEach","set","DevicesList","registeredDevices","getDeviceListTableMockData","unregisteredDevices","blockedDevices","devices","timerId","setInterval","deviceTableContentUpdateDelay","clearInterval","useGetDeviceLists","isDirty","DFState","setDFState","FState","setFState","DAState","setDAState","AState","setAState","DCState","setDCState","CState","setCState","DDState","setDDState","DState","setDState","DUState","setDUState","UState","setUState","onSave","cb","onCancel","useDirty","setModal","useContext","ModalContext","useGetTranslatedLabelsObject","titleLabel","descriptionLabel","unregisteredDevicesTitleLabel","unregisteredDevicesDescriptionLabel","registeredDevicesTitleLabel","blockedDevicesDescriptionLabel","blockedDevicesTitleLabel","addDeviceButtonLabel","commonLabels","saveButtonLabel","cancelButtonLabel","deviceListTableTypes","registeredType","unregisteredType","blockedType","modalContentTypes","registerDeviceType","console","log","shouldDisplayDirtyBar","setCheckboxClassName","isActive","setCheckboxBarClassName","setCheckboxClassNameDisabled","isDisable","Checkbox","triggerCheckbox","onClick","SimpleCheckBox","useCallback"],"mappings":"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","file":"static/js/4.d2140c82.chunk.js","sourcesContent":["import React, { PropsWithChildren } from 'react';\nimport '../../styles/typography.page.scss';\n\nimport { useScrollPageListener } from '../../hooks/scroll-page.hook';\n\nexport type PageContentProps = {\n    classModifier?: string;\n};\n\nexport const getClassNames = (classModifier: string, withScroll: boolean) =>\n    `page-content ${classModifier} ${withScroll ? 'page-content__with-scroll' : ''}`;\n\nexport const PageContent = React.memo(\n    ({ children, classModifier = '' }: PropsWithChildren<PageContentProps>) => {\n        const withScroll = useScrollPageListener();\n        return <section className={getClassNames(classModifier, withScroll)}>{children}</section>;\n    }\n);\n","import { useEffect, useState } from 'react';\n\nconst scrollEventName = 'scroll';\n\nexport const useScrollPageListener = () => {\n    const [withScroll, setWithScroll] = useState(false);\n    useEffect(() => {\n        const listener = () => setWithScroll(Boolean(window.pageYOffset));\n\n        window.addEventListener(scrollEventName, listener);\n        return () => window.removeEventListener(scrollEventName, listener);\n    }, [setWithScroll]);\n\n    return withScroll;\n};\n","import { cardsLabels } from '../models/cards.model';\nimport {\n    columnTypes,\n    DeviceDataColumn,\n    DeviceDataRows,\n    DeviceSettings,\n    deviceTableLabels,\n    LimitsColumnData,\n} from '../models/devices-list.model';\n\nexport const deviceSettings: DeviceSettings = {\n    isAsymmetric: false,\n    filterId: '431',\n    speedLimits: {\n        common: {\n            value: 0,\n            unitId: '123',\n        },\n        upload: {\n            value: 0,\n            unitId: '123',\n        },\n        download: {\n            value: 0,\n            unitId: '123',\n        },\n    },\n};\n\nexport const commonHostColumnData: DeviceDataColumn<columnTypes.commonWithIndicatorType> = {\n    columnType: columnTypes.commonWithIndicatorType,\n    columnData: {\n        mainValue: 'DESKTOP-5123dasR1',\n        additionalValue: deviceTableLabels.viaRouterLabel,\n        isOnline: true,\n    },\n};\nexport const commonHostColumnWithoutNameData: DeviceDataColumn<columnTypes.commonWithIndicatorType> = {\n    columnType: columnTypes.commonWithIndicatorType,\n    columnData: {\n        mainValue: deviceTableLabels.noNameLabel,\n        additionalValue: deviceTableLabels.viaRouterLabel,\n        isOnline: true,\n    },\n};\nexport const commonHostColumnWithoutLabelData: DeviceDataColumn<columnTypes.commonWithIndicatorType> = {\n    columnType: columnTypes.commonWithIndicatorType,\n    columnData: {\n        mainValue: 'DL1213AL3',\n        additionalValue: '',\n        isOnline: false,\n    },\n};\n\nexport const commonAddress1ColumnData: DeviceDataColumn<columnTypes.commonType> = {\n    columnType: columnTypes.commonType,\n    columnData: {\n        mainValue: '192.168.1.101',\n        additionalValue: '54:1w:12:31:gD:01',\n    },\n};\nexport const commonAddress2ColumnData: DeviceDataColumn<columnTypes.commonType> = {\n    columnType: columnTypes.commonType,\n    columnData: {\n        mainValue: '192.168.1.13',\n        additionalValue: '12:g3:04:11:dd:02',\n    },\n};\nexport const commonAddress3ColumnData: DeviceDataColumn<columnTypes.commonType> = {\n    columnType: columnTypes.commonType,\n    columnData: {\n        mainValue: '192.168.1.32',\n        additionalValue: '66:a1:5R:0t:12:55',\n    },\n};\n\nexport const segment5GHzColumnData: DeviceDataColumn<columnTypes.commonType> = {\n    columnType: columnTypes.commonType,\n    columnData: {\n        mainValue: deviceTableLabels.homeSegmentLabel,\n        additionalValue: deviceTableLabels.wiredLabel,\n    },\n};\nexport const segment2GHzColumnData: DeviceDataColumn<columnTypes.commonType> = {\n    columnType: columnTypes.commonType,\n    columnData: {\n        mainValue: deviceTableLabels.homeSegmentLabel,\n        additionalValue: deviceTableLabels.segment5GHzLabel,\n    },\n};\nexport const segmentWiredColumnData: DeviceDataColumn<columnTypes.commonType> = {\n    columnType: columnTypes.commonType,\n    columnData: {\n        mainValue: deviceTableLabels.guestSegmentLabel,\n        additionalValue: deviceTableLabels.segment2GHzLabel,\n    },\n};\n\nexport const connectionWired2GHzColumnData: DeviceDataColumn<columnTypes.connectionType> = {\n    columnType: columnTypes.connectionType,\n    columnData: {\n        isWired: true,\n        speedValue: {\n            unitId: cardsLabels.mbitsLabel,\n            value: 54,\n        },\n        connectionPower: 2,\n        connectionType: '11n 1x1 40',\n        wirelessUnitLabel: deviceTableLabels.MGzLabel,\n    },\n};\nexport const connectionWirelessColumnData: DeviceDataColumn<columnTypes.connectionType> = {\n    columnType: columnTypes.connectionType,\n    columnData: {\n        isWired: false,\n        speedValue: {\n            unitId: cardsLabels.mbitsLabel,\n            value: 100,\n        },\n        connectionPower: 0,\n        connectionType: '1',\n        wirelessUnitLabel: deviceTableLabels.portLabel,\n    },\n};\nexport const connectionWired5GHzColumnData: DeviceDataColumn<columnTypes.connectionType> = {\n    columnType: columnTypes.connectionType,\n    columnData: {\n        isWired: true,\n        speedValue: {\n            unitId: cardsLabels.mbitsLabel,\n            value: 520,\n        },\n        connectionPower: 0,\n        connectionType: '11ac/k/r/v 1x1 80',\n        wirelessUnitLabel: deviceTableLabels.MGzLabel,\n    },\n};\n\nexport const limitsWithSymmetricLimitColumnData: DeviceDataColumn<columnTypes.limitsType> = {\n    columnType: columnTypes.limitsType,\n    columnData: {\n        isLimited: true,\n        isAsymmetric: false,\n        common: {\n            unitId: cardsLabels.mbitsLabel,\n            value: 10,\n        },\n    } as LimitsColumnData,\n};\nexport const limitsWithAsymmetricLimitColumnData: DeviceDataColumn<columnTypes.limitsType> = {\n    columnType: columnTypes.limitsType,\n    columnData: {\n        isLimited: true,\n        isAsymmetric: true,\n        download: {\n            unitId: cardsLabels.mbitsLabel,\n            value: 12,\n        },\n        upload: {\n            unitId: cardsLabels.kbitsLabel,\n            value: 5,\n        },\n    } as LimitsColumnData,\n};\n\nexport const limitsNotDefinedColumnData: DeviceDataColumn<columnTypes.limitsType> = {\n    columnType: columnTypes.limitsType,\n    columnData: {\n        isLimited: false,\n    } as LimitsColumnData,\n};\n\nexport const unregisteredDeviceListDataMock: DeviceDataRows = [\n    [\n        commonHostColumnData,\n        commonAddress1ColumnData,\n        segment5GHzColumnData,\n        connectionWired2GHzColumnData,\n        limitsWithAsymmetricLimitColumnData,\n    ],\n    [\n        commonHostColumnWithoutNameData,\n        commonAddress2ColumnData,\n        segment2GHzColumnData,\n        connectionWirelessColumnData,\n        limitsWithSymmetricLimitColumnData,\n    ],\n    [\n        commonHostColumnWithoutLabelData,\n        commonAddress3ColumnData,\n        segmentWiredColumnData,\n        connectionWired5GHzColumnData,\n        limitsNotDefinedColumnData,\n    ],\n];\n","import { sAtom, sSelector } from '../utils/simple-recoil.util';\n\nimport { deviceSettings } from '../mock/devices-list.mock';\nimport { speedKeys, SpeedValue } from '../models/devices-list.model';\nimport { speedRange } from '../constants/devices-list.constants';\n\nconst {\n    isAsymmetric,\n    filterId,\n    speedLimits: { common, download, upload },\n} = deviceSettings;\n\nexport const defaultFilterState = sAtom<string>(filterId);\nexport const filterState = sAtom<string>(filterId);\n\nexport const defaultSpeedStates = {\n    [speedKeys.common]: sAtom<SpeedValue>({ ...common }),\n    [speedKeys.upload]: sAtom<SpeedValue>({ ...upload }),\n    [speedKeys.download]: sAtom<SpeedValue>({ ...download }),\n};\n\nexport const speedStates = {\n    [speedKeys.common]: sAtom<SpeedValue>({ ...common }),\n    [speedKeys.upload]: sAtom<SpeedValue>({ ...upload }),\n    [speedKeys.download]: sAtom<SpeedValue>({ ...download }),\n};\n\nexport const defaultAsymmetricState = sAtom<boolean>(isAsymmetric);\nexport const asymmetricState = sAtom<boolean>(isAsymmetric);\n\nexport const settingsDirtyState = sSelector(({ get }) => ({\n    filter: {\n        default: get(defaultFilterState),\n        input: get(filterState),\n    },\n    asymmetric: {\n        default: get(defaultAsymmetricState),\n        input: get(asymmetricState),\n    },\n    common: {\n        default: get(defaultSpeedStates.common),\n        input: get(speedStates.common),\n    },\n    upload: {\n        default: get(defaultSpeedStates.upload),\n        input: get(speedStates.upload),\n    },\n    download: {\n        default: get(defaultSpeedStates.download),\n        input: get(speedStates.download),\n    },\n}));\n\nexport const deviceDirtyState = sSelector<boolean>(({ get }) => {\n    const { filter, asymmetric, common, download, upload } = get(settingsDirtyState);\n    const isDirtyFilters = filter.default !== filter.input;\n    const isDirtyAsymmetric = asymmetric.default !== asymmetric.input;\n    const isDirtySpeed = [common, download, upload].some(\n        (v) => v.default.value !== v.input.value || v.default.unitId !== v.input.unitId\n    );\n\n    return isDirtyFilters || isDirtyAsymmetric || isDirtySpeed;\n});\n\nexport const getSpeedValidatorState = (key: speedKeys) =>\n    sSelector(({ get }) => {\n        const { value }: SpeedValue = get(speedStates[key]);\n        const [min, max] = speedRange;\n\n        return value === 0 || (value >= min && value <= max);\n    });\n\nexport const speedValidatorState = {\n    common: getSpeedValidatorState(speedKeys.common),\n    upload: getSpeedValidatorState(speedKeys.upload),\n    download: getSpeedValidatorState(speedKeys.download),\n};\n\nexport const validatorState = sSelector<boolean>(({ get }) => {\n    const isAsymmetric = get(asymmetricState);\n    const isCommonValid = get(speedValidatorState.common);\n    const isUploadValid = get(speedValidatorState.upload);\n    const isDownloadValid = get(speedValidatorState.download);\n\n    return isAsymmetric ? isUploadValid && isDownloadValid : isCommonValid;\n});\n","import { RecoilState, useRecoilState } from 'recoil';\n\nimport { useGetTranslatedLabel } from '../services/i18n.service';\n\nimport { useGetDropdownOptions } from './prepare-options-to-dropdown.hook';\n\nimport { Options } from '../models/common.model';\nimport { Labels } from '../models/i18n.model';\n\nexport const useGetSettingPairData = <S>(\n    state: RecoilState<S>,\n    options: Options<Labels>,\n    label: Labels,\n    getSelectedOptionId: (value: S) => string\n) => {\n    const [value, setState] = useRecoilState<S>(state);\n    const i18nLabel = useGetTranslatedLabel(label);\n    const dropdownOptions = useGetDropdownOptions(options, getSelectedOptionId(value));\n\n    return {\n        value,\n        setState,\n        dropdownOptions,\n        i18nLabel,\n    };\n};\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\n\nimport { Dropdown, DropdownWithInput } from '../common/dropdown';\nimport { SimpleCheckBox } from '../common/checkbox';\nimport { ModalPairStatic } from '../modal-content/common/modal-pair';\n\nimport { useGetDynamicTranslatedLabel } from '../../services/i18n.service';\n\nimport { useGetSettingPairData } from '../../hooks/prepare-settings-pair-data.hook';\n\nimport {\n    asymmetricState,\n    filterState,\n    speedStates,\n    speedValidatorState,\n} from '../../recoil-state/devices-list.settings.state';\n\nimport { filterOptions, speedOptions, speedRange } from '../../constants/devices-list.constants';\n\nimport { devicesDynamicListLabels, speedKeys, SpeedValue } from '../../models/devices-list.model';\nimport { Labels } from '../../models/i18n.model';\n\nexport type DeviceSettingsPairProps = {\n    label: Labels;\n};\n\nexport type SpeedPairProps = DeviceSettingsPairProps & {\n    speedStateKey: speedKeys;\n};\n\nexport type AsymmetricPairProps = DeviceSettingsPairProps & {\n    name: string;\n};\n\nexport const getSelectedFilterId = (filterId: string): string => filterId;\nexport const FilterPair = React.memo(({ label }: DeviceSettingsPairProps) => {\n    const pairData = useGetSettingPairData(filterState, filterOptions, label, getSelectedFilterId);\n    const { i18nLabel, setState, dropdownOptions } = pairData;\n\n    return (\n        <ModalPairStatic i18nLabel={i18nLabel}>\n            <Dropdown onChange={setState} dropdownOptions={dropdownOptions} />\n        </ModalPairStatic>\n    );\n});\n\nconst { speedValueRangeErrorLabel } = devicesDynamicListLabels;\nexport const getSelectedSpeedId = ({ unitId }: SpeedValue) => unitId;\nexport const SpeedPair = React.memo(({ speedStateKey, label }: SpeedPairProps) => {\n    const state = speedStates[speedStateKey];\n    const pairData = useGetSettingPairData(state, speedOptions, label, getSelectedSpeedId);\n    const { i18nLabel, setState, dropdownOptions, value } = pairData;\n\n    const isValid = useRecoilValue(speedValidatorState[speedStateKey]);\n    const i18nErrorMessage = useGetDynamicTranslatedLabel(speedValueRangeErrorLabel, speedRange);\n\n    return (\n        <ModalPairStatic i18nLabel={i18nLabel}>\n            <DropdownWithInput\n                value={value.value || ''}\n                onChange={setState}\n                dropdownOptions={dropdownOptions}\n                classNameModifier={isValid ? '' : 'invalid'}\n            />\n            {isValid ? null : <p className=\"page-text__error-inline\">{i18nErrorMessage}</p>}\n        </ModalPairStatic>\n    );\n});\n\nexport const AsymmetricPair = React.memo(({ name, label }: AsymmetricPairProps) => {\n    const pairData = useGetSettingPairData(asymmetricState, [], label, () => '');\n    const { setState, i18nLabel, value: checked } = pairData;\n\n    const onChangeHandler = () => setState((checked: boolean) => !checked);\n\n    return (\n        <ModalPairStatic i18nLabel={i18nLabel} isAligned>\n            <SimpleCheckBox name={name} checked={checked} onChange={onChangeHandler} />\n        </ModalPairStatic>\n    );\n});\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\n\nimport { asymmetricState } from '../../recoil-state/devices-list.settings.state';\n\nimport { Button } from '../common/button';\nimport { FilterPair, SpeedPair, AsymmetricPair } from './devices-settings-pair';\n\nimport { useToggleButtonWithI18n } from '../../hooks/toggle-button-with-i18n';\nimport { useGetTranslatedLabel } from '../../services/i18n.service';\n\nimport { devicesListLabels, speedKeys } from '../../models/devices-list.model';\nimport { cardsLabels } from '../../models/cards.model';\nimport { navActionTypes } from '../../models/nav.model';\n\nexport const Settings = React.memo(() => {\n    const isAsymmetric = useRecoilValue(asymmetricState);\n\n    const settingsDescriptionLabel = useGetTranslatedLabel(\n        devicesListLabels.settingsDescriptionLabel\n    );\n    return (\n        <section className=\"settings\">\n            <p className=\"page-text\">{settingsDescriptionLabel}</p>\n            <section className=\"page-section\">\n                <FilterPair label={navActionTypes.internetSafety} />\n                <SpeedPair\n                    speedStateKey={isAsymmetric ? speedKeys.download : speedKeys.common}\n                    label={isAsymmetric ? cardsLabels.download : devicesListLabels.speedLimitLabel}\n                />\n                <AsymmetricPair name=\"asymmetric\" label={devicesListLabels.asymmetricLabel} />\n                {isAsymmetric ? (\n                    <SpeedPair speedStateKey={speedKeys.upload} label={cardsLabels.upload} />\n                ) : null}\n            </section>\n        </section>\n    );\n});\n\nexport const DevicesSettings = React.memo(() => {\n    const { i18nLabels, isHidden, toggleDetailsVisibility } = useToggleButtonWithI18n([\n        devicesListLabels.displayDeviceSettingsLabel,\n        devicesListLabels.hideDeviceSettingsLabel,\n    ]);\n    const [displayDeviceSettingsLabel, hideDeviceSettingsLabel] = i18nLabels;\n\n    return (\n        <section className=\"devices-settings\">\n            <Button\n                buttonName={isHidden ? displayDeviceSettingsLabel : hideDeviceSettingsLabel}\n                buttonHandler={toggleDetailsVisibility}\n                className=\"details-button\"\n            />\n            {isHidden ? null : <Settings />}\n        </section>\n    );\n});\n","import React from 'react';\n\nimport {\n    useGetCommonValues,\n    useGetConnectionValues,\n    useGetLimitsValues,\n} from '../../../hooks/device-list-cell-data.hook';\n\nimport { getCommonIndicatorClassName } from '../../../services/devices-list.service';\n\nimport {\n    CellRenderTypes,\n    columnTypes,\n    CommonColumnData,\n    CommonWithIndicatorColumnData,\n    ConnectionColumnData,\n    LimitsColumnData,\n} from '../../../models/devices-list.model';\n\nconst contentRenderer = (\n    mainValue: string,\n    additionalValue: string,\n    mainContentClassModifier: string = '',\n    children: JSX.Element | null = null\n) => (\n    <>\n        <p className={`content-main ${mainContentClassModifier}`}>\n            {children}\n            {mainValue}\n        </p>\n        <p className=\"content-addition\">{additionalValue}</p>\n    </>\n);\n\nconst CommonCellRender = (props: CommonColumnData) => {\n    const [mainValue, additionalValue, classModifier] = useGetCommonValues(props);\n    return contentRenderer(mainValue, additionalValue, classModifier);\n};\n\nconst CommonWithIndicatorCellRender = ({\n    isOnline,\n    mainValue,\n    additionalValue,\n}: CommonWithIndicatorColumnData) => {\n    return (\n        <>\n            <section className={getCommonIndicatorClassName(isOnline)}></section>\n            {CommonCellRender({ mainValue, additionalValue })}\n        </>\n    );\n};\n\nconst connectionPowerRenderer = (isWired: boolean, connectionPower: number) =>\n    isWired ? (\n        <span className={`connection-power connection-power__level-${connectionPower}`}></span>\n    ) : null;\n\nconst ConnectionCellRender = (props: ConnectionColumnData) => {\n    const { isWired, connectionPower } = props;\n    const [mainValue, additionValue] = useGetConnectionValues(props);\n    return contentRenderer(\n        mainValue,\n        additionValue,\n        '',\n        connectionPowerRenderer(isWired, connectionPower)\n    );\n};\n\nexport const LimitsCellRender = (props: LimitsColumnData) => {\n    const [mainValue, additionValue] = useGetLimitsValues(props);\n    return contentRenderer(mainValue, additionValue);\n};\n\nexport const cellRenderTypes: CellRenderTypes = {\n    [columnTypes.commonType]: CommonCellRender,\n    [columnTypes.commonWithIndicatorType]: CommonWithIndicatorCellRender,\n    [columnTypes.connectionType]: ConnectionCellRender,\n    [columnTypes.limitsType]: LimitsCellRender,\n};\n","import { useMemo } from 'react';\n\nimport { getCommonClassModifier, getLabels, getRouterName } from '../services/devices-list.service';\n\nimport {\n    CommonColumnData,\n    ConnectionColumnData,\n    deviceTableLabels,\n    LimitsColumnData,\n} from '../models/devices-list.model';\nimport { useGetTranslatedLabels } from '../services/i18n.service';\n\nexport const useGetLimitsValues = (props: LimitsColumnData) => {\n    const { common, download, upload, isLimited, isAsymmetric } = props;\n    const labels = useGetTranslatedLabels(getLabels([common, download, upload]));\n\n    return useMemo(() => {\n        if (isLimited) {\n            const [commonLabel, downloadLabel, uploadLabel] = labels;\n\n            const additionValue = isAsymmetric ? `${upload.value} ${uploadLabel}` : '';\n            const mainValue = `${isAsymmetric ? download.value : common.value} ${\n                isAsymmetric ? downloadLabel : commonLabel\n            }`;\n\n            return [mainValue, additionValue];\n        }\n\n        return ['-', ''];\n    }, [download, common, upload, isAsymmetric, isLimited, labels]);\n};\n\nexport const useGetCommonValues = (props: CommonColumnData) => {\n    const { mainValue, additionalValue } = props;\n    const [i18nMainValue, i18nAdditionalValue] = useGetTranslatedLabels([\n        mainValue as deviceTableLabels,\n        additionalValue as deviceTableLabels,\n    ]);\n\n    const calculatedMainValue = i18nMainValue || mainValue;\n    const classModifier = getCommonClassModifier(mainValue);\n    const calculatedAdditionalValue = `${i18nAdditionalValue || additionalValue} ${getRouterName(\n        additionalValue\n    )}`;\n\n    return [calculatedMainValue, calculatedAdditionalValue, classModifier];\n};\n\nexport const useGetConnectionValues = (props: ConnectionColumnData) => {\n    const { isWired, connectionType, wirelessUnitLabel, speedValue } = props;\n    const { value, unitId } = speedValue;\n\n    const [connectionUnitLabel, speedUnitLabel] = useGetTranslatedLabels([\n        wirelessUnitLabel,\n        unitId as deviceTableLabels,\n    ]);\n\n    const mainValue = `${value} ${speedUnitLabel} ${isWired ? 'WPA2' : ''}`;\n    const additionValue = isWired\n        ? `${connectionType} ${connectionUnitLabel}`\n        : `${connectionUnitLabel} ${connectionType}`;\n\n    return [mainValue, additionValue];\n};\n","import React from 'react';\nimport './devices-list-table.scss';\n\nimport { cellRenderTypes } from './devices-list-table-cell.renderers';\n\nimport { useGetTranslatedLabel, useGetTranslatedLabels } from '../../../services/i18n.service';\nimport { getDeviceTableNoElementLabelByType } from '../../../services/devices-list.service';\n\nimport { columns } from '../../../constants/devices-list.constants';\n\nimport {\n    columnLabels,\n    columnTypes,\n    DeviceDataCells,\n    DeviceDataColumn,\n    DeviceDataRows,\n    deviceListTableTypes,\n} from '../../../models/devices-list.model';\n\nexport type DeviceListHeaderProps = {\n    columns: Array<columnLabels>;\n};\nexport type DevicesListTableProps = {\n    rows: DeviceDataRows;\n    type: deviceListTableTypes;\n};\n\nexport const headCellRenderer = (label: string, index: number) => (\n    <section key={index} className=\"device-list-table__header-cell\">\n        <h3 className=\"device-list-table__header-cell-title\">{label}</h3>\n    </section>\n);\n\nexport const DeviceListHeader = ({ columns }: DeviceListHeaderProps) => {\n    const i18nHeaders = useGetTranslatedLabels(columns);\n    return (\n        <section className=\"device-list-table__header\">{i18nHeaders.map(headCellRenderer)}</section>\n    );\n};\nexport const deviceCellRenderer = (\n    { columnData, columnType }: DeviceDataColumn<columnTypes>,\n    index: number\n) => (\n    <section key={index} className=\"device-list-table__cell\">\n        {(cellRenderTypes[columnType] as any)(columnData)}\n    </section>\n);\n\nexport const deviceListRow = (cells: DeviceDataCells, index: number) => (\n    <section key={index} className=\"device-list-table__row\">\n        {cells.map(deviceCellRenderer)}\n    </section>\n);\n\nexport const DevicesListTable = ({ rows, type }: DevicesListTableProps) => {\n    const i18nLabel = useGetTranslatedLabel(getDeviceTableNoElementLabelByType(type));\n\n    return rows.length ? (\n        <section className=\"device-list-table\">\n            <DeviceListHeader columns={columns} />\n            <section className=\"device-list-table__content\">{rows.map(deviceListRow)}</section>\n        </section>\n    ) : (\n        <section className=\"device-list-table__no-content\">{i18nLabel}</section>\n    );\n};\n","import { RecoilValueReadOnly, SetterOrUpdater, useRecoilState, useRecoilValue } from 'recoil';\nimport {\n    asymmetricState,\n    defaultAsymmetricState,\n    defaultFilterState,\n    defaultSpeedStates,\n    filterState,\n    speedStates,\n} from '../recoil-state/devices-list.settings.state';\nimport { DeviceSettingsStates, DevicesSettings } from '../models/devices-list.model';\n\nconst setDeviceValues = (devicesSettings: DevicesSettings) =>\n    devicesSettings.forEach(({ state, set }: DeviceSettingsStates) =>\n        (set as SetterOrUpdater<any>)(state as any)\n    );\n\nexport const useDirty = (validatorState: RecoilValueReadOnly<boolean>) => {\n    const isDirty = useRecoilValue(validatorState);\n\n    const [DFState, setDFState] = useRecoilState(defaultFilterState);\n    const [FState, setFState] = useRecoilState(filterState);\n\n    const [DAState, setDAState] = useRecoilState(defaultAsymmetricState);\n    const [AState, setAState] = useRecoilState(asymmetricState);\n\n    const [DCState, setDCState] = useRecoilState(defaultSpeedStates.common);\n    const [CState, setCState] = useRecoilState(speedStates.common);\n    const [DDState, setDDState] = useRecoilState(defaultSpeedStates.download);\n    const [DState, setDState] = useRecoilState(speedStates.download);\n    const [DUState, setDUState] = useRecoilState(defaultSpeedStates.upload);\n    const [UState, setUState] = useRecoilState(speedStates.upload);\n\n    return {\n        isDirty,\n        onSave: (cb: any) => () => {\n            cb();\n            setDeviceValues([\n                {\n                    set: setDFState,\n                    state: FState,\n                },\n                {\n                    set: setDAState,\n                    state: AState,\n                },\n                {\n                    set: setDCState,\n                    state: CState,\n                },\n                {\n                    set: setDDState,\n                    state: DState,\n                },\n                {\n                    set: setDUState,\n                    state: UState,\n                },\n            ]);\n        },\n        onCancel: () =>\n            setDeviceValues([\n                {\n                    set: setFState,\n                    state: DFState,\n                },\n                {\n                    set: setAState,\n                    state: DAState,\n                },\n                {\n                    set: setCState,\n                    state: DCState,\n                },\n                {\n                    set: setDState,\n                    state: DDState,\n                },\n                {\n                    set: setUState,\n                    state: DUState,\n                },\n            ]),\n    };\n};\n","import React, { useContext } from 'react';\nimport { useRecoilValue } from 'recoil';\n\nimport { Button } from '../../components/common/button';\nimport { PageContent } from '../../components/common/page-content';\nimport { Dirty } from '../../components/common/dirty';\nimport { DevicesSettings } from '../../components/devices-list/devices-settings';\nimport { DevicesListTable } from '../../components/devices-list/devices-list-table/devices-list-table';\n\nimport { ModalContext } from '../../context/modal.context';\n\nimport { useGetDeviceLists } from '../../hooks/device-list-data.hook';\nimport { useDirty } from '../../hooks/toggle-dirty.hook';\n\nimport { deviceDirtyState, validatorState } from '../../recoil-state/devices-list.settings.state';\nimport { useGetTranslatedLabelsObject } from '../../services/i18n.service';\n\nimport { modalContentTypes } from '../../constants/modal.constants';\n\nimport { deviceListTableTypes, devicesListLabels } from '../../models/devices-list.model';\nimport { commonLabels } from '../../models/common.model';\n\nexport const DevicesList = () => {\n    const { unregisteredDevices, registeredDevices, blockedDevices } = useGetDeviceLists();\n    const isValid = useRecoilValue(validatorState);\n    const { isDirty, onCancel, onSave } = useDirty(deviceDirtyState);\n    const { setModal } = useContext(ModalContext);\n\n    const i18nLabels = useGetTranslatedLabelsObject([\n        devicesListLabels.titleLabel,\n        devicesListLabels.descriptionLabel,\n        devicesListLabels.unregisteredDevicesTitleLabel,\n        devicesListLabels.unregisteredDevicesDescriptionLabel,\n        devicesListLabels.registeredDevicesTitleLabel,\n        devicesListLabels.blockedDevicesDescriptionLabel,\n        devicesListLabels.blockedDevicesTitleLabel,\n        devicesListLabels.addDeviceButtonLabel,\n        commonLabels.saveButtonLabel,\n        commonLabels.cancelButtonLabel,\n    ]);\n\n    return (\n        <PageContent classModifier=\"devices\">\n            <h1 className=\"page-title\">{i18nLabels.titleLabel}</h1>\n            <section className=\"page-content-wrapper\">\n                <p className=\"page-text\">{i18nLabels.descriptionLabel}</p>\n                <h2 className=\"page-sub-title\">{i18nLabels.unregisteredDevicesTitleLabel}</h2>\n                <p className=\"page-text\">{i18nLabels.unregisteredDevicesDescriptionLabel}</p>\n                <DevicesListTable\n                    rows={registeredDevices}\n                    type={deviceListTableTypes.registeredType}\n                />\n                <DevicesSettings />\n                <h2 className=\"page-sub-title\">{i18nLabels.registeredDevicesTitleLabel}</h2>\n                <DevicesListTable\n                    rows={unregisteredDevices}\n                    type={deviceListTableTypes.unregisteredType}\n                />\n                <h2 className=\"page-sub-title\">{i18nLabels.blockedDevicesTitleLabel}</h2>\n                <p className=\"page-text\">{i18nLabels.blockedDevicesDescriptionLabel}</p>\n                <DevicesListTable rows={blockedDevices} type={deviceListTableTypes.blockedType} />\n                <Button\n                    className=\"show-more-button\"\n                    buttonHandler={() => setModal({ type: modalContentTypes.registerDeviceType })}\n                    buttonName={i18nLabels.addDeviceButtonLabel}\n                ></Button>\n            </section>\n            <Dirty\n                onCancel={onCancel}\n                onSave={onSave(() => console.log('saved'))}\n                shouldDisplayDirtyBar={isDirty}\n                isValid={isValid}\n                cancelButtonLabel={i18nLabels.cancelButtonLabel}\n                saveButtonLabel={i18nLabels.saveButtonLabel}\n            />\n        </PageContent>\n    );\n};\n\nexport default DevicesList;\n","import { useEffect, useState } from 'react';\n\nimport { getDeviceListTableMockData } from '../services/devices-list.service';\n\nimport { unregisteredDeviceListDataMock } from '../mock/devices-list.mock';\n\nimport { deviceTableContentUpdateDelay } from '../constants/devices-list.constants';\n\nexport const useGetDeviceLists = () => {\n    const [devices, setState] = useState({\n        registeredDevices: getDeviceListTableMockData(unregisteredDeviceListDataMock),\n        unregisteredDevices: getDeviceListTableMockData(unregisteredDeviceListDataMock),\n        blockedDevices: getDeviceListTableMockData(unregisteredDeviceListDataMock),\n    });\n\n    useEffect(() => {\n        const timerId = setInterval(() => {\n            setState((state) => ({\n                blockedDevices: getDeviceListTableMockData(state.blockedDevices),\n                registeredDevices: getDeviceListTableMockData(state.registeredDevices),\n                unregisteredDevices: getDeviceListTableMockData(state.unregisteredDevices),\n            }));\n        }, deviceTableContentUpdateDelay);\n        return () => clearInterval(timerId);\n    }, [setState]);\n\n    return devices;\n};\n","import React from 'react';\nimport './checkbox.scss';\n\nexport type CheckboxProps = {\n    isDisable: boolean;\n    isActive: boolean;\n    triggerCheckbox: (isActive: boolean) => void;\n};\n\nexport type SimpleCheckBoxProps = {\n    name: string;\n    checked: boolean;\n    onChange: any;\n};\n\nconst setCheckboxClassName = (isActive: boolean) =>\n    isActive ? 'checkbox__active' : 'checkbox__inactive';\nconst setCheckboxBarClassName = (isActive: boolean) =>\n    isActive ? 'checkbox--bar__active' : 'checkbox--bar__inactive';\n\nconst setCheckboxClassNameDisabled = (isDisable: boolean) =>\n    isDisable ? 'checkbox__disabled' : 'checkbox__enabled';\n\nexport const Checkbox = React.memo(({ isActive, triggerCheckbox, isDisable }: CheckboxProps) => (\n    <section\n        className={`checkbox ${setCheckboxClassName(isActive)} ${setCheckboxClassNameDisabled(\n            isDisable\n        )}`}\n    >\n        <span\n            onClick={() => !isDisable && triggerCheckbox(!isActive)}\n            className={`checkbox--bar ${setCheckboxBarClassName(isActive)}`}\n        ></span>\n    </section>\n));\n\nexport const SimpleCheckBox = React.memo(({ name, checked, onChange }: SimpleCheckBoxProps) => {\n    return (\n        <input\n            type=\"checkbox\"\n            className=\"simple-checkbox\"\n            name={name}\n            checked={checked}\n            onChange={onChange}\n        ></input>\n    );\n});\n","import { useCallback, useState } from 'react';\n\nimport { useGetTranslatedLabels } from '../services/i18n.service';\n\nimport { Labels } from '../models/i18n.model';\n\nexport const useToggleButtonWithI18n = (labels: Array<Labels>) => {\n    const [isHidden, toggleDetailsVisibility] = useState(true);\n    const i18nLabels = useGetTranslatedLabels(labels);\n\n    return {\n        isHidden,\n        i18nLabels,\n        toggleDetailsVisibility: useCallback(\n            () => toggleDetailsVisibility((isHidden) => !isHidden),\n            [toggleDetailsVisibility]\n        ),\n    };\n};\n"],"sourceRoot":""}